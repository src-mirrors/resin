<document>
<header>
<product>resin</product>
<title>Digest Passwords</title>
<description>
<p>Digest passwords enable an application to avoid storing and even
transmitting the password in a form that someone can read.</p>

<p>A digest of a cleartext password is calculated when it is passed through a
one-way function that consistently produces another series of characters,
<code>digestPassword = digester(username + ":" + realm + ":"
cleartextPassword)</code>.  The function is "one-way" because the
digestPassword cannot be used to reverse-engineer the original password.</p>

<p>Digest passwords can be used in two places: storage and transmission.
Digest passwords in storage means that the password is stored in a digested
form, for example in a database or in a file.
Digest passwords in transmission means that the client (usually a web browser)
creates the digest and submits the digest password to the web server.  
</p>

</description>
</header>


<body>
<summary/>

<section title="Digest protects passwords">

<p>Storing digest passwords is so important for security purposes that the
Resin <a href="security|authentication">authenticators</a> default to assuming
that the passwords are stored in digest form.</p>

<p>The important advantage is that a user's cleartext password is not as easily
compromised. Since the password they use (the "cleartext" password) is not
stored a malicious user cannot determine the password by gaining access to the
database or other backend storage for the passwords.</p>

</section>

<section title="MD5 digest">
<p>Resin's authenticators use "MD5-base64" and a realm "resin" to digest
passwords by default. <var/MD5/> indicates that the MD5 algorithm is used. <var/base64/> is an encoding format to apply to the binary result of MD5.</p>


<p>Some examples are:</p>
<deftable>
<tr><th>Username<th>Realm<th>Password<th>digest
<tr><td>root<td>resin<td>changeme<td>j/qGVP4C0T7UixSpKJpTdw==
<tr><td>harry<td>resin<td>quidditch<td>uTOZTGaB6pooMDvqvl2Lbg==
<tr><td>hpotter<td>resin<td>quidditch<td>x8i6aM+zOwDqqKPRO/vkxg==
<tr><td>filch<td>resin<td>mrsnorris<td>KmZIq2RKXAHV4BaoNHfupQ==
<tr><td>pince<td>resin<td>quietplease<td>Txpd1jQc/xwhISIqodEjfw==
<tr><td>snape<td>resin<td>potion<td>I7HdZr7CTM6hZLlSd2o+CA==
<tr><td>mcgonagall<td>resin<td>quidditch<td>4slsTREVeTo0sv5hGkZWag==
<tr><td>dmalfoy<td>resin<td>pureblood<td>yI2uN1l97Rv5E6mdRnDFwQ==
<tr><td>lmalfoy<td>resin<td>myself<td>sj/yhtU1h4LZPw7/Uy9IVA==
</deftable>

<p>In the above example the digest of "harry/quidditch" is different than the
digest of "hpotter/quidditch" because even though the password is the same, the
username has changed. The digest is calculated with 
<code>digest(username + ":" + realm + ":" + password)</code>, so if the username
changes the resulting digest is different.</p>

</section>

<section title="Calculating a digest">

<p>Of course, storing the digest password is a bit more work.  When
the user registers, the application needs to compute the
digest to store it.</p>


<!-- a form for calculating an MD5 digest -->
<jsp:scriptlet>
<![CDATA[
String digest_user = request.getParameter("digest_user");
String digest_realm = request.getParameter("digest_realm");
String digest_password = request.getParameter("digest_password");
String digest_result = null;

if (digest_realm == null || digest_realm.length() == 0)
  digest_realm = "resin";
pageContext.setAttribute("digest_realm",digest_realm);

if (digest_user != null && digest_password != null)
{
  String digest_concat = digest_user + ":" + digest_realm + ":" + digest_password;

  com.caucho.http.security.PasswordDigest digest_digest = new com.caucho.http.security.PasswordDigest();

  digest_digest.setRealm(digest_realm);
  digest_result = digest_digest.getPasswordDigest(digest_user, digest_password);

  pageContext.setAttribute("digest_user",digest_user);
  pageContext.setAttribute("digest_password",digest_password);
  pageContext.setAttribute("digest_concat",digest_concat);
  pageContext.setAttribute("digest_result",digest_result);
}

String digest_requestURI = request.getRequestURI();
digest_requestURI = digest_requestURI + "#Calculating-a-digest";

pageContext.setAttribute("digest_requestURI",digest_requestURI);
]]>
</jsp:scriptlet>

<form action="${digest_requestURI}">
<jsp:scriptlet>if (digest_result == null || digest_result.length() == 0) {</jsp:scriptlet>
<p>The following form can be used to calculate an MD5-base64 digest:</p>
<jsp:scriptlet>} else {</jsp:scriptlet>
<p>The digest of <var>${digest_concat}</var> is <code><b>${digest_result}</b></code></p>
<jsp:scriptlet>}</jsp:scriptlet>

  <table>
  <tr><td><b>user id:</b>
  <td><input name="digest_user" size="50" value="${digest_user}">

  <tr><td><b>password:</b>
  <td><input name="digest_password" size="50" value="${digest_password}">

  <tr><td><b>realm:</b>
  <td><input name="digest_realm" size="50" value="${digest_realm}">
  <tr><td><input type="submit">
  </table>
</form>

<p>The class <a href="javadoc|com.caucho.http.security.PasswordDigest|"/> can
be used to calculate a digest.</p>

<example title="Calculating a digest - Java example">
  import com.caucho.server.security.PasswordDigest;

  ...

  String username = ...;
  String password = ...;
  String realm = "resin";

  PasswordDigest passwordDigest = PasswordDigest();

  String digest = passwordDigest.getPasswordDigest(username, password, realm);
</example>

<example title="Calculating a digest - PHP example">
  $username = ...;
  $password = ...;
  $realm = "resin";

  $passwordDigest = new Java("com.caucho.server.security.PasswordDigest");

  $digest = $passwordDigest->getPasswordDigest($username, $password, $realm);
</example>

The realm for JdbcAuthenticator and XmlAuthenticator defaults to "resin";
the realm can be specified during configuration:

<example title"Specifying a realm">

&lt;authenticator type='com.caucho.server.security.JdbcAuthenticator'&gt;
  &lt;init&gt;
    &lt;password-digest-realm&gt;hogwarts&lt;/password-digest-realm&gt;

    ...
</example>

</section>

<section title="Using Digest with basic authentication or a form login">

<p>When using the form login method or the HTTP basic authentication login
method, the password submitted is in cleartext.  The Resin authenticator will
digest the password before comparing it to the value retrieved from storage.
The message is transmitted in cleartext but is stored as a digest. This method
provides only half of the protection - the password is not protected in
transmission (although if the form submit is being done over an <a
href="security|ssl">SSL</a> connection it will be secure).</p>

</section>


<section title="Using HTTP digest authentication">

<p>The HTTP protocol includes a method to indicate to the client that it should
make a digest using the password.  The client submits a digest to Resin instead
of submitting a cleartext password. HTTP digest authentication protects the password in transmission.</p>

<p>When using HTTP digest, Resin will respond to the browser and ask it to
calculcate a digest. The steps involved are:</p>
<ul>
<li>Resin provides the client a realm and some other information 
<li>The client obtains a username and password (usually a dialog box with a web browser)
<li>The client calculates a digest using the username, realm, pasword, and other information supplied by Resin
<li>The client submits the digest to Resin
<li>Resin does the same digest calculation as the client did
<li>Resin compares the submitted digest and the digest it calculated.  If they match, the user has been authenticated
</li>
</ul>

<p>The advantage of this method is that the cleartext password is protected in
transmission, it cannot be determined from the digest that is submitted by the
client to the server.</p>

<p>HTTP digest authentication is enabled with the <a config-tag="auth-method"/> child of the <a config-tag="login-config"/> configuration tag.</p>

<example title="Using HTTP digest authentication">
&lt;login-config&gt;
  &lt;auth-method&gt;DIGEST&lt;/auth-method&gt;
&lt;/login-config&gt;
</example>

</section>

<section title="Disabling the use of password-digest">

<p>Although it is not advised, Resin's authenticators can be configured to use
passwords that are not in digest form.</p>

<example title='Disabling the use of password-digest'>
&lt;authenticator>
  &lt;type>com.caucho.server.security.XmlAuthenticator&lt;/type>
  &lt;init>
     &lt;password-digest>none&lt;/password-digest>
     &lt;user>harry:quidditch:user&lt;/user>
  &lt;/init>
&lt;/authenticator>
</example>

</section>

<section title="Compatibility">

<p>Authenticators are not defined by the 
<a href="external|spec|servlet">Servlet Specification</a>, 
so the ability to use passwords stored as a digest depends
upon the implementation of the Authenticator that the application server
provides.  MD5-base64 is the most common form of digest, because it is the
default in <a href="#Using-HTTP-digest-authentication">HTTP digest
authentication</a>.</p>

<p>The use of <code>&lt;auth-method&gt;DIGEST&lt;auth-method&gt;</code> is
defined in the <a href="external|spec|servlet">Servlet Specification</a> 
and implemented in most application servers.</p>

</section>

</body>
</document>


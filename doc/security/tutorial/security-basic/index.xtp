<document>
<header>
<product>resin</product>
<version>Resin 3.0</version>
<type>tutorial</type>
<title>Basic Security and Resin's XmlAuthenticator</title>
<description>
This tutorial covers the basics of JSP and
Servlet security and the use of Resin's XmlAuthenticator.
</description>
<tutorial-startpage>index.jsp</tutorial-startpage>
<keywords>
<keyword>XmlAuthenticator</keyword>
<keyword>com.caucho.http.security.XmlAuthenticator</keyword>
<keyword rank='-1'>authenticator</keyword>
<keyword rank='-2'>security</keyword>
<keyword rank='-2'>basic</keyword>
</keywords>
</header>

<body>
<summary/>

<section title="Files in this example">
<deftable>
<tr><td><viewfile-link file="WEB-INF/web.xml"/>
  <td>The main JSP/Servlet configuration file
<tr><td><viewfile-link file="index.jsp"/>
    <td>The home page for the website
<tr><td><viewfile-link file="login.jsp"/>
    <td>The JSP page containing the login form
<tr><td><viewfile-link file="logout.jsp"/>
    <td>A JSP page that causes a logout
<tr><td><viewfile-link file="home.jsp"/>
    <td>The home page for authenticated users.
<tr><td><viewfile-link file="professors/index.jsp"/>
    <td>The more specific home page for Professor's, available only to users in role 'professor'
<tr><td><viewfile-link file="students/index.jsp"/>
    <td>The more specific home page for Student's, available to users in role 'student' or in role 'professor'
<tr><td><viewfile-link file="staff/index.jsp"/>
    <td>The more specific home page for Staff, available to users in role 'staff' or in role 'professor'
<tr><td><viewfile-link file="inc/buttonbar.jspf"/>
    <td>An include file to render a button bar
<tr><td><viewfile-link file="inc/footer.jspf"/>
    <td>An include file to render a footer
<tr><td><viewfile-link file="inc/nobrowsercache.jspf"/>
    <td>An include file to stop the browser from caching pages
</deftable>
</section>
    
<section title="Specifying roles">
<p>Each user belongs to one or more <var/roles/>.  These roles are
similar to groups in Unix.  The possible roles are specified
in <code/web.xml/>.</p>

<p>In this example, a user is either a <var/professor/>, a
<var/student/>, or a <var/staff/>.  They can also optionally
have an additional role of <var/gryffindor/>,
<var/slytherin/>, <var/hufflepuf/>, or <var/ravenclaw/>,
indicating which house they belong to (or none at all).</p>
      
<example file="WEB-INF/web.xml" re-start="<security-role>" re-end="</security-role>">
&lt;security-role&gt;
  &lt;role-name&gt;professor&lt;/role-name&gt;
&lt;/security-role&gt;
</example>
    
</section>
    
<section title="Specifying secure areas">
<p>You can limit areas of the website to users in a certain
<var/role/>.  You specify url patterns in <code/web.xml/> and the role
that is required.  In JSP/Servlet terminology, this is called <var/Declarative Security/>.
</p>
      
<example title="Declarative Security in web.xml"
         file="WEB-INF/web.xml"
         re-marker="<web-app>"
         re-start="<security-constraint>"
         re-end="</security-constraint>">
&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;Professors&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/professors/*&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;role-name&gt;professor&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
</example>
</section>
    
<section title="Making a login form">
<p>A login form can be used to retrieve the username and password
from the user.  The same form or a seperate form can be used
when the login fails.<p>

<p>In this example the login form and the error form are in the
same JSP file.  If the form is being redisplayed because of an
error the <code/login_error/> request parameter is set to '1'.</p>
      
<example title="login-config: Getting Resin to use the login form"
         file="WEB-INF/web.xml"
         re-marker="<login-config>"
         re-start="<auth-method>"
         re-end="</form-login-config>">
&lt;login-config&gt;
  &lt;auth-method&gt;form&lt;/auth-method&gt;
    &lt;form-login-config&gt;
      &lt;form-login-page&gt;/login.jsp&lt;/form-login-page&gt; 
      &lt;form-error-page&gt;/login.jsp?login_error=1&lt;/form-error-page&gt;
    &lt;/form-login-config&gt;
    ...
&lt;/login-config&gt;
</example>

<example title="An example login form"
         file="login.jsp"
         re-start="form-login-page"
         re-end="</form>">
&lt;form action='j_security_check' method='POST'&gt;
  &lt;table&gt;
    &lt;tr&gt;&lt;td&gt;User:&lt;/td&gt;&lt;td&gt;&lt;input type='text' name='j_username'&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Password:&lt;/td&gt;&lt;td&gt;&lt;input type='password' name='j_password'&gt;&lt;/td&gt;&lt;/tr&gt;

    &lt;tr&gt;&lt;td colspan='2'&gt;&lt;input type=submit&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;

  &lt;!--
    -  In case the user got here without a session, redirect
    -  successful requests to the home page for authenticated
    -  users.  (This is a non-standard, but useful field.)
    --&gt;
  &lt;input type='hidden' name='j_uri' value='/home.jsp'/&gt;
&lt;/form&gt;
</example>
</section>
    
<section title="Causing a login to occur">
<p>Resin will cause a login to occur when a url that points to
a secure area is used.  You do not make a url directly to the
jsp page that contains the login form.</p>

<p>In this example, <code/home.jsp/> is in a secure area, so an
unauthenticated user trying to access it will first be
presented with the login form.</p>

<example title="Accessing a jsp in a secure area causes the login to occur"
         file="WEB-INF/web.xml"
         re-start="'login' link"
         re-end="</security-constraint>">
&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;Home&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/home.jsp&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;!-- 
      '*' for a &lt;role-name&gt; means "authenticated user with any role"
      The user must be logged in with some kind of role to access
      the home page.  
    --&gt;
    &lt;role-name&gt;*&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
</example>

<example title="Making a link to cause a login"
         file="index.jsp"
         re-start=">login<">
&lt;a href="&lt;c:url value='/home.jsp'/&gt;"&gt;login&lt;/a&gt;
</example>
</section>
    
<section title="Determining if the user is authenticated">
      
<p>If the user has done a successfull login, we say that they
have been <var/authenticated/>.
<code/request.getUserPrincipal()/> returns <code/null/> if the 
user has not been authenticated.<p>

<p>In this example it is used to determine whether a 'login' or a
'logout' link should be presented.</p>

<example title="Determining if the user is authenticated"
         file="index.jsp"
         re-marker="<h1"
         re-start="c:choose"
         re-end="/c:choose">
&lt;c:choose&gt;
  &lt;c:when test="${'${'}empty pageContext.request.userPrincipal}"&gt;
    &lt;a href="&lt;c:url value='home.jsp'/&gt;"&gt;login&lt;/a&gt;
  &lt;/c:when&gt;
  &lt;c:otherwise&gt;
    &lt;a href="&lt;c:url value='logout.jsp'/&gt;"&gt;logout&lt;/a&gt;
  &lt;/c:otherwise&gt;
&lt;/c:choose&gt;
</example>
</section>
    
<section title="Getting the current username">
      
<example title="Getting the current username"
         file="home.jsp"
         re-start="Welcome">
Welcome &lt;c:out value="${'${'}pageContext.request.remoteUser}"/&gt;.
</example>
</section>
    
<section title="Doing different things for different roles">
<p>You can also determine if a user is in a certain role in the
body of the page using <code/request.isUserInRole("role")/>.
In JSP/Servlet terminology, this is called
<var/Programmatic Security/>.</p>

<p>In this example, the <code/home.jsp/> redirects the user to a
more specific home page if the user is a <var/professor/>,
<var/student/>, or <var/staff/>.</p>

<example title="Programmatic Security using Java code"
         file="home.jsp"
         re-start="redirect to a more specific"
         re-end=">">
&lt;%
  /** redirect to a more specific homepage if one is available */

  String home_url = null;

  if (request.isUserInRole("professor")) {
      home_url = "professors/";
  } else if (request.isUserInRole("staff")) {
      home_url = "staff/";
  } else if (request.isUserInRole("student")) {
      home_url = "students/";
  }

  if (home_url != null) {
      home_url = response.encodeRedirectUrl(home_url);
      response.sendRedirect(home_url);
      return; // don't do any more of the page
  }
%&gt;
</example>
</section>

<section title="Stop the browser from caching pages">
      
<p>Pages with information that changes depending on whether or
not there is a known user should not be cached by the
browser.</p>

<p>In this example an include file <code/inc/nobrowsercache.jspf/>
is used to send the HTTP headers that stop the browser from
caching the page.  It is used for each page that shows the
button bar at the top, because the button bar changes
depending on whether or not the user is logged in.</p>
      
<example title="Java code to stop the browser from caching the page"
         file="inc/nobrowsercache.jspf">
&lt;%-- stop the browser from caching the page --%&gt;

&lt;%
  response.setHeader("Cache-Control","no-cache,post-check=0,pre-check=0");
  response.setHeader("Pragma","no-cache");
  response.setHeader("Expires","Thu,01Dec199416:00:00GMT");
%&gt;
</example>

<example title="Using inc/nobrowsercache.jsp"
         file="index.jsp"
         re-marker="taglib"
         re-start="nobrowsercache.jspf">
&lt;%@ include file="/inc/nobrowsercache.jspf" %&gt;
</example>
</section>
    
<section title="Causing a logout">
<p>A user can be logged out by invalidating the session.  This
causes all of the information stored in the session to be
lost.  It is especially important to make sure that the
logout page is not cached by the browser.</p>
      
<example title="Causing a logout with session.invalidate()"
         file="logout.jsp"
         re-marker="taglib"
         re-start="session.invalidate()">
&lt;%@ include file="/inc/nobrowsercache.jspf" %&gt;

&lt;%-- invalidating the session causes a loss of all session
     information, including the identity of the user
     --%&gt;

&lt;% session.invalidate(); %&gt;
</example>
</section>

<section title="Using XmlAuthenticator">
<p>Resin provides an authenticator
<a href="javadoc|com.caucho.http.security.XmlAuthenticator|"/> which is
useful for sites which have minimal security requirements.
The developer places entries for users in the authenticator
configuration, or in an xml file, or both.</p>
      
<p>The example below uses digest passwords.  Digest passwords avoid the storage of passwords in cleartext, and are discussed under the security section of the Resin documentation.</p>

<example title="Specifying the XmlAuthenticator as the authenticator to use"
         file="WEB-INF/web.xml"
         re-marker="<login-config>"
         re-start="Resin-specific XmlAuthenticator"
         re-end="</authenticator>">
  &lt;!-- Resin-specific XmlAuthenticator configuration --&gt;
  &lt;authenticator&gt;
    &lt;type&gt;com.caucho.server.security.XmlAuthenticator&lt;/type&gt;

    &lt;init&gt;
      &lt;!-- Optionally put user information here.  --&gt;
      &lt;user&gt;pince:Txpd1jQc/xwhISIqodEjfw==:staff,website&lt;/user&gt;
      &lt;user&gt;filch:KmZIq2RKXAHV4BaoNHfupQ==:staff&lt;/user&gt;

      &lt;!-- You can also use an external file --&gt; 
      &lt;path&gt;WEB-INF/password.xml&lt;/path&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;
  
</example>

<example title="An XML file with usernames, passwords, and roles"
         file="WEB-INF/password.xml">
&lt;!-- password.xml --&gt;
&lt;authenticator&gt;
  &lt;!-- professors --&gt;
  &lt;user name='snape' password='I7HdZr7CTM6hZLlSd2o+CA==' role='professor,slytherin'/&gt;
  &lt;user name='mcgonagall' password='4slsTREVeTo0sv5hGkZWag==' role='professor,gryffindor'/&gt;

  &lt;!-- students --&gt;
  &lt;user name='harry' password='uTOZTGaB6pooMDvqvl2Lbg==' role='student,gryffindor'/&gt;
  &lt;user name='dmalfoy' password='yI2uN1l97Rv5E6mdRnDFwQ==' role='student,slytherin'/&gt;

  &lt;!-- alumni --&gt;
  &lt;user name='lmalfoy' password='sj/yhtU1h4LZPw7/Uy9IVA==' role='alumni,gryffindor'/&gt;
&lt;/authenticator&gt;
</example>
</section>
</body>
</document>

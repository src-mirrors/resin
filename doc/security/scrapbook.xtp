<document>
  <header>
    <product>resin</product>
    <title>Security Scrapbook</title>
    <description>
      <p>A repository of notes and comments that will
        eventually make their way into the documentation.  Please
        treat the information here with caution, it has often not been
        verified.</p>
    </description>
  </header>

  <body>
    <summary objsummary-in-localtoc='1'/>

<faq title="Where can I learn more about SSL?">
<ul>
<li><a href="http://httpd.apache.org/docs-2.0/ssl/ssl_intro.html">Apache documentation</a>
</ul>
</faq>

<faq title="Converting a JSSE Keystore to OpenSSL">
<ul>
<li><a href="http://httpd.apache.org/docs-2.0/ssl/ssl_intro.html">Apache documentation</a>
</ul>
<a href="http://www.thauvin.net/blog/stories.jsp?id=42">link</a>
</faq>

<!--
<faq title="How do I use DIGEST with my custom Authenticator?">
<description>
<p>I have a custom Authenticator that accesses passwords stored in my
backend server using a custom method.  How can I take advantage of the extra
protection that is provided with digest passwords?</p>
</description>

<p>The best method is to store the digested password in the backend server
instead of the plaintext password.

<p>Instead of implementing AbstractAuthenticator.loginImpl, you'll
implement getDigestPassword or better yet getDigestSecret().</p>

    </faq>
-->

<faq title="How do I handle port 80 and root issues on Linux?">

<p>When using the 2.6 Linux kernel or RedHat 9.0, you can use
the standard user-name configuration.  On older Linux versions,
you'll need to use a bit of trickery.</p>

<p>You can use kernel based port forwarding. This feature is not
available for all flavours of Unix, but at least for recent Linux
kernels (2.4) it works fine.
</p>

<p>Here is a very basic example for iptables in a static environment (static means that the example does not deal with ppp connections properly, you might have to add something similar to your ip-up/down scripts).
</p>

<pre>
iptables -t nat -A OUTPUT -d localhost -p tcp --dport 80 -j REDIRECT --to-ports 8080
iptables -t nat -A OUTPUT -d your hostname -p tcp --dport 80 -j REDIRECT --to-ports 8080
iptables -t nat -A PREROUTING -d your hostname -p tcp --dport 80 -j REDIRECT --to-ports 8080
</pre>

<p>ipchains (for Linux 2.2. kernels) should work similar - it might also be possible to map the port directly inside your firewall.</p>
</faq>

  </body>
</document>

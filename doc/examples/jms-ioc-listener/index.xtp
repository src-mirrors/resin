<document>
  <header>
    <product>resin-ee</product>
    <title>JMS Listener IoC</title>
        <description>
          <p>Introduces the JMS message listener configured with IoC.</p>
        </description>
    <type>tutorial</type>
    <tutorial-startpage>send</tutorial-startpage>
  </header>

<body>
<summary/>

<s1 title="Files in this tutorial">
<deftable>
<tr>
  <td><viewfile-link file="WEB-INF/web.xml"/></td>
  <td>Configures the Queue, MessageSender, MessageListener.</td>
</tr>
<tr>
  <td><viewfile-link file="WEB-INF/classes/example/MyListener.java"/></td>
  <td>The message listener.</td>
</tr>
<tr>
  <td><viewfile-link file="WEB-INF/classes/example/MessageServlet.java"/></td>
  <td>The message servlet</td>
</tr>
</deftable>
</s1>

<s1 title="Overview">

<p>Messaging lets a servlet delegate processing to a batch process either
on the same machine or on a separate machine.  The servlet creates a message
and sends it to a queue.  The servlet immediately completes and when the
batch process is ready, it processes the message.</p>

<p>Messaging is therefore comprised of three main components:
</p>

<ul>
<li>A <var>Producer</var> creates messages and sends them to
a <var>Queue</var>.  The Producer could be something like a Servlet.
</li>
<li>A <var>Queue</var> stores the messages from the Produces and provides
them to a Consumer when ready.  The Queue is implemented by the
messaging provider.
</li>
<li>A <var>Consumer</var> processes messages as they become
available in the Queue.  The <var>Consumer</var> is typically a bean
implementing the <code>MessageListener</code> interface.
</li>
</ul>

</s1>

<s1 title="Producer (MessageServlet)">

<p>In this example, the Producer is a Servlet which sends a simple message.
The Producer uses a <code>MessageSender</code> configured in the web.xml
to send the message.</p>

<example title="MessageServlet">
import javax.webbeans.In;

public class MessageServlet extends GenericServlet {
  String message = "sample message";
  @In MessageSender sender = ...;

  ...
  sender.send(null, message);
}
</example>

<p>In this configuration, the <code>MessageSender</code> is a
<code>com.caucho.services.message.MessageSender</code>.  It's also possible
to use the full JMS <code>MessageProducer</code> which is more verbose.
The <code>MessageSender</code> is an interface available in the open
source <a href="http://www.caucho.com/hessian">Hessian distribution</a>,
so it can be used in other application servers as a convenient facade.</p>

<p>The <code>send</code> method completes as soon as
the message is stored in the queue.  Laster, when a thread is available, the
Queue will send the message to the Consumer.</p>

</s1>

<s1 title="Consumer (MyListener)">

<p>The Queue delivers message to the Consumer one by one.  When the
Consumer finishes processing a message the Queue will deliver the next
available message.</p>

<p>The Consumer implements <code>javax.jms.MessageListener</code>, and
will therefore be identical code in any application server.  The
Consumer might even be on a different server or use a different
application server.</p>

<p>In this example, the Consumer just logs the message.</p>

<example title="MyListener">
package example;

import java.util.logging.Logger;
import java.util.logging.Level;

import javax.jms.Message;
import javax.jms.TextMessage;
import javax.jms.MessageListener;

public class MyListener implements MessageListener {
  private static final Logger log =
    Logger.getLogger(MyListener.class.getName());

  public void onMessage(Message message)
  {
    try {
      TextMessage textMessage = (TextMessage) message;

      log.info("received: " + textMessage.getText());

      _lastMessage = textMessage.getText();
    } catch (Exception e) {
      log.log(Level.WARNING, e.toString(), e);
    }
  }
}
</example>

</s1>

<s1 title="Configuration">

<p>Since Resin is an inversion of control container (IoC), it can
 configure the JMS resources in the standard Resin configuration file.
The <a href="../../doc/resin-ioc.xtp">Resin IoC</a> documentation gives
more information.</p>

<p>The configuration is responsible for three things:</p>
<ul>
  <li>Configuring the Queue</li>
  <li>Configuring the MessageSender</li>
  <li>Configuring the MessageListener</li>
</ul>

<p>The <code>Queue</code> is configured directly in a &lt;jms-queue&gt;
tag, together with any configuration setters.  This example uses a
local file store.</p>

<p>Because the listener and sender need a reference to the queue,
the jms-queue stores it in the "my_queue" variable.</p>

<example title="Queue resin-web.xml fragment">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;jms-queue name="my_queue"
             type="file:path=WEB-INF/db"/&gt;

&lt;/web-app&gt;
</example>

<p>JMS also needs a configured ConnectionFactory, so the sender
and listener can create JMS connections.</p>

<example title="ConnectionFactory resin-web.xml fragment">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;jms-connection-factory class="com.caucho.jms.JmsConnectionFactory"/>

&lt;/web-app&gt;
</example>

<p>The MessageListener is configured as an EJB message bean.
Resin's EJB support instantiates the listeners
and receives messages from the queue.</p>

<example title="MyListener configuration resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;ejb-message-bean class="example.MyListener">
    &lt;destination-type>javax.jms.Queue&lt;/destination-type>
    
    &lt;destination-name>my_queue&lt;/destination-name>
  &lt;/ejb-message-bean>

&lt;/web-app>
</example>

<p>Finally, we configure a MessageSender.  The MessageSender is a
singleton bean which encapsulates the JMS work.  Many applications will
write their own MessageSender facade class.</p>

<example title="MessageSender configuration resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;bean class="com.caucho.jms.resource.MessageSenderResource">
    &lt;init>
      &lt;connection-factory>${jmsConnectionFactory}&lt;/connection-factory>

      &lt;destination>${my_queue}&lt;/destination>
    &lt;/init>
  &lt;/bean>

&lt;/web-app&gt;
</example>

<deftable>
<tr>
  <th>tag</th>
  <th>meaning</th>
</tr>
<tr>
  <td>bean</td>
  <td>Configures a bean using Resin's IoC configuration</td>
</tr>
<tr>
  <td>class</td><td>The class name of a resource to be configured</td>
</tr>
</deftable>

</s1>

</body>
</document>

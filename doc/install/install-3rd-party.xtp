<document>
  <header>
    <product>resin</product>
    <title>Resin with Apache and IIS</title>
    <description>
      <p>Resin provides a fast servlet runner for Apache 2.0, Apache 2.2, and IIS
         allowing these HTTP servers to dispatch requests to Resin.
      </p>

    </description>
  </header>

<body>

<localtoc/>

<s1 name="standalone" title="Before you integrate Resin with Apache or IIS">
<p>
Before integrating Resin with Apache, it is valuable to configure Resin as a
<a href="install.xtp">standalone server</a>, especially with more
complicated setups such as those involving virtual hosts.  Doing so isolates
the steps and makes troubleshooting easier.
</p>
 
<p>
Many users find that the performance, flexibility, and features of
Resin make it a desirable replacement for Apache and IIS.  These
3rd party HTTP servers add overhead to Resin's operation, therefore
you should have a specific reason to run one of them with Resin.
</p>
</s1>

<s1 name="apache" title="Using Resin with Apache">
<s2 name="dispatch" title="How Resin integrates with Apache">

<p>When used with Apache, Resin serves JSPs and Servlets and Apache serves
static content like html and images.  Apache is a frontend server, it handles
the request from the browser. Resin's <code>mod_caucho</code> plugin integrates
with Apache, it dispatches requests for JSPs and Servlets to one or more
backend Resin servers.</p>

<figure src="apache_srun.gif"/>

<p>
mod_caucho queries the backend server to distinguish the URLs going to Resin
from the URLs handled by Apache.  The backend server uses the
&lt;servlet-mapping&gt; directives to decide which URLs to send.  Also, any *.war
file automatically gets all its URLs.  Other URLs stay with Apache.
</p>

<p>
There's a more complete discussion of the URL dispatching in the
<a href="../doc/plugin-dispatch.xtp">How the Plugins Dispatch to Resin</a> page.
</p>

</s2> <!-- dispatch -->

<s2 name="unix" title="Unix Installation">

<p>Resin needs Apache 2.x or greater and DSO support.  You probably have DSO
support, but if you're not sure, you can check for <var>mod_so.c</var> when
running <code>httpd -l</code>:
</p>

<example title="checking apache httpd for mod_so.c">
unix&gt; /usr/local/apache/bin/httpd -l
Compiled-in modules:
  ...
  mod_so.c
  ...
</example>

<p>If you don't have DSO support, you can recompile Apache or install another
package from your operating system vendor.  Check their documentation for
more details.</p>

<s3 title="Compiling mod_caucho.so">

<p>
Compiling <var>mod_caucho</var> on Unix is usually as easy as changing the way that
you configure Resin during installation:
</p>

<ol>
  <li>Locate the <var>apxs</var> program that is included with Apache.</li>
  <li> Follow the <a href="install.xtp">Resin installation instructions</a>.
  In addition to any other configure script options, add the 
  <code>--with-apxs</code> option.  Assuming that your apxs program is in
  /usr/sbin/apxs, you might run configure in the following way:
<example>
unix&gt; ./configure --with-apxs=/usr/sbin/apxs --prefix=/usr/local/resin
</example>
  </li>
  <li>Run <code>make</code> and <code>make install</code> as specified in the
  installation instructions.  In addition to building the normal Resin native 
  libraries, these steps will also build mod_caucho, install it, and add some
  directives to the end of your httpd.conf file configuring mod_caucho.
  </li>
</ol>
</s3>


</s2> <!-- unix -->

<s2 name="windows" title="Windows Installation">
<p>
The <code>setup.exe</code> program installs the mod_caucho.dll
plugin for any Apache it finds, and modifies the Apache httpd.conf file.
</p>

<p>
The httpd.conf file is also easily modified manually:
</p>

<example title="httpd.conf">
LoadModule caucho_module \
    &lt;resin.home&gt;/win32/apache-2.0/mod_caucho.dll

ResinConfigServer localhost 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

<p>
Replace <var>win32</var> with <var>win64</var> above if you're using a 64-bit
version of Apache.
</p>

</s2> <!-- windows -->


<s2 title="Configuring resin.xml">

<p>
The communication between <code>mod_caucho</code> and the backend Resin
server takes place using a <var>server</var> port.
</p>

<p>
The <code>resin.xml</code> for the backend server contains
a <code>server</code> to enable the port.  The default <code>resin.xml</code>
has an server listener on port 6800.
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="http://caucho.com/ns/resin/core"&gt;
  ...
  &lt;cluster id="app-tier"&gt;
    ...
    <b>&lt;server id="" address="127.0.0.1" port="6800"/&gt;</b>
    ...
</example>


<p>
The resin.xml and the layout of your webapps should match the
layout that Apache expects.  The mapping of urls to filesystem locations
should be consistent between Apache and the backend Resin server.
</p>


<p>The default resin.xml looks in
<code>&lt;resin.root&gt;/webapps/ROOT</code> 
for JSP files and <code>&lt;resin.root&gt;/webapps/ROOT/WEB-INF/classes</code>
for servlets and java source files.  To tell Resin
to use Apache's document area, you configure an explicit 
<var>web-app</var> with the appropriate document-directory:
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="http://caucho.com/ns/resin/core"&gt;
  ...
  &lt;server&gt;
    ...
    &lt;host id=""&gt;
      &lt;web-app id='/' document-directory="/usr/local/apache/htdocs"/&gt;
    &lt;/host&gt;
    ...
  &lt;/server&gt;
&lt;/resin&gt;
</example>

</s2>

<s2 name="httpd.conf" title="Configuring Apache httpd.conf">

<p>
The <code>ResinConfigServer</code> is used to tell mod_caucho how to contact
the backend Resin server.  The backend Resin server tell's mod_caucho which urls
should be dispatched.
</p>

<deftable>
<tr><th>Apache Command</th><th>Meaning
</th></tr><tr><td>ResinConfigServer <var>host</var> <var>port</var></td><td>Specifies the Resin JVM at <var>host:port</var> as a configuration server.
</td></tr></deftable>

<p>
The <code>caucho-status</code> handler is optional and probably
should be avoided in a production site.  It lets you ask the
Caucho Apache module about it's configuration, and the status of
the backend server(s), valuable for debugging.
</p>

<p>After any change to httpd.conf, restart Apache.  Now browse
http://localhost/caucho-status.</p>

<s3 name="manual-dispatch" title="Manual configuration of dispatching">

<p>
You can also dispatch to Resin directly from the httpd.conf.  Instead of
relying on the ResinConfigServer directive to determine which url's to dispatch
to the backend server, Apache handler's are used to specify the url's to
dispatch.
</p>

<example>
CauchoHost 127.0.0.1 6800

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

<deftable>
<tr>
  <th width="30%">Apache Command</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>CauchoHost <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with an server port at host:port as a backend server.</td>
</tr>
<tr>
  <td>CauchoBackup <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with
  a server port at host:port as a backup backend server.
</td>
</tr>
</deftable>

<deftable>
<tr>
  <th width="30%">Apache Handler</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>caucho-status</td>
  <td>Handler to display /caucho-status</td>
</tr>
<tr>
  <td>caucho-request</td>
  <td>Dispatch a request to Resin</td>
</tr>
</deftable>

<p>
Requests dispatched directly from the Apache httpd.conf will not
appear in /caucho-status.
</p>

</s3>  <!-- manual-dispatch -->

</s2>  <!-- httpd.conf -->


<s2 name="balance" title="Load Balancing">

<p>The <a href="../admin/load-balancing.xtp">Load Balancing</a>
section provides an introduction to the concepts of load balancing.</p>

<p>mod_caucho recognizes cluster configurations for load balancing. 
Requests are distributed to all machines in the cluster, all
requests in a session will go to the same host, and if one host goes down,
Resin will send the request to the next available machine.
Optional backup machines only receive requests if all of the primaries are
down.</p>

<p>
mod_caucho only needs to know about one of the backend servers. It will query
that backend server, and learn about all of the other members of the cluster.
mod_caucho keeps a local cache of the configuration information, so if the
backend server becomes unavailable then the cached configuration will be used
until the backend server becomes available again.
</p>

<p>
The httpd.conf file can also specify more than one backend server, when
mod_caucho checks for configuration updates, it will check each in turn, and
only if none of them are available will it use the local cached copy.
</p>

<example>
ResinConfigServer 192.168.0.11 6800
ResinConfigServer 192.168.0.12 6801
</example>

<s3 name="manual-dispatch-balance" title="Manual configuration of load balanced dispatching">
<p>
Manual dispatching in httpd.conf can also specify the backend hosts and the backend backup hosts, as an alternative to using <code>ResinConfigServer</code>.
</p>

<example>
CauchoHost 192.168.0.11 6800
CauchoBackup 192.168.0.11 6801
CauchoHost 192.168.0.12 6800
CauchoBackup 192.168.0.12 6801

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

</s3> <!-- manual-dispatch-balance -->

<s3 name="manual-dispatch-location" title="Manual configuration of location based dispatching">

<example>
&lt;Location /applicationA/*&gt;
  ResinConfigServer 192.168.0.11 6800
&lt;/Location&gt;

&lt;Location /applicationB/*&gt;
  ResinConfigServer 192.168.0.12 6800
&lt;/Location&gt;
</example>

</s3> <!-- manual-dispatch-location -->

</s2> <!-- balance -->

<s2 title="Troubleshooting">

<ol>
<li>Check your configuration with Resin standalone.
In other words, add a &lt;http port='8080'/&gt; and check port 8080.</li>
<li>Check http://localhost/caucho-status.  That will tell if
mod_caucho has properly connected to the backend Resin server.
Each server should be green and the mappings should
match your resin.xml.
</li>
<li>If caucho-status fails entirely, the problem is in the mod_caucho
installation and the Apache httpd.conf.
</li>
<li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml or the pointer to the backend server in httpd.conf.
</li>
<li>If caucho-status shows a red servlet runner, then Resin hasn't
properly started.
</li>
<li>If you get a "cannot connect to servlet engine", caucho-status
will show red, then Resin hasn't started properly.
</li>
<li>If Resin doesn't start properly, you should look at the logs
in &lt;resin.log&gt;/log.  You should start 
<var>java -jar &lt;resin.home>/lib/resin.jar -verbose</var> or
<var>resin.exe -verbose</var> to get more information.
</li>
<li>If Resin never logs a "hmux listening to *:6800" line,
it's not listening for connections from mod_caucho.
 You'll need to add a &lt;server&gt; line.
</li>
<li>If you get Resin's "file not found", the Apache configuration
is functional but the resin.xml probably points to the wrong directories.
</li>
</ol>

</s2>
</s1>

<s1 title="IIS">
      <figure src="iis_srun.gif"/>

<s2 title="Environment Variables">

<p>Configure the following two environment variables in the Control Panel:</p>
<example>
JAVA_HOME=C:\jdk1.5.0
RESIN_HOME=C:\Resin
</example>
<p>Of course, adjust these to the correct directories for Java and Resin if
they differ from your own.</p>
</s2>

<s2 title="Configuring IIS/PWS">

<p>To configure Resin with IIS, you must follow the following steps:</p>
<ol>
<li>Configure IIS/PWS
</li><li>Configure resin.xml
</li><li>Start resin.exe
</li></ol>


<s3 title="ISAPI Filter">

<p>You should run <code>RESIN_HOME/setup.exe</code> to setup your
configuration.  If setup.exe is not used, or it fails, the steps in <a href="#Manual-Configuration">Manual Configuration</a> are necessary.</p>

</s3>

<s3 title="ISAPI Filter Priority">

<p>isapi_srun.dll installs itself as the default priority.  Some users may need
to set the priority to a higher level, e.g. to override IIS's DAV support.
</p>

<example title="resin.ini">
ResinConfigServer localhost 6802
CauchoStatus yes
IISPriority high
</example>

</s3>

<s3 title="Configuring resin.xml">

<p>resin.xml should mirror the configuration of IIS.  In other words, you 
need to configure the document root and any directory aliases.</p>

<p>For many users, the only need to change needed in Resin is to change the
<a config-tag="document-directory"/> attribute from 'webapps/ROOT' to something
like 'C:/inetpub/wwwroot'.  The mapping of url paths from the browser to real
files on the disk must be the same for Resin as they are for IIS. For more
complicated configurations that use mappings in IIS, you'll need to add <a href="webapp-tags.xtp">path-mapping</a> attributes
to match.</p>

<example title="Example: resin.xml" language="xml">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="">

  &lt;!-- configures the default host, matching any host name --&gt;
  &lt;host id=""&gt;

  &lt;!-- configures the root web-app --&gt;
  &lt;web-app id='/'&gt;
    &lt;root-directory&gt;C:/inetpub/wwwroot&lt;/root-directory&gt;
    &lt;!-- adds xsl to the search path --&gt;
    &lt;class-loader&gt;
      &lt;simple-loader path="$host-root/xsl"/&gt;
    &lt;/class-loader&gt;
  &lt;/web-app&gt;
&lt;/host&gt;

&lt;/cluster&gt;
&lt;/cluster&gt;
</example>

</s3>

</s2>

<s2 name="iis-balance" title="Load Balancing">

<p>Resin's IIS plugin supports load balancing in much the same way as
mod_caucho does for Apache. Consult the <a href="#balance">mod_caucho
load balancing section</a> for more details.</p>
</s2>

<s2 title="Manual Configuration">

<p>Experts may want to configure Resin/IIS by hand instead
of using the setup program.  The steps involved are:</p>

<ol>
<li>Make sure resin.exe works
</li><li>Copy isapi_srun.dll to the IIS scripts directory, <var>d:\inetpub\scripts</var>.
You may need to run <var>net stop w3svc</var> to get permission to overwrite the file.
</li><li>If you have a virtual site (virtual hosts), you must configure IIS to have
the virtual directory <var>/scripts</var> point to <var>d:\inetpub\scripts</var> for
each virtual site.

</li><li>(optional) Create a resin.ini in <var>d:\inetpub\scripts</var> pointing to the ResinConfigServer
</li><li>(optional) Add a "CauchoStatus yes" line to the resin.ini for debugging
</li><li>Configure IIS to load isapi_srun.dll as an ISAPI filter.
</li><li>Restart IIS (control panel/services) or <var>net stop w3svc</var> followed
by <var>net start w3svc</var>.
</li><li>Browse /servlet/Hello and /foo.jsp.
You should see a "cannot connect" error.
</li><li>Start resin.exe
</li><li>Browse /servlet/Hello and /foo.jsp.  You should now see the servlet.
</li></ol>

<p>Copying isapi_srun.dll to <var>inetpub/scripts</var> directory is relatively
straightforward.  If you're upgrading to a new version of Resin, you
may need to stop IIS (control panel/services) to get permission to
overwrite isapi_srun.dll.</p>

<p>The resin.ini is an optional file in <var>inetpub/scripts</var> to
override the automatic registry $RESIN_HOME/conf/resin.xml configuration
file.  If you only have one Resin server, you should not create a resin.ini
and let isapi_srun.dll use the registry value set by the setup.exe program.</p>

<p>resin.ini is only needed if you have multiple Resin configuration
files for different IIS virtual hosts.</p>

<p>The resin.ini should contain the following line:</p>
<example>
ResinConfigServer localhost 6802
</example>

<p>You can change the host from <var>localhost</var> to a backend server.
You can also add multiple <var>ResinConfigServer</var> items to cluster the
configuration.</p>

<p>For debugging, you can add a "CauchoStatus yes" line to the resin.ini:</p>

<example>
ResinConfigServer localhost 6802
CauchoStatus yes
</example>

<p>For security purposes, the default value of CauchoStatus is "no" when
you have a resin.ini.</p>

<p>Adding an ISAPI filter is accomplished in the IIS manager.</p>

<s3 title="IIS and Resin on different machines">

<p>When Resin and IIS are on different machines, you'll change
the ResinConfigServer from "localhost" to the IP address of the
Resin server.</p>

<example>
ResinConfigServer 192.168.0.10 6802
CauchoStatus yes
</example>

</s3>

</s2>

<s2 title="Virtual Sites (Virtual Hosts)">

<p>If IIS is managing multiple virtual sites (better known as virtual
hosts), then you need to configure IIS to use the isapi_srun.dll filter for
each virtual site.  Configure IIS to have the virtual directory <var>/scripts</var>
for each virtual site point to <var>d:\inetpub\scripts</var>, so that each virtual site uses the isapiu_srun.dll.</p>

</s2>

<s2 title="Troubleshooting">

<ol>
<li>Check your configuration with the standalone web server.
In other words, add a &lt;http port='8080'/&gt; block and
browse http://localhost:8080.
</li><li>Check <var>http://localhost/caucho-status</var>.  That will tell if
the ISAPI filter/extension is properly installed. 
</li><li>Each server should be green and the mappings should
match your resin.xml.
</li><li>If caucho-status fails entirely, the problem is in the <var>isapi_srun</var>
installation.  Try
<var>http://localhost/scripts/isapi_srun.dll/caucho-status</var> directly
(bypassing the filter).  If this fails, IIS can't find isapi_srun.dll.
<ul>
<li>Check that isapi_srun.dll is in <var>c:\inetpub\scripts.</var>
</li><li>Make sure that both IIS and the underlying NTFS file system have permissions set appropriately for isapi_srun.dll.
</li><li>Make sure that your IIS host has a mapping from <var>/scripts</var>
to <var>c:\inetpub\scripts</var> and that the <var>/scripts</var> has execute
permissions.
</li><li>IIS 6 users may need to take <a href="#iis6">additional steps</a>.
</li></ul>
</li><li>If you've created a new
IIS web site, you need to create a virtual directory <var>/scripts</var> pointing
to the <var>d:\inetpub\scripts</var> directory.
</li><li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml.
</li><li>If caucho-status shows a red servlet runner, then resin.exe hasn't
properly started.
</li><li>If you get a "cannot connect to servlet engine", caucho-status
will show red, and resin.exe hasn't started properly.
</li><li>If resin.exe doesn't start properly, you should look at the logs
in resin3.2/log.  You should start <var>resin.exe -verbose</var> to get
more information.
</li><li>If you get Resin's file not found, the IIS configuration
is good but the resin.xml probably points to the wrong directories.
</li></ol>

<s3 name="iis6" title="Troubleshooting IIS 6">
<p>
IIS 6/Windows 2003 users may need to perform additional steps.
</p>

<ul>

<li>Make sure that the System account has suffiicient privleges to
read the <code>C:\InetPub</code> and <code>C:\InetPub\Scripts</code> directory
and the <code>isapi_srun.dll</code>.

</li><li>Check the `Web Service Extensions' listed in the `Internet Service Manager'
to make sure that Resin is listed as a Web Service Extension and has a status
of "enabled". You may need to click "add a new web service extension...", 
under Extension name add .jsp or whatever your file extension is, 
click Add and browse to the isapi_srun.dll, check the "Set extension status
to allowed box", click OK.


</li><li>Check that the user specified as the
"application pool identity" for Resin has read/write
permission to the Resin installation directory.
In the Internet Service Manager, open the Properties dialog for
"Application Pools".  Find the User on the "Identity" tab, it may
be the user named "Network Service" in the drop-down list associated
with the radio button labeled "predefined".
Then check physical file permissions on the Resin installation
directory and all its subdirectories and subfiles, to ensure that
that user has read/write permission status is "Enabled".

</li></ul>

</s3>
</s2>
</s1>

<s1 name="plugins" title="Configuring resin.xml to work with Apache and IIS">
<p>The previous sections show how to configure Apache and IIS to work with
Resin.  This section shows how the plugins for these servers interpret the
Resin's configuration and how to change that configuration for your deployment.
</p>

<p>The web server plugins (mod_caucho and isapi_srun) have two main tasks:</p>
<ol>
  <li>Select urls to dispatch to the Java process
  </li><li>Pass the request and retrieve the response from the Java process.
</li></ol>

<s2 title="ResinConfigServer">

<p>mod_caucho discovers its configuration by contacting
the ResinConfigServer specified in the httpd.conf or resin.ini.
The ResinConfigServer can be any Resin server.  When a user requests a URL,
mod_caucho uses the configuration it has determined from the ResinConfigServer
to determine whether Resin or Apache should handle the request. That decision
is based on the configuration in the ResinConfigServer's resin.xml.</p>

</s2>

<s2 title="servlet-mapping selects URLs">

<p>The <a href="webapp-tags.xtp#servlet-mapping">servlet-mapping</a>
tag selects the URLs to send to Resin.
<a href="host-tags.xtp#host">&lt;host&gt;</a> and 
<a href="webapp-tags.xtp">&lt;web-app&gt;</a> group the
servlet-mapping tags.</p>

<s3 title="url-pattern">

<p>servlet-mapping's <a href="webapp-tags.xtp#url-pattern">url-pattern</a>
selects the URLs to pass to Resin.  servlet-mapping and url-pattern
are part of the Servlet 2.3 standard, so there are many references explaining
how it works.</p>

<p>url-pattern can take one of four forms:</p>
<ul>
<li>"<var>/</var>" matches all URLs.  Use this to pass all requests to Resin.
</li><li>"<var>/prefix/url/*</var>" matches any URL starting with <var>/prefix/url</var>,
including <var>prefix/url</var> itself.  It does not match <var>/prefix/urlfoo</var>
because any slash must immediately follow <var>url</var>
</li><li>"<var>/exact/path</var>" matches only the exact path.  In other words, it
will not match <var>/exact/path/bogus</var>.
</li><li>"<var>*.ext</var>" matches any URL with the extension <var>ext</var>.  Resin
allows path-infos, so <var>/foo/bar.ext/path/info</var> will also match.
</li></ul>

</s3>

<s3 title="url-regexp">

<note>mod_caucho does not understand regular expressions.  If you
put regular expressions in your resin.xml, mod_caucho will not send
the request to Resin.  Apache will handle the request itself.</note>

<p>If you want to use regular expressions in servlet-mapping, web-app, or
hosts, you must use Apache-specific configuration to send the request
to Resin.  You can see this by looking at /caucho-status.  /caucho-status
will not display any regular expressions.</p>

</s3>

<s3 title="special servlet-mappings">

<p>There are two special servlet-names which only affect the plugins:
<var>plugin_match</var> and <var>plugin_ignore</var>.</p>

<p><var>plugin_match</var> will direct a request to Resin.
The servlet engine itself
will ignore the plugin_match directive.  You can use plugin_match to
direct an entire subtree to Resin, e.g. to workaround the
regexp limitation, but allow Resin's other servlet-mapping directives
to control which servlets are used.</p>

<p><var>plugin_ignore</var> keeps the request at on the web server.  So you
could create a directory <var>/static</var> where all documents, including JSPs are
served by the web server.</p>

<example>
&lt;!-- send everything under /resin to Resin --&gt;
&lt;servlet-mapping url-pattern='/resin/*'
                 servlet-name='plugin_match'/&gt;

&lt;!-- keep everything under /static at the web server --&gt;
&lt;servlet-mapping url-pattern='/static/*'
                 servlet-name='plugin_ignore'/&gt;
</example>

</s3>

<s3 title="&lt;web-app&gt;">

<p><a href="webapp-tags.xtp">web-apps</a> collect servlets and
JSP files into separate applications.  All the servlet-mappings in a
web-app apply only to the URL suffix.</p>

<p>In the following example, every URL starting with /prefix/url maps to
the web-app.  The servlet-mapping only applies to URLs matching the prefix.
</p>

<example>
...
&lt;web-app id='/prefix/url'&gt;
  &lt;servlet-mapping url-pattern='*.foo' .../&gt;
&lt;/web-app&gt;
..
</example>

<p>In the exaple, mod_caucho will match any URL matching /prefix/url/*.foo.
/prefix/url/bar.foo will match, but /test/bar.foo will not match.</p>

<note>Resin standalone allows a <var>regexp</var> attribute instead of an
id.  Because mod_caucho does not understand regexps, it will ignore any
web-app with a <var>regexp</var> attribute.</note>

<note>web.xml files and war files are treated exactly the same as web-apps
in the resin.xml.</note>

</s3>

<s3 title="&lt;host&gt;">

<p><a href="cluster-tags.xtp#host">host</a> blocks configure
<a href="virtual-host.xtp">virtual hosts</a>.  There's a bit of
extra work for virtual hosts that we'll ignore here.  (Basically, you
need to add Apache <var>ServerName</var> directives so Resin knows the name
of the virtual host.)</p>

<p>For dispatching, a host block gathers a set of web-apps.  Each host
will match a different set of URLs, depending on the web-app configuration.
The default host matches any host not matched by a specific rule.</p>

<p>As usual, /caucho-status will show the URLs matched for each host.</p>

<note>mod_caucho does not understand the host <var>regexp</var> attribute.
It will ignore all hosts using <var>regexp</var>.  To get around this, you can
either configure Apache directly (see below), or configure the default host
with the same set of servlet-mappings.  Since mod_caucho will use the
default host if no others match, it will send the right requests to
Resin.</note>

</s3>

</s2>

</s1>


</body>
</document>

<document>
<header>
  <product>resin</product>
  <title>Control structures and special directives</title>
  <description>
  <p>Resin's configuration files provide support for certain control tags for
  conditional processing.</p>
  </description>
</header>

<body>

<localtoc/>

<s1 name="control" title="Control Structures" version="3.0.7">
<p>The resin.conf and web.xml configuration files can use
control structures.  The syntax of the control structures is deliberately similar to the control structures used in JSTL.  

</p><p>These can be useful to create a resin.conf which works for both testing and
deployment, depending on an environment parameter.
When possible, users should avoid using the control tags when possible
to keep their configuration files as simple as possible.</p>

<example>
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="http://caucho.com/ns/resin/core"&gt;
  &lt;resin:choose&gt;
  &lt;resin:when test="\${mode='development'}"&gt;
    &lt;resin:log&gt;Development Mode&lt;/resin:log&gt; 
  &lt;/resin:when&gt;
  &lt;resin:when test="\${mode='deploy'}"&gt;
    &lt;resin:log&gt;Deployment Mode&lt;/resin:log&gt; 
  &lt;/resin:when&gt;
  &lt;resin:otherwise&gt;
    &lt;resin:log&gt;Unknown Mode \${mode}&lt;/resin:log&gt;
  &lt;/resin:otherwise&gt;
  &lt;resin:choose&gt;
&lt;/web-app&gt;
</example>

<p>The source code for the control elements is found in 
<a href="javadoc|com.caucho.config.core|"/>.</p>

<s2 title="resin:set" version="Resin 3.0.7" type="defun">

<p>resin:set adds an EL variable to the current context.</p>

<def>
&lt;resin:set var="name" value="\${value}"/&gt;
</def>

<deftable-childtags>
<tr><td>name</td><td>name of the variable to set</td><td>required
</td></tr><tr><td>value</td><td>value</td><td>required
</td></tr></deftable-childtags>

<example title="resin:set in resin.conf">
&lt;resin xmlns="http://caucho.com/ns/resin"
          xmlns:resin="http://caucho.com/ns/resin/core">
  &lt;resin:set name="root" value="/var/www">

  &lt;cluster id="app-tier">
    &lt;root-directory>${root}&lt;/root-directory>

    ...
  &lt;/cluster>
&lt;/resin>
</example>

</s2>

<s2 title="resin:if" version="Resin 3.0.7" type="defun">

<p>resin:if executes part of the configuration file conditionally.</p>

<def>
&lt;resin:if test="\${expr}"&gt;
  ...
&lt;resin:if&gt;
</def>

<deftable-childtags>
<tr><td>test</td><td>the test to perform
</td></tr></deftable-childtags>
</s2>

<s2 title="resin:choose" version="Resin 3.0.7" type="defun">

<p>resin:choose implements an if, elsif, else.</p>

<def>
&lt;resin:choose&gt;
  &lt;resin:when test="\${expr1}"&gt;
    ...
  &lt;/resin:when&gt;

  &lt;resin:when test="\${expr2}"&gt;
    ...
  &lt;/resin:when&gt;

  &lt;resin:otherwise&gt;
    ...
  &lt;/resin:otherwise&gt;
&lt;resin:choose&gt;
</def>

<deftable-childtags>
<tr><td>resin:when</td><td>
</td></tr><tr><td>resin:choose</td><td>
</td></tr></deftable-childtags>

<s3 title="resin:when" version="Resin 3.0.7" type="defun">
<parents>resin:choose</parents>
<p>&lt;resin:when> conditionally configures a block within a
&lt;resin:choose> block.  If the <var>test</var> matches, Resin will
use the enclosed configuration.</p>
<deftable-childtags>
<tr><td>test</td><td>the test to perform
</td></tr></deftable-childtags>
</s3>

<s3 title="resin:otherwise" version="Resin 3.0.7" type="defun">
<parents>resin:choose</parents>
<p>&lt;resin:otherwise> is the catch-all configuration for a &lt;resin:choose>
block when none of the &lt;resin:when> items match.</p>
<deftable-childtags>
<tr><td>test</td><td>the test to perform
</td></tr></deftable-childtags>
</s3>
</s2> <!-- resin:choose -->
</s1>


<s1 name="special" title="Special Directives" version="3.0.7">
  
<s2 title="resin:log" version="Resin 3.0.7" type="defun">

<p>Logs a message to the given log file. The content of the element is the
message.</p>

<example title="logging in resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;resin:log&gt;Starting server \${server.name}&lt;/resin:log&gt;
&lt;/web-app>
</example>

</s2>

<s2 title="resin:import" version="Resin 3.0.7" type="defun">

<p>resin:import is used to read configuration information from another file.
The target file is validated by a schema where the schema depends on the
location of the resin:import.
A resin:import in &lt;server&gt; will have a target with a top-level
of &lt;server&gt;.
</p>

<deftable-childtags>
<tr><td>path</td><td>a path to a file</td><td>either path or fileset is required
</td></tr><tr><td>fileset</td><td>a <a config-tag="fileset"/></td><td>either path or fileset is required
</td></tr><tr><td>optional</td><td>if true, no error when file does not exist</td><td>false
</td></tr></deftable-childtags>

<example title="example import as used in app-default.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
          xmlns:resin="http://caucho.com/ns/resin/core">
  &lt;cluster id="app-tier">

    &lt;web-app-default>
      &lt;resin:import path="WEB-INF/web.xml" optional="true"/>
      &lt;resin:import path="WEB-INF/resin-web.xml" optional="true"/>
    &lt;/web-app-default>

  &lt;/cluster>
&lt;/resin>
</example>

</s2>

<s2 title="resin:env" version="Resin 3.0.7" type="defun">

<p>resin:env creates a new environment for a section of the
configuration file.  Some users may want to use this to create resources
or databases with custom &lt;class-loader&gt; tags.</p>

<p>resin:env is tricky and only required for some extraordinary circumstances.
Using it correctly requires a good understanding of classloaders.</p>

<p>Here is an example of a solution for the situation where a custom access
logging class requires an old version of a jar that the web application uses as
well.  The requirement is that the <code>example.MyAccessLog</code> use an old
version of the classes in Foo.jar, webapps use a newer version of the jar.</p>

<p>In a normal circumstance, <code>access-log</code> is used in the &lt;host&gt;
environment.  If the <code>example.MyAccessLog</code> uses a class from a jar
file <code>oldversion-Foo.jar</code>, <code>oldversion-Foo.jar</code> needs to
available to the classloader for the &lt;host&gt; environment.  Because a
%lt;web-app&gt; inherits the
classes of the &lt;host&gt;, the webapp will end up with the
<code>Foo.jar</code> classes from the host's classloader;
<code>WEB-INF/lib/Foo.jar</code> will not provide the classes because they have
already been defined in the parent (host) classloader.</p>

<p>The following example solves the problem by using <code>resin:env</code> to
create an environment just for the instantiation of the
<code>example.MyAccessLog</code> class.</p>

<example>
&lt;host id=''&gt;
  &lt;resin:env&gt;
   &lt;class-loader&gt;
     &lt;library-loader path="/opt/lib/oldversion-Foo.jar"/&gt;
   &lt;/class-loader&gt;

   &lt;access-log resin:type="example.MyAccessLog"/&gt;
  &lt;/resin:env&gt;

  ...

  &lt;web-app&gt;
    &lt;!-- WEB-INF/lib can contain Foo.jar and the classes are not overridden 
         by the classes in oldversion-Foo.jar.
       --&gt;
    ...
  &lt;/web-app&gt;
&lt;/host&gt;
</example>

</s2>

</s1>

</body>
</document>
<document>
  <header>
    <product>resin</product>
    <title>run-at: Periodic Services</title>
    <description>
      <p>Some web applications need a task to be run at regular intervals, e.g. once
        an hour or once a day.  For example, a search application might want to
        spider the web site every day to automatically pick up any new pages.
        Syndication applications might poll their news sites every hour to check for
        updates.</p>
    </description>

  </header>

  <body>

<s1>
      <p>Resin's <var>run-at</var> servlets make periodic tasks simple.  At the
          specified interval, Resin will execute a configured servlet.  Because the
          periodic task is implemented as a servlet, the API is familiar and
          debugging is simple.</p>

      <p><var>run-at</var> has several advantages over spawning a new thread.
          First, when you spawn a thread, you need to make sure you close it properly
          when the servlet is unloaded.  Servlets can be unloaded at any time.
          Also, <var>run-at</var> automatically handles classloader issues.  A thread
          implementation needs to ensure that the running thread has the same
          classloader as the application.</p>
</s1>

    <localtoc/>
<s1 title="Sample Service">

<p>The following example doesn't do much.  When the service routine is called,
is just prints a message to the standard output.</p>

<p>Because there is no request, the <var>request</var> and <var>response</var>
objects are just stubs.  There's no reason to ever use them in a
<var>run-at</var> service.  (Yes, that makes the arguments a little silly, but
it's better than creating a new API.)</p>

<p>The service does have access to the <var>ServletConfig</var>
and <var>ServletContext</var> objects.</p>

<example title="TestAlarm.java">
package test;

import javax.servlet.*;

public class TestAlarm extends GenericServlet {
  public void service(ServletRequest request,
                      ServletResponse response)
    throws IOException, ServletException
  {
    System.out.println("alarming");
  }
}
</example>

<p>The alarm is configured as any other servlet, with the addition of the
<var>run-at</var> tag.  The following configuration runs the servlet every
15 minutes.  If the hour is missing, e.g. <var>:15</var> the service is
run at the specified minute.</p>

<example title="15 minute configuration">
...
&lt;servlet name='alarm' servlet-class='test.TestAlarm'&gt;
  &lt;run-at&gt;:00, :15, :30, :45&lt;/run-at&gt;
&lt;/servlet&gt;
...
</example>

<p>You can also run an alarm every hour.  Just specify the full
hour:minute in the run-at.  For example, <var>16:30</var> runs the service once
a day at 4:30 PM.</p>

<example title="Daily at 4:30 PM Configuration">
...
&lt;servlet name='alarm' servlet-class='test.TestAlarm'&gt;
  &lt;run-at&gt;16:30&lt;/run-at&gt;
&lt;/servlet&gt;
...
</example>

</s1>
  </body>
</document>
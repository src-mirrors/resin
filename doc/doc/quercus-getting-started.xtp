<document>
  <header>
    <product>resin</product>
    <title>Getting Started with Quercus</title>
    <date>January 22, 2006</date>
    
    <description>
      <p>Introduction to Quercus</p>

    </description>
  </header>

  <body>
    <summary/>
    <localtoc/>


<s1 title="Running an Existing PHP Application on Quercus">

<p>In general, getting an application to run on Quercus instead of the standard PHP interpreter requires only a little extra work.  To demonstrate this simple process, let's install <a href="http://wordpress.org/">WordPress</a>.  Suppose WordPress has been extracted to
<code>$resin_home/webapps/ROOT/wordpress</code>, where $resin_home is the home directory of Resin Application Server.</p>

<p>Step 1.  Create the <code>$resin_home/webapps/ROOT/wordpress/WEB-INF</code> directory and add the web.xml file below into that directory.  The web.xml file let QuercusServlet, the Java Servlet that interfaces to Quercus, parse <code>.php</code> files.  Since WordPress uses special ISO-8859-1 characters in their PHP scripts, we need to change the script encoding from the default UTF-8 to ISO-8859-1.  If you need to set ini values, see <a>php.ini</a>.</p>

<example title="$resin_home/webapps/ROOT/wordpress/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
       servlet-class="com.caucho.quercus.servlet.QuercusServlet">
    &lt;init>
      &lt;script-encoding>iso-8859-1&lt;/script-encoding>
    &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

<p>Step 2.  If you have not already done so, download the <a href="http://www.mysql.com/products/connector/j/">MySQL Connector/J JDBC driver</a> into <code>$resin_home/lib</code>. to enable mysql database functions.</p>

<p>Step 3.  The configuration for Resin/Quercus is now complete.  Now you'll need to go through the application's installation routine.  For Wordpress, go to <a href="http://localhost:8080/wordpress/wp-admin/setup-config.php">http://localhost:8080/wordpress/wp-admin/setup-config.php</a> to start the installation.</p>

<p>That's it for Wordpress on Quercus.  If you are encountering issues with a certain application, please see <a>Resources</a> for assistance.</p>

<p>For a list of applications running successfully on Quercus, see <a href="quercus-list-of-applications.xtp">List of PHP Applications Running on Quercus</a>.</p>

</s1>

<s1 title="Configuring Quercus">

<s2 title="Php.ini">

<p>At the moment, Quercus does not have the option to read in an entire php.ini file upon startup.  However, individial PHP initialization values can be set in web.xml.  For example, to set the settings for sending mail:</p>

<example title="$webApp_home/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
       servlet-class="com.caucho.quercus.servlet.QuercusServlet">
    &lt;init>
      &lt;php-ini>
        &lt;sendmail_from>my_email_address&lt;/sendmail_from>
        &lt;smtp_username>my_email_username&lt;/smtp_username>
        &lt;smtp_password>my_email_password&lt;/smtp_password>
      &lt;/php-ini>
    &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

</s2>

<s2 title="Character Encoding Issues">

<p>Because Quercus is 100% Java, Quercus has native support for Unicode and will, by default, parse PHP scripts in UTF-8.  This also means Quercus supports the new PHP 6 Unicode keywords like this Unicode typecast: <code>(unicode)"foo"</code>.  If a PHP application uses special ISO-8859-X characters (i.e. the copyright symbol, accented characters), Quercus will complain because the byte code of those characters are illegal in UTF-8.</p>

<p>To solution is to tell Quercus to parse PHP scripts using the correct character set (ISO-8859-1 for most applications).  For example, to tell Quercus to use ISO-8859-1, add <code>&lt;script-encoding></code> to the <code>init</code> tag of QuercusServlet:</p>

<example title="$webApp_home/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
       servlet-class="com.caucho.quercus.servlet.QuercusServlet">
    &lt;init>
      &lt;script-encoding><b>iso-8859-1</b>&lt;/script-encoding>
    &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

</s2>

<s2 title="Garbage Output On Browser">

<p>There are three encodings you need to worry about: script encoding, output
encoding, and runtime encoding.  By default, Quercus uses UTF-8 for all three.
Script encoding is for when your scripts are in an encoding other than
UTF-8.</p>

<p>Output encoding is the charset used to display output to the browser.
You can set it in your resin-web.xml:</p>

<example title="$webApp_home/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
      servlet-class="com.caucho.quercus.servlet.QuercusServlet">
    &lt;init>
      &lt;php-ini>
        &lt;unicode.output_encoding><b>MY_ENCODING</b>&lt;/unicode.output_encoding>
      &lt;/php-ini>
    &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

<p>There is another encoding that you need to know about.  It is the
unicode.runtime_encoding and it defaults to UTF-8.  It is a PHP 6 directive
that tells Quercus what encoding to assume a binary string is in when
doing implicit conversions to Unicode.  You would set runtime encoding in the
same way as you would for output encoding.</p>

<p>In PHP 6, there are two types of strings, Unicode and binary.  A binary
string is a string where the data is binary, the encoding is unknown, or the
encoding is not Unicode (UTF-16).  If you ever use a function that will likely
return a binary string, then you probably need to set unicode.runtime_encoding.
Quercus may convert your binary string to Unicode and then to your output
encoding for output to the browser.  If your runtime encoding is wrong, then
you would see garbage in your browser.</p>

</s2>

<s2 title="Compiling PHP Scripts for Increased Performance">

<p>Quercus can automatically compile PHP scripts into Java classes for better performance.  This is available only in Resin Professional.</p>

<p>To turn on compilation, the <code>&lt;init></code> tag of QuercusServlet needs to have the <code>&lt;compile></code> tag:</p>

<example title="$webApp_home/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
       servlet-class="com.caucho.quercus.servlet.QuercusServlet">
    &lt;init>
      <b>&lt;compile>true&lt;/compile></b>
    &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

</s2>

</s1>

<s1 title="Using Databases">

<p>JDBC drivers are required to use databases in Quercus.  There are JDBC drivers for MySQL, Oracle, SQLite, and many other database engines.  The desired JDBC driver should be downloaded into Resin's <code>lib</code> directory.  Resin will automatically load jars in the <code>lib</code> directory upon startup.</p>

<p>For example, PHP mysql functions will only function properly when the <a href="http://www.mysql.com/products/connector/j/">MySQL Connector/J JDBC Driver</a> is downloaded and placed in the <code>$resin_home/lib</code> directory.</p>

<p>If a database with JNDI name <code>jdbc/myDatabase</code> is defined in resin.conf, (see <a href="config-database.xtp">Database Configuration</a>), Quercus can do a JNDI lookup for the database when database functions are called.  Thus, database connection parameters like user name can be omitted within PHP scripts.  This allows easier maintenance and enables Java and PHP database settings to be centrally located in resin.conf.</p>

<example>
&lt;?php

  // standard PHP
  //mysql_connect($host, $username, $password, $dbname);

  // using JNDI lookup
  mysql_connect("jdbc/myDatabaseName");

?>
</example>

</s1>

<s1 title="JNDI">

<p><code>jndi_lookup()</code> is a Quercus-only function that can be called to retrieve JNDI objects.  It is useful in a <a href="soa.xtp">SOA (Service Oriented Architecture)</a> system to locate a Java service.</p>

</s1>

<s1 title="Adding PHP Functions by Creating a Quercus Module">

<p>The core PHP functions are implemented inside Quercus modules.  Quercus modules are the Java equivalent of PHP modules.  </p>

<p>All Quercus Modules need to implement AbstractQuercusModule.  Functions defined in your modules are callable from within PHP script by using just the function name.  Function names need to be distinct in order to prevent name collisions, though Quercus does support function overloading (for Java functions only).</p>

<p>A typical Quercus Module looks like:</p>

<example title="$webApp_home/WEB-INF/classes/example/HelloModule.java">
package example;

import com.caucho.quercus.env.Env;
import com.caucho.quercus.module.AbstractQuercusModule;

public class HelloModule extends AbstractQuercusModule
{
  /**
   * @param env provides Quercus environment resources.
   * @param str
   */
  public void HeLLo_TeST(Env env, String str)
  {
    // 'echos' the string
    env.println("hello " + str);
  }
}
</example>

<example title="example.php">
&lt;?php

  // PHP 5 is case-insensitive
  // just prints "hello me" to the browser.
  hello_test("me");

?>
</example>

<p>For a tutorial on how to implement your own Quercus module, see the <a href="../examples/quercus-module/index.xtp">Quercus Module tutorial</a>.</p>

</s1>

<s1 title="Using Plain Old Java Objects (POJO) in PHP Scripts">

<p>You do not need to create a Quercus Module in order to use your Java code in a PHP script.  Quercus provides the <code>java()</code> function to call constructors of Java objects and <code>java_class()</code> to obtain the Java class without calling the constructor.  At the moment, you will need to edit your web.xml so that Quercus will find your custom Java classes.</p>

<example title="$webApp_home/WEB-INF/web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;servlet-mapping url-pattern="*.php"
       servlet-class="com.caucho.quercus.servlet.QuercusServlet">
       &lt;init>
         &lt;class name="myPackage.MyClass"/>
       &lt;/init>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

<example title="$webApp_home/example.php">
&lt;?php

  // Quercus specific construct
  import java.util.Date;

  $date = java("Date", 123456789);
  $list = java("java.util.ArrayList");

  $class = java_class("java.lang.System");

  $in = $class->in;
  $time = $class->currentTimeInMillis();

?>
</example>

<p>Quercus does automatic conversion from Java objects to PHP objects.  Function overloading is supported (for Java functions only).  For more information and a list of Java Annotations that you can use in your code, see <a href="quercus-java-interface.xtp">Java Interface</a>.</p>

</s1>

<s1 title="Java Function Arguments/Return Marshaling">

<p>Quercus does marshaling to and fro Quercus Values and Java objects.  If a Java function requires a String, Quercus will automatically convert the internal Quercus StringValue to a String.  If a Java function returns an <code>int</code>, Quercus will create a Quercus LongValue for it.</p>

<p>For other Java Objects like <code>java.util.Data</code> that are returned to PHP, Quercus puts them into wrappers to expose their public methods and members to the PHP script.  Java Collection, List, and Map instances have the additional ability to be used within a PHP script like any other PHP array.</p>

<p>For more information, see <a href="quercus-java-interface.xtp">Java Interface</a>.</p>

</s1>

<s1 title="Quercus-specific Functions">

<p>Quercus has several Quercus-only PHP functions for debugging and Java interfacing (JNDI, JMS, and JMX).  For more information, see <a href="quercus-resin-module.xtp">Resin PHP Functions</a>.</p>

<p>The list of debugging functions are below:</p>

<s2 title="Debugging Functions">

<ol>
<li>resin_var_dump($a) - dumps the argument to standard out</li>
<li>resin_call_stack() - returns an array containing the PHP function call stack.</li>
<li>resin_debug($a) - logs the argument into Resin's log at the INFO level</li>
<li>resin_thread_dump() - dumps the Java stack to standard out</li>
</ol>

</s2>

</s1>

<s1 title="Differences from PHP 6">

<p>Quercus implements PHP 5 but supports most of PHP 6 language features that are available in the PHP 6 preview distribution.  Differences from PHP 6 are:</p>

<ol>

<li>Unicode support cannot be turned off.</li>

<li>For performance considerations, Unicode string indexing is done by Unicode code units.  A Unicode code unit is equivalent to a Java <code>char</code> primitive.  In PHP 6, it is done by code points.  A code point consists of 1 or 2 code units.  Quercus uses code units because determining code point boundaries takes a lot of resources.</li>

</ol>

</s1>

<s1 title="Resources">

<ul>
<li><a href="quercus-list-of-applications.xtp">List of PHP Applications Running on Quercus</a></li>
<li><a href="quercus-overview.xtp">Overview and Module status</a></li>
<li><a href="http://wiki.caucho.com">Caucho Wiki</a></li>
<li><a href="http://bugs.caucho.com">Caucho Bug Tracker</a></li>
<li><a href="http://maillist.caucho.com/mailman/listinfo">Resin Mailing Lists</a></li>
</ul>

</s1>

  </body>
</document>
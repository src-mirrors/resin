<document>
  <header>
    <product>resin-ee</product>
    <resin-2.0>$ee/ejb-ref/burlap-draft-spec.xtp</resin-2.0>
    <title>Burlap 1.0 Specification</title>
    <date>Aug 9, 2003</date>
  </header>

  <body>
    <summary/>


<s1 title="Design Goals">

<p>The Burlap protocol was created to solve a specific problem:</p>
<blockquote>Allow
Java Enterprise Java Beans (EJB) services to interoperate with non-Java
servers and clients using an XML-based protocol.
</blockquote>

<p>The <a href="http://www.caucho.com/burlap">Burlap home page</a>
contains the latest information about Burlap.

</p><p>The name "Burlap" was chosed for a simple reason: it's boring.
The wire protocol for web services should be invisible
to application writers.  Wire protocols should not require
external schema or IDL.

</p><p>Given the EJB environment, the Burlap protocol has the
following requirements:</p>

<ul>
<li>It must use the simplest possible subset of XML.
</li><li>It must not require external IDL or schema definitions; it should be
invisible to application writers.
</li><li>It must have sufficient power to serialize Java.
</li><li>It must have sufficient power to support EJB.
</li><li>It must allow non-Java clients to use web services.
</li><li>It must allow web services to deployed as a Servlet.
</li><li>It must be simple so it can be effectively tested.
</li><li>It must be as fast as possible.
</li><li>It should support transaction contexts.
</li></ul>

<p>The <a href="burlap-notes.xtp">design notes</a> explain some
of the design decision in creating the Burlap protocol.

</p><p>The leading XML-based RPC protocols do not meet these
requirements.  UserLand's <a href="http://www.xmlrpc.com">XML-RPC</a>
is insufficiently powerful to
support Java serialization or EJB.  Microsoft's
<a href="http://www.w3.org/TR/SOAP">SOAP</a> is overly
complicated and underdefined.  In particular, it requires XML
namespaces, attributes, overly complicated typing, and 
external schema.

</p></s1>

<s1 title="SML">

<p>Burlap uses SML (Simple Markup Language), a restricted subset of XML:</p>

<ul>
<li>Only elements and character data are allowed.
</li><li>No namespaces, no attributes, no processing instructions, no
comments, no DTDs, no CDATA sections.
</li><li>No mixed content: an element may contain either
elements or character data, but not both.
</li><li>Only UTF-8 encoding is allowed.
</li><li>Only numbered character entities, e.g. &amp;#60;, and the standard
XML entities (&amp;lt;, &amp;gt;, and &amp;amp;) are allowed as
escapes.
</li><li>All whitespace in character data is significant.
</li></ul>

<p>The smallness of SML allows less room for bugs, simplifies
testing, and makes reasonably-fast implementations feasible.
It forces conformance by eliminating ambiguities.</p>

<p>The SML grammar needs only six productions:</p>

<def>
<var>tag-list</var> ::= (<var>S</var> <var>tag</var>)* <var>S</var>

<var>tag</var>      ::= &lt;<var>name</var>&gt; <var>tag-list</var> &lt;/<var>name</var>&gt;
         ::= &lt;<var>name</var>&gt; <var>cdata</var> &lt;/<var>name</var>&gt;

<var>S</var>        ::= (' ' | '\t' | '\r' | '\n')*

<var>cdata</var>    ::= ([^&lt;&amp;] | &amp;# [0-9]+ ; | &amp;lt; | &amp;gt; | &amp;amp;)*
<var>name</var>     ::= [a-zA-Z:_] [a-zA-Z0-9.-_:]*
</def>

<note>SML explicitly forbids XML short tags, e.g. &lt;tag/&gt;,
and the XML header, e.g. &lt;?xml version='1.0'?&gt;</note>
</s1>

<s1 title="Serialization">

<p>Burlap's object serialization has 9 primitive types:</p>
<ol>
<li><var>boolean</var>
</li><li>32-bit <var>int</var>
</li><li>64-bit <var>long</var>
</li><li>64-bit <var>double</var>
</li><li>ISO-8609 <var>date</var>
</li><li>UTF8-encoded <var>string</var>
</li><li>UTF8-encoded <var>xml</var>
</li><li><var>base64</var> binary data
</li><li><var>remote</var> objects
</li></ol>

<p>It has 2 combining constructs:</p>
<ol>
<li><var>list</var> for lists and arrays
</li><li><var>map</var> for objects and hash tables.
</li></ol>

<p>Finally, it has 2 special contructs:</p>
<ol>
<li><var>null</var> for null values
</li><li><var>ref</var> for shared and circular object references.
</li></ol>

<s2 title="null" type="defun">
<p>Null represents a null pointer.
The XML short form is forbidden, i.e. &lt;null&gt; must have
separate open and close tags.</p>

<p>&lt;null&gt; values are allowed in place of any &lt;string&gt;, &lt;xml&gt;,
&lt;base64&gt;, &lt;list&gt;, &lt;map&gt;, or &lt;remote&gt;.</p>

<results>
 &lt;null&gt;&lt;/null&gt;
</results>
</s2>

<s2 title="boolean" type="defun">
<p>A boolean value expressed as an integer, 0 or 1.</p>

<results>
 &lt;boolean&gt;0&lt;/boolean&gt;
</results>

</s2>

<s2 title="int" type="defun">
<p>A 32-bit signed integer.</p>

<results>
&lt;int&gt;-32132&lt;/int&gt;
</results>

</s2>

<s2 title="long" type="defun">
<p>A 64-bit signed integer.</p>

<results>
&lt;long&gt;1000000000&lt;/long&gt;
</results>

</s2>

<s2 title="double" type="defun">
<p>A 64-bit IEEE floating pointer number.</p>

<results>
&lt;double&gt;1234.9431e12&lt;/double&gt;
</results>

</s2>

<s2 title="string" type="defun">
<p>A 16-bit unicode character string encoded in UTF-8.  The
UTF-8 encoding follows from the SML rules.  Similarly, the only
escapes allowed are &amp;#xx;, &amp;lt;, &amp;gt;, and &amp;amp;.
All whitespace is significant.</p>

<results>
&lt;string&gt;Escape the less than symbol as &amp;lt; or
using the numeric escape &amp;#38;&lt;/string&gt;
</results>
</s2>

<s2 title="xml" type="defun">
<p>An XML document encoded as a 16-bit unicode character
string encoded in UTF-8, following the rules for &lt;string&gt;.
Special characters, like `&lt;' must be escaped.  The only escapes allowed
are &amp;#xx;, &amp;lt;, &amp;gt;, and &amp;amp;. All whitespace is
significant.</p>

<results>
&lt;xml&gt;
&amp;lt;top&amp;gt;
  &amp;lt;body test='foo'/&amp;gt;
&amp;lt;/top&amp;gt;
&lt;/xml&gt;
</results>

<note>Because this document does not define the language mapping,
implementations are free to return a string when reading an &lt;xml&gt;
entity.</note>

</s2>

<s2 title="date" type="defun">
<p>An ISO8609-encoded date.</p>

<results>
&lt;date&gt;19880508T095231Z&lt;/date&gt;
</results>

</s2>

<s2 title="base64" type="defun">
<p>A base64-encoded binary stream.  The base64 string may have
whitespace after any triplet, but not within a triplet.</p>

<results>
 &lt;base64&gt;
zxc9Z9
m2z8==
&lt;/base64&gt;
</results>

</s2>

<s2 title="list" type="defun">
<p>An ordered list, like an array.  The &lt;type&gt;
element describes the type of the list and the &lt;length&gt; element
specifies the number of values in the list.  Both &lt;type&gt; and
&lt;length&gt; tags are required, but both may be empty.  If the &lt;length&gt;
is empty, the receiver will determine the list length from the
actual number of elements before the &lt;/list&gt;.</p>

<def>
list = (type, length, (%object;)*)
</def>

<p>Each &lt;list&gt; item is added to the reference list.  See the
&lt;ref&gt; element.

</p><p>A &lt;list&gt; might also be represented by a &lt;null&gt; or &lt;ref&gt;.
Parsers must be prepared to recognize any of those three.</p>

<results title="serialization of a Java int[]">
&lt;list&gt;
  &lt;type&gt;[int&lt;/type&gt;
  &lt;length&gt;3&lt;/length&gt;
  &lt;int&gt;0&lt;/int&gt;
  &lt;int&gt;1&lt;/int&gt;
  &lt;int&gt;2&lt;/int&gt;
&lt;/list&gt;
</results>

<results title="serialization of a Java ArrayList">
&lt;list&gt;
  &lt;type&gt;&lt;/type&gt;
  &lt;length&gt;3&lt;/length&gt;
  &lt;int&gt;0&lt;/int&gt;
  &lt;double&gt;1.3&lt;/double&gt;
  &lt;string&gt;foobar&lt;/string&gt;
&lt;/list&gt;
</results>

<note>The valid values of &lt;type&gt; are not specified in this
document and may depend on the specific application.  For example, a
Java EJB server which exposes an Burlap interface can use the &lt;type&gt;
information to instantiate the specific array type.
On the other hand, a Perl server would likely ignore the contents of &lt;type&gt;
entirely and create a generic array.
</note>

</s2>

<s2 title="map" type="defun">
<p>Represents serialized objects and Hashtables.  The &lt;type&gt;
element describes the type of the map.  Objects are represented by a
map from field names to their values and &lt;type&gt; is the class
of the object itself.</p>

<def>
map ::= (type, ((%object;), (%object;))*)
</def>

<p>The &lt;type&gt; element is mandatory, although its value may be
empty.  For objects, unrecognized keys must be ignored.

</p><p>Each &lt;map&gt; is added to the reference list.  A &lt;map&gt; might
also be represented as &lt;null&gt; or &lt;ref&gt;.</p>

<example title="Serialization of a Java Object">
public class Car implements Serializable {
  String model = "Beetle";
  String color = "aquamarine";
  int mileage = 230431;
}
</example>
<results>
&lt;map&gt;
  &lt;type&gt;com.caucho.test.Car&lt;/type&gt;

  &lt;string&gt;model&lt;string&gt;
  &lt;string&gt;Beetle&lt;/string&gt;

  &lt;string&gt;color&lt;string&gt;
  &lt;string&gt;aquamarine&lt;/string&gt;

  &lt;string&gt;mileage&lt;string&gt;
  &lt;int&gt;230431&lt;/int&gt;
&lt;/map&gt;
</results>

<example title="A sparse array">
map = new HashMap();
map.put(new Integer(1), "fee");
map.put(new Integer(75), "fie");
map.put(new Integer(932), "foe");
</example>
<results>
&lt;map&gt;
  &lt;type&gt;java.util.HashMap&lt;/type&gt;

  &lt;int&gt;1&lt;int&gt;&lt;string&gt;fee&lt;/string&gt;
  &lt;int&gt;75&lt;int&gt;&lt;string&gt;fie&lt;/string&gt;
  &lt;int&gt;932&lt;int&gt;&lt;string&gt;foe&lt;/string&gt;
&lt;/map&gt;
</results>

<note>The &lt;type&gt; will depend on the specific protocol. EJB-based
protocols will use Java classes.</note>

</s2>

<s2 title="ref" type="defun">
<p>An integer referring to a previous &lt;list&gt; or &lt;map&gt;
instance.  As each &lt;list&gt; or &lt;map&gt; is read from the
input stream, it is assigned an integer.  A later &lt;ref&gt; can then use
the previous object.</p>

<def>
ref ::= #CDATA
</def>

<p>&lt;ref&gt; can refer to incompletely-read items.  For example, a
circular linked-list will refer to the first link before the entire list
has been read.</p>

<p>A possible implementation would add each &lt;map&gt; and &lt;list&gt; to an
array as its read.  The &lt;ref&gt; will return the corresponding object from the
array.  To support circular structures, the implementation would store
the &lt;map&gt; or &lt;list&gt; immediately, before filling in the object's
contents.</p>

<p>Each &lt;list&gt; or &lt;array&gt; is stored into an array as it is
parsed.  &lt;ref&gt; selects one of the stored objects.  The first
object is numbered '0'.</p>

<example title="circular list">
list = new LinkedList();
listhead = 1;
list.tail = list;
</example>
<results>
&lt;map&gt;
  &lt;type&gt;LinkedList&lt;/type&gt;
  &lt;string&gt;head&lt;/string&gt;&lt;int&gt;1&lt;/int&gt;
  &lt;string&gt;tail&lt;/string&gt;&lt;ref&gt;0&lt;/ref&gt;
&lt;/map&gt;
</results>

<note>&lt;ref&gt; only to &lt;list&gt; and &lt;map&gt; elements.  &lt;string&gt;
and &lt;base64&gt;, in particular, can't share references.</note>

</s2>

<s2 title="remote" type="defun">
<p>A reference to a remote object.  The &lt;type&gt; element
specifies the object type and the &lt;string&gt; element specifies the remote
object's URL.</p>

<def>
remote ::= (type, string)
</def>

<p>Remote support is optional.  Clients and servers don't need
to support &lt;remote&gt; if the service doesn't need it.</p>

<results title="EJB Session Reference">
&lt;remote&gt;
  &lt;type&gt;test.TestObj&lt;/type&gt;
  &lt;string&gt;http://localhost/ejbhome;ejbid=69Xm8-zW&lt;/string&gt;
&lt;/remote&gt;
</results>

<note>Needed to support EJB in a reasonably portable way.</note>
</s2>

</s1>

<s1 title="burlap:call">

<p>A Burlap call invokes a method on an object with an argument
list.  The object is uniquely named by its URL.  The arguments are
specified by Burlap serialization.</p>

<def>
burlap:call ::= (%header;), method, (%object;)*
</def>

<results title="obj.add2(2,3)">
&lt;burlap:call&gt;
  &lt;method&gt;add2&lt;/method&gt;
  &lt;int&gt;2&lt;/int&gt;
  &lt;int&gt;3&lt;/int&gt;
&lt;/burlap:call&gt;

&lt;burlap:reply&gt;
  &lt;int&gt;5&lt;/int&gt;
&lt;/burlap:reply&gt;
</results>

<s2 title="Object Naming">

<p>The URL uniquely identifies the Burlap object.  This spec does
not mandate any particular URL naming convention.</p>

</s2>

<s2 title="EJB naming (non-normative)">

<p>As an example, the following format is used for EJB:</p>

<def>
http://hostname/ejb<var>/ejb-name</var>;ejbid=<var>object-id</var>
</def>

<p><var>http://hostname/ejb</var> identifies the EJB container.  In
Resin-EJB, this will refer to the EJB Servlet.  HTTP is used as an
example; Burlap does not require the use of HTTP.</p>

<p><var>/ejb-name</var>, the path info of the request, identifies the EJB home.
EJB containers can contain several entity and session beans, each with its
own EJB home.  The <var>ejb-name</var> corresponds to the ejb-name in the
deployment descriptor.

</p><p><var>object-id</var> identifies the specific object.  For entity beans, the
object-id encodes the primary key.  For session beans, the object-id encodes
a unique session identifier.  Home interfaces have no ";ejbid=..." portion.</p>

<example title="Example Entity Home Identifier">
http://localhost/ejb/houses
</example>

<example title="Example Session Bean Identifier">
http://localhost/ejb/session;ejbid=M9Zs1Zm
</example>

</s2>

<s2 title="Methods and Overloading">

<p>Method names must be unique.  Two styles of overloading are
supported: overloading by number of argumetns and overloading
by argument types.  Overloading is permitted by
encoding the argument types in the method names.  The types of
the actual arguments must not be used to select the methods.</p>

<p>Method names beginning with <var>_burlap_</var> are reserved.</p>

<p>Servers should accept calls with either the mangled method name
or the unmangled method name.  Clients should send the mangled method name.</p>

<note>See the Java binding for a possible overloading scheme.</note>

<example>add(int a, int b)</example>
<results>add__2</results>
<results>add_int_int</results>
<example>add(double a, double b)</example>
<results>add_double_double</results>
<example>add(shopping.Cart cart, shopping.Item item)</example>
<results>add_shopping.Cart_shopping.Item</results>

</s2>

<s2 title="Arguments">

<p>Arguments immediately follow the method in positional order.  Argument
values use Burlap's serialization.</p>

<results title="remote.add(2, 3)">
&lt;burlap:call&gt;
  &lt;method&gt;add&lt;method&gt;
  &lt;int&gt;2&lt;/int&gt;
  &lt;int&gt;3&lt;/int&gt;
&lt;/burlap:call&gt;
</results>

<p>All arguments share references, i.e. the reference list
starts with the first argument and continues for all other arguments.
This lets two arguments share values.</p>

<example title="remote.eq(bean, bean)">
bean = new Bean("foo", 13);

System.out.println(remote.eq(bean, bean));
</example>
<results>
&lt;burlap:call&gt;
  &lt;method&gt;eq&lt;method&gt;
  &lt;map&gt;
    &lt;type&gt;Bean&lt;/type&gt;
    &lt;string&gt;foo&lt;/string&gt;
    &lt;int&gt;13&lt;/int&gt;
  &lt;/map&gt;
  &lt;ref&gt;0&lt;/ref&gt;
&lt;/burlap:call&gt;
</results>

<p>The number and type of arguments are fixed by the remote method.
Variable length arguments are forbidden.  In other words, implementations
may take advantage of the expected type to improve performance.</p>

</s2>

<s2 title="Headers">

<p>Headers are key, value pairs introduced by a &lt;header&gt; tag.</p>

<p>The value of the header can be any serialized object.  The reference
array is reset for each header.  So a header can't point to an object
in another header.

</p><p>For example, a request might include a transaction context in a
header.  The client could require that the server understand the
transaction context or fail.</p>

<results title="Call with Distributed Transaction Context">
&lt;burlap:call&gt;
  &lt;header&gt;transaction&lt;header&gt;
  &lt;remote&gt;http://hostname/xa;ejbid=01b8e19a77&lt;/remote&gt;

  &lt;method&gt;debit&lt;method&gt;
  &lt;int&gt;12300&lt;/int&gt;
&lt;/burlap:call&gt;
</results>

</s2>

<s2 title="Versioning">

<p>Burlap requests and responses have no explicit version id.  This
is deliberate.  There are several different changes that get
lumped into a 'version', but each needs different handling.  In each
case, appropriate mechanisms already exist without adding a version.</p>

<ol>
<li>If the Burlap meta-protocol itself changes, the new protocol will
use a new top-level tag &lt;burlap-2:call&gt;.  In other words the
top element, burlap:call, signifies version 1.0.
</li><li>If clients can take advantage of a new server capabilities, it
should use &lt;header&gt; version.
</li></ol>

<results title="Requiring Version 2 of a Protocol">
&lt;burlap-2:call&gt;
  &lt;method&gt;debit&lt;method&gt;
  &lt;int&gt;12300&lt;/int&gt;
&lt;/burlap-2:call&gt;
</results>

</s2>

</s1>

<s1 title="burlap:reply">

<p>Burlap calls return either a &lt;fault&gt; or an object.</p>

<s2 title="Value">
  
<p>A successful reply returns a single value and possibly
some header information.  </p>
  
<results>
&lt;burlap:reply&gt;
  &lt;int&gt;5&lt;/int&gt;
&lt;/burlap:reply&gt;
</results>

</s2>

<s2 title="Faults">
<p>Failed calls return a &lt;fault&gt;.

</p><p>Each fault has a number of informative fields, expressed like
&lt;map&gt; entries.  The defined fields are <var>code</var>, <var>message</var>,
and <var>detail</var>. <var>code</var> is one of a short list of strings
defined below.  <var>message</var> is a user-readable message.
<var>detail</var> is an object representing the exception.  In Java,
<var>detail</var> will be a serialized exception.</p>

<results title="Remote Call throws FileNotFoundException">
&lt;burlap:reply&gt;
  &lt;fault&gt;
    &lt;string&gt;code&lt;/string&gt;
    &lt;string&gt;ServiceException&lt;/string&gt;

    &lt;string&gt;message&lt;/string&gt;
    &lt;string&gt;File Not Found&lt;/string&gt;

    &lt;string&gt;detail&lt;/string&gt;
    &lt;map&gt;
      &lt;type&gt;java.io.FileNotFoundException&lt;/type&gt;
    &lt;/map&gt;
  &lt;/fault&gt;
&lt;/burlap:reply&gt;
</results>

<deftable>
<tr><td>ProtocolException</td><td>The Burlap request has some sort of
syntactic error.
</td></tr><tr><td>NoSuchObjectException</td><td>The requested object does not exist.
</td></tr><tr><td>NoSuchMethodException</td><td>The requested method does not exist.
</td></tr><tr><td>ServiceException</td><td>The called method threw an exception.
</td></tr></deftable>

</s2>

</s1>

<s1 title="Metadata (non-normative)">

<p>Metadata is handled by special method calls, methods beginning
with <var>_burlap_</var>.</p>

<p><var>_burlap_getAttribute(String&#160;key)</var> returns a string.
The following attributes are predefined by this spec:</p>

<deftable>
<tr><th>attribute</th><th>meaning
</th></tr><tr><td>home-class</td><td>Java class for the home interface.
</td></tr><tr><td>remote-class</td><td>Java class for the object interface.
</td></tr><tr><td>primary-key-class</td><td>Java class for the primary key.
</td></tr></deftable>

</s1>

<s1 title="Micro Burlap">

<p>A "Micro Burlap" implementation may omit support for the "double" type.
</p>

</s1>

<s1 title="Formal Definitions">

<s2 title="SML grammar">
<def>
<var>tag-list</var> ::= (<var>S</var> <var>tag</var>)* <var>S</var>

<var>tag</var>      ::= &lt;<var>name</var>&gt; <var>tag-list</var> &lt;/<var>name</var>&gt;
         ::= &lt;<var>name</var>&gt; <var>cdata</var> &lt;/<var>name</var>&gt;

<var>S</var>        ::= (' ' | '\t' | '\r' | '\n')*

<var>cdata</var>    ::= ([^&lt;&amp;] | &amp;# [0-9]+ ; | &amp;lt; | &amp;gt; | &amp;amp;)*
<var>name</var>     ::= [a-zA-Z:_] [a-zA-Z0-9.-_:]*
</def>

</s2>

<s2 title="burlap:call">

<def>	
&lt;!DOCTYPE burlap:call&gt;

&lt;!ENTITY % object "null | boolean | int | double | string | xml |
                 base64 | date | ref | map | list | remote"&gt;
		      
&lt;!ENTITY % header "(header, (%object;))*"&gt;

&lt;!ELEMENT burlap:call - - ((%header;), method, (%object;)*)&gt;

&lt;!ELEMENT header - - #CDATA&gt;

&lt;!ELEMENT method - - #CDATA&gt;

&lt;!ELEMENT null - - EMPTY&gt;
&lt;!ELEMENT boolean - - #CDATA&gt;
&lt;!ELEMENT int - - #CDATA&gt;
&lt;!ELEMENT double - - #CDATA&gt;
&lt;!ELEMENT string - - #CDATA&gt;
&lt;!ELEMENT xml - - #CDATA&gt;
&lt;!ELEMENT base64 - - #CDATA&gt;
&lt;!ELEMENT date - - #CDATA&gt;

&lt;!ELEMENT ref - - #CDATA&gt;
&lt;!ELEMENT map - - (type, ((%object;), (%object;))*)&gt;
&lt;!ELEMENT list - - (type, length, (%object;)*)&gt;
&lt;!ELEMENT type - - #CDATA&gt;

&lt;!ELEMENT remote - - (type, string)&gt;
</def>

</s2>

<s2 title="burlap:reply">

<def>	
&lt;!DOCTYPE burlap:reply&gt;

&lt;!ENTITY % object "(null | boolean | int | double | string | xml |
                 base64 | date | ref | map | list | remote)"&gt;
		      
&lt;!ENTITY % header "(header, (%object;))*"&gt;

&lt;!ELEMENT burlap:reply - - ((%header;), (%object; | fault))&gt;

&lt;!ELEMENT header - - #CDATA&gt;

&lt;!ELEMENT fault - - (string, (%object;))*&gt;

&lt;!ELEMENT null - - EMPTY&gt;
&lt;!ELEMENT boolean - - #CDATA&gt;
&lt;!ELEMENT int - - #CDATA&gt;
&lt;!ELEMENT double - - #CDATA&gt;
&lt;!ELEMENT string - - #CDATA&gt;
&lt;!ELEMENT xml - - #CDATA&gt;
&lt;!ELEMENT base64 - - #CDATA&gt;
&lt;!ELEMENT date - - #CDATA&gt;

&lt;!ELEMENT ref - - #CDATA&gt;
&lt;!ELEMENT map - - (type, ((%object;), (%object;))*)&gt;
&lt;!ELEMENT list - - (type, length, (%object;)*)&gt;
&lt;!ELEMENT type - - #CDATA&gt;

&lt;!ELEMENT remote - - (type, string)&gt;
</def>

</s2>
</s1>

<s1 title="Copyright and Licensing">

<p>© Copyright 2000-2002 Caucho Technology, Inc. All Rights Reserved.

</p><p>Any party may implement this protocol for any purpose without royalty
or license fee, provided that the implementation conforms to this
specification.   Caucho Technology reserves the right to create a
test suite, freely available without royalty or license fee, to
validate implementation conformance.  The limited permissions granted
herein are perpetual and may not be revoked by Caucho Technology or
its successors or assigns.

</p><p>This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it
or assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and these paragraphs are
included on all such copies and derivative works.

</p><p>This document and the information contained herein is provided on an
"AS IS" basis and CAUCHO TECHNOLOGY DISCLAIMS ALL WARRANTIES, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

</p></s1>

<s1 title="Changes">

<s2 title="Since draft v8">

<ul>
<li>Removed &lt;burlap:envelope&gt; and &lt;burlap:message&gt;.
</li></ul>

</s2>

<s2 title="Since draft v7">

<ul>
<li>Removed &lt;require&gt; header.
</li></ul>

</s2>

<s2 title="Since draft v6">

<ul>
<li>Added &lt;burlap:envelope&gt; and &lt;burlap:message&gt;
</li></ul>

</s2>

<s2 title="Since draft v5">

<ul>
<li>Added &lt;xml&gt;
</li><li>Clarified license.
</li><li>Allowed variable length arrays.
</li></ul>

</s2>

<s2 title="Since draft v4">

<ul>
<li>&lt;require&gt; must preceed &lt;header&gt; in headers.
</li><li>&lt;remote&gt; requires a &lt;type&gt; and &lt;string&gt; value.
</li></ul>

</s2>

<s2 title="Since draft v3">

<ul>
<li>Changed name of protocol from SML-RPC to "Burlap"
</li><li>Added and rewrote verbiage.
</li><li>base64 may have whitespace between triplets.
</li></ul>

</s2>

<s2 title="Since draft v2">

<ul>
<li>Added Standard XML entities ('&amp;lt;', '&amp;gt;', '&amp;amp;').
</li></ul>

</s2>

<s2 title="Since draft v1">

<ul>
<li>&lt;remote&gt; now takes a single string content, the url.
</li></ul>

</s2>
</s1>
  </body>
</document>
<document>
<header>
  <product>resin</product>
  <title>URL rewrite tags</title>
  <version>Resin 3.0</version>

  <description>
<p>Resin's &lt;rewrite-dispatch> tag allows configuration for
URL aliasing, rewriting, dispatching, and redirection.</p>

  </description>
</header>

<body>

<localtoc/>

<defun title="&lt;and&gt;">
<parents>when, unless</parents>

<p>
Contains one or more conditions and evaluates to true if all of the contained
conditions evaluate to true, false if any of the contained conditions does not
evaluate to true.
</p>

</defun>

<defun title="auth-type">
<parents>when, unless</parents>

<p>
Evaluates to true if the authorization mechanism used in the request is the given value.
The comparison is always case insensitive.
</p>

<deftable-childtags>
<tr><td>auth-type</td>
    <td>BASIC, CLIENT-CERT, DIGEST, FORM, or NONE</td>
    <td>required</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header containing "Authorization" as part of the response</td>
    <td>true</td></tr>
</deftable-childtags>
</defun>

<defun title="cookie">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of a cookie with a given <var/name/> matches a regular
expression <var/regexp/>, false if it does not or if the cookie does not exist.
</p>

<p>
The <var/Vary/> header of the response is updated to include "Cookie",
which indicates to the browser and any intervening proxy cache that the
response varies based on the submitted value of cookies.
</p>

<deftable-childtags>
<tr><td>cookie</td>
    <td>Name of the cookie</td>
    <td>required</td></tr>
<tr><td>regexp</td>
    <td>The regular expression to match</td>
    <td>optional</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header as part of the response</td>
    <td>true</td></tr>
<tr><td>case-insensitive</td>
    <td>If true, ignore case when doing the comparison</td>
    <td>false</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;dispatch>">
<parents>rewrite-dispatch</parents>

<p>If &lt;dispatch> matches the current URL, the rest of the items in the enclosing
rewrite-dispatch are not considered and the request passes immediately to
normal servlet evaluation.  &lt;dispatch> is often used to specify URLs
which should be handled normally before a more general pattern which
modifies the URL.</p>

<p>For example, the following pattern uses &lt;dispatch> to handle
images and *.php files normally, but forward's all other requests to
/index.php.</p>

<example title="Mediawiki dispatch in resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;dispatch regexp="\.(php|gif|css|jpg|png)"/>
   &lt;forward regexp="^" target="/index.php"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="dispatch grammar">
element dispatch {
  regexp
}
</def>
</defun>

<defun title="&lt;enabled>">
<p>
Set's the initial state of the rule, default is true.  In conjunction with
<a href="#name">name</a>, an initial enabled value of "false" is valuable for
rules which are to be turned on and turned off at runtime.
</p>
</defun>

<defun title="&lt;forbidden>">
<parents>rewrite-dispatch</parents>

<p>&lt;forbidden> sents a 403 forbidden message to the browser
for a matching URL.</p>

<example title="Forbidding a directory">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;forbidden regexp="^/protected"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<deftable-childtags>
<tr><td>enabled</td>
    <td>False to start with the rule initially disabled</td>
    <td>true</td></tr>
<tr><td>name</td>
    <td>A name to use for registering a JMX mbean with type=RewriteRule</td>
    <td>do not register an mbean</td></tr>
<tr><td>regexp</td>
    <td>A regexp that must match the URL</td>
    <td>required</td></tr>
<tr><td>secure</td>
    <td>True to only match requests that are using an SSL connection,
        false to only match requests that are not using an SSL connection</td>
    <td>do not consider SSL</td></tr>
<tr><td><a href="#when">when</a></td>
    <td>A condition which must evaluate to true</td>
    <td>optional</td></tr>
<tr><td><a href="#unless">unless</a></td>
    <td>A condition which must not evaluate to true</td>
    <td>optional</td></tr>
<tr><td>port</td>
    <td>A port number that must match the server port number for the connection</td>
    <td>do not consider port</td></tr>
</deftable-childtags>

<def title="forbidden grammar">
element forward {
  regexp
}
</def>
</defun>

<defun title="&lt;forward>">
<parents>rewrite-dispatch</parents>

<p>&lt;forward> rewrites the current URL, forwarding it to the target
using the servlet forward() call.  Because &lt;forward> is internal,
it will have better performance than a &lt;redirect> when the target
URL is on the same server, the browser will not know that the
underlying resource has moved.</p>

<example title="Forwarding to a new URL">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;forward regexp="^/old" target="/new"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="forward grammar">
element forward {
  regexp &amp; target
}
</def>
</defun>

<defun title="header">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of a header with a given <var/name/> matches a regular
expression <var/regexp/>, false if it does not or if the header does not exist.
</p>

<p>
The <var/Vary/> header of the response is updated  to include the header name
which indicates to the browser and any intervening proxy cache that the
response varies based on the submitted value of the header.
</p>

<deftable-childtags>
<tr><td>header</td>
    <td>Name of the header</td>
    <td>required</td></tr>
<tr><td>regexp</td>
    <td>The regular expression to match</td>
    <td>optional</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header as part of the response with the header name</td>
    <td>true</td></tr>
<tr><td>case-insensitive</td>
    <td>If true, ignore case when doing the comparison</td>
    <td>false</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;gone>">
<parents>rewrite-dispatch</parents>

<p>&lt;gone> sents a 410 gone response to the browser
for a matching URL.</p>

<example title="Hiding a directory">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;gone regexp="^/protected"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="gone grammar">
element gone {
  regexp
}
</def>
</defun>

<defun title="&lt;load-balance>">
<parents>rewrite-dispatch</parents>

<p>&lt;load-balance> forwards requests from a <g>web-tier</g> server
to a cluster of <g>app-tier</g> servers for
<a href="resin-load-balance.xtp">load-balancing</a>.  Load balancing
provides scalability by splitting load among many application servers
and increases reliability by avoiding servers which are upgrading or
restarting.</p>

<p>In the following example, the web-tier load-balances all traffic
to a cluster of backend application servers.  Because the web-tier
has a <a href="proxy-cache.xtp">proxy cache</a>, static pages
and cached pages will be served directory from the web-tier.</p>

<p>&lt;load-balance> requires Resin Professional.</p>

<example title="Load balancing to an app-tier">
&lt;resin xmlns="http://caucho.com/ns/resin">

  &lt;cluster id="web-tier">
    &lt;server id="web-a" address="192.168.2.1">
      &lt;http port="80"/>
    &lt;/server>

    &lt;cache/>

    &lt;host id="">
      &lt;web-app id="/">

        &lt;rewrite-dispatch>
          &lt;load-balance regexp="" cluster="app-tier"/>
        &lt;/rewrite-dispatch>

      &lt;/web-app>
    &lt;/host>

  &lt;cluster id="app-tier">
    &lt;server id="app-a" address="192.168.3.1">
    &lt;server id="app-b" address="192.168.3.2">
    ...
  &lt;/cluster>
&lt;/resin>
</example>

<def title="load-balance grammar">
element load-balance {
  regexp &amp; cluster
}
</def>

</defun>

<defun title="locale">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of the Locale matches a regular
expression, false if it does not.   The comparison is always case
insensitive.
</p>

<p>
The Locale is a normalization of the value of the Accept-Language header.
For example "fr" remains "fr" and "FR-CA" becomes "fr_CA".
If the request does not include the Accept-Language header then the Locale is
the default Locale for the server.
</p>

<example>
&lt;web-app xmlns="http://caucho.com/ns/resin"
         xmlns:resin="http://caucho.com/ns/resin/core"&gt;

  &lt;rewrite-dispatch&gt;
    &lt;forward regexp='^/' target='/fr/'&gt;
      &lt;when locale="^fr"/&gt;
    &lt;/forward&gt;

    &lt;forward regexp='^/' target='/en/'/&gt;
  &lt;/rewrite-dispatch&gt;
&lt;/web-app&gt;
</example>

<deftable-childtags>
<tr><td>locale</td>
    <td>Regular expression to match</td>
    <td>required</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header containing "Accept-Language" as part of the response</td>
    <td>true</td></tr>
</deftable-childtags>

</defun>

<defun title="local-port">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of the request's local port is the specified
value, false if it does not.  The local port is the port that Resin has bound
to and has used to receive the request.
</p>

<deftable-childtags>
<tr><td>local-port</td>
    <td>The local port to match.</td>
    <td>required</td></tr>
</deftable-childtags>

</defun>

<defun title="method">
<parents>when, unless</parents>

<p>
Evaluates to true if the http method used in the request is the given value.
The comparison is always case insensitive.  Common methods include HEAD, GET,
POST, DELETE, OPTIONS, PUT, and TRACE, although a method by any name may be
used by a client.
</p>

<deftable-childtags>
<tr><td>method</td>
    <td>The method to match.</td>
    <td>required</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;moved-permanently>">
<parents>rewrite-dispatch</parents>

<p>&lt;moved-permanently> sends a HTTP 301 moved permanently
response to the browser,
indicating that the resource has moved.</p>

<example title="Forwarding to a new virtual host">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;rewrite-dispatch>
    &lt;moved-permanently regexp="^/(foo)" target="http://$1.bar.com"/>
  &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="moved-permanently grammar">
element moved-permanently {
  regexp &amp; target &amp; secure? &amp; port?
}
</def>

</defun>

<defun title="&lt;name>">
<p>
A rule can be given a <i>name</i>, which causes a JMX mbean to be registered.
The mbean has a name like "resin:Host=default,WebApp=/,name=Foo,type=RewriteRule"
and an interface of <a href="javadoc|com.caucho.management.server.RewriteRuleMXBean|"/>.
It provides the <code>start()</code> and <code>stop()</code> operations, and
the <code>enabled</code> boolean property.
</p>
</defun>

<defun title="&lt;not&gt;">
<parents>when, unless</parents>

<p>
Contains one or more conditions and evaluates to true only if none of the
contained conditions evaluate to true, false if any of the contained conditions
evaluate to true.
</p>

</defun>

<defun title="&lt;or&gt;">
<parents>when, unless</parents>

<p>
Contains one or more conditions and evaluates to true if any of the contained
conditions evaluate to true, false only if all of the contained conditions
evaluate to false.
</p>

</defun>

<defun title="&lt;not-found>">
<parents>rewrite-dispatch</parents>

<p>&lt;not-found> sents a 404 not found to the browser
for a matching URL.</p>

<example title="Hiding a directory">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;not-found regexp="^/protected"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="not-found grammar">
element not-found {
  regexp
}
</def>
</defun>

<defun title="query-param">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of a query parameter with a given <var/name/> matches a regular
expression <var/regexp/>, false if it does not or if the parameter does not exist.
</p>

<p>
Form parameters submitted in the body of a POST are not available for the comparison performed by query-param.
</p>

<deftable-childtags>
<tr><td>query-param</td>
    <td>Name of the parameter</td>
    <td>required</td></tr>
<tr><td>regexp</td>
    <td>The regular expression to match</td>
    <td>optional</td></tr>
<tr><td>case-insensitive</td>
    <td>If true, ignore case when doing the comparison</td>
    <td>false</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;real-path>">
<parents>rewrite-real-path</parents>

<p>&lt;real-path> maps a URL to a filesystem path inside a
&lt;rewrite-real-path tag.</p>

<p>The source path is a URL, the target path is a real filesystem path.</p>

<example title="/images located outside of /var/www">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;rewrite-real-path>
    &lt;real-path regexp="^/images" real-path="/usr/local/share/images"/>
  &lt;/rewrite-real-path>
</example>

<def title="real-path grammar">
element real-path {
  regexp &amp; target
}
</def>

</defun>

<defun title="&lt;redirect>">
<parents>rewrite-dispatch</parents>

<p>&lt;redirect> sends a HTTP 302 redirect response to the browser,
indicating that the resource has moved.</p>

<example title="Forwarding to a new virtual host">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;rewrite-dispatch>
    &lt;redirect regexp="^/(foo)" target="http://$1.bar.com"/>
  &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<def title="redirect grammar">
element forward {
  regexp &amp; target
}
</def>
</defun>

<defun title="remote-user">
<parents>when, unless</parents>

<p>
Evaluates to true if the user is authenticated and has the specified name.
</p>

<deftable-childtags>
<tr><td>remote-user</td>
    <td>A user name.</td>
    <td>required</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header containing "Authorization" as part of the response</td>
    <td>true</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;rewrite>">
<parents>rewrite-dispatch</parents>

<p>&lt;rewrite> rewrites the current URL, continuing processing of
the &lt;rewrite-dispatch> tags.  &lt;rewrite> can be used as an
intermediate rewriting stage for more complicated patterns.</p>

<def title="rewrite grammar">
element rewrite {
  regexp &amp; replacement
}
</def>
</defun>

<defun title="&lt;rewrite-real-path>">
<parents>web-app</parents>

<p>&lt;rewrite-real-path> configures an alias for the getRealPath() call, i.e. an enhancement
to the &lt;path-mapping> tag.</p>

<p>The source path is a URL, the target path is a real filesystem path.</p>

<example title="/images located outside of /var/www">
&lt;web-app xmlns="http://caucho.com/ns/resin">

  &lt;rewrite-real-path>
    &lt;real-path regexp="^/images" real-path="/usr/local/share/images"/>
  &lt;/rewrite-real-path>
</example>

<def title="rewrite-real-path grammar">
element rewrite-real-path {
  (real-path { regexp &amp; target }
  | rewrite { regexp &amp; replacement })*
}
</def>

</defun>


<defun title="&lt;rewrite-dispatch>">
<parents>web-app, host</parents>

<p>&lt;rewrite-dispatch> evaluates the child tags in order.  The first
matching tag dispatches the request.  If no children match, the request
uses the standard servlet handling.</p>

<p>The child tags rewrite and
dispatch based on regexp patterns.</p>

<example title="Mediawiki dispatch in resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">

 &lt;rewrite-dispatch>
   &lt;dispatch regexp="\.(php|gif|css|jpg|png)"/>
   &lt;forward regexp="^" target="/index.php"/>
 &lt;/rewrite-dispatch>

&lt;/web-app>
</example>

<deftable-childtags>
<tr><td>case-insensitive</td>
    <td>If true, ignore case when matching URL's</td>
    <td>The value of
        <a href="env-tags.xtp#case-insensitive">case-insensitive</a>
        in the enclosing enviroment</td></tr>
</deftable-childtags>

<def title="rewrite-dispatch grammar">
element rewrite-dispatch {
  (dispatch { regexp }
  | forward { regexp &amp; target }
  | forbidden { regexp }
  | gone { regexp }
  | moved-permanently { regexp &amp; target }
  | not-found { regexp }
  | redirect { regexp &amp; target }
  | rewrite { regexp &amp; replacement })*
}
</def>

</defun>

<defun title="secure">
<parents>dispatch, forward, forbidden, gone, moved-permanently, not-found, redirect, rewrite</parents>

<p>
&lt;secure> specifies a condition for the ssl status of the request. If <var/secure/> is true,
then the request must be using ssl for the rule to match.  If <var/secure/> is
false, then the request must not be using ssl for the rule to match.  If
<var/secure/> is not specified, the ssl status of the request is not considered when
testing if the rule matches.
</p>

<example title="secure example">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;rewrite-dispatch&gt;
    &lt;redirect regexp='^/foo' target='/insecure' secure='false'/&gt;
    &lt;redirect regexp='^/foo' target='/secure' secure='true'/&gt;

    &lt;redirect regexp='^/bar' target='/public'/&gt;
  &lt;/rewrite-dispatch&gt;
&lt;/web-app&gt;
</example>

<results>
http://localhost:8080/foo/index.html
  --> redirect to /insecure/index.html

https://localhost:8080/foo/index.html
  --> redirect to /secure/index.html

http://localhost:8080/bar/index.html
  --> redirect to /public/index.html

https://localhost:8080/bar/index.html
  --> redirect to /public/index.html
</results>
</defun>

<defun title="server-name">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of the request's server name matches the specified
regexp, false if it does not.  The comparison is always case insensitive.
The server name is the name that the client has used to connect to the server 
and may not be the name of the actual server that is hosting Resin.
</p>

<deftable-childtags>
<tr><td>server-name</td>
    <td>A regular expression to match.</td>
    <td>required</td></tr>
</deftable-childtags>

</defun>

<defun title="server-port">
<parents>when, unless</parents>

<p>
Evaluates to true if the value of the request's server port is the specified
value, false if it does not.  The server port is the port that the client has used to connect to the server 
and may not be the actual port that Resin is bound to.
</p>

<deftable-childtags>
<tr><td>server-port</td>
    <td>The server port to match.</td>
    <td>required</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;unless&gt;">
<parents>dispatch, forward, forbidden, gone, moved-permanently, not-found, redirect, rewrite</parents>

<p>
Contains a condition that further refines the match of the enclosing tag beyond
the information provided by the url.  If the condition does not evaluate to
true, then the enclosing tag is applied.
</p>

</defun>

<defun title="user-in-role">
<parents>when, unless</parents>

<p>
Evaluates to true if the user is authenticated and in the specified role.
The special role of '*' means any role.
</p>

<deftable-childtags>
<tr><td>user-in-role</td>
    <td>A role name.</td>
    <td>required</td></tr>
<tr><td>send-vary</td>
    <td>Send a vary header containing "Authorization" as part of the response</td>
    <td>true</td></tr>
</deftable-childtags>

</defun>

<defun title="&lt;when&gt;">
<parents>dispatch, forward, forbidden, gone, moved-permanently, not-found, redirect, rewrite</parents>

<p>
Contains a condition that further refines the match of the enclosing tag beyond
the information provided by the url.  If the condition evaluates to true, then
the enclosing tag is applied.
</p>

</defun>

<s1 title="Logging and Debugging">
<p>
Logging for the name <code>com.caucho.server.webapp.RewriteInvocation</code>
at the "finer" level reveals successful matches.  At the "finest" level both
successful and unsuccessful matches are logged.
</p>

<example title="Logging example">
&lt;logger name="com.caucho.server.webapp.RewriteInvocation" level="finest"/&gt;
</example>

<results>
[1998/05/08 02:51:31.000] forward ^/foo: '/baz/test.jsp'  no match
[1998/05/08 02:51:31.000] forward ^/bar: '/baz/test.jsp'  no match
[1998/05/08 02:51:31.000] forward ^/baz: '/baz/test.jsp'  -->  '/hogwarts/test.jsp'
</results>

</s1>

</body>

</document>

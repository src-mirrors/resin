<document>
<header>
  <product>resin-ee</product>
  <title>EJB Bean Annotation</title>
  <version>Resin 3.0</version>

  <description>
  <p>Session beans may be configured using dependency injection annotation.</p>

  </description>
</header>

<body>

<s1>
<note>These annotations will likely change package names to something
other than javax.ejb as J2EE 1.5 drafts progress.</note>
</s1>

<summary objsummary="localtoc"/>

<s1 title="See Also">

<ul>
<li>See <a href="tutorial/session/index.xtp">session tutorial
</a> for an example.
</li></ul>

</s1>

<s1 title="Bean Annotations">

<s2 title="@Entity" type="defun">

<p>Marks the class as an entity bean.  Each entity bean corresponds to
a database row. Entity bean persistence is configured with
the <a href="cmp-table.xtp">CMP annotations</a>.

</p><p>In EJB 3.0, the application uses entity bean instances directly.  Unlike
EJB 2.1, there is no pooling, local stub, or home interface for an entity.</p>

<deftable-childtags>
<tr><td>name</td><td>The bean's name</td><td>The bean's class name
</td></tr><tr><td>entityType</td><td>container-managed (CMP) or bean-managed (BMP)</td><td>CMP
</td></tr><tr><td>access</td><td>field-based (FIELD) or method-getter based (PROPERTY)</td><td>PROPERTY
</td></tr><tr><td>version</td><td>EJB version</td><td>3
</td></tr></deftable-childtags>

<ul>
<li>See the <a href="tutorial/cmp-basic/index.xtp">basic tutorial</a>
for PROPERTY-based entity beans.
</li><li>See the <a href="tutorial/cmp-basic-field/index.xtp">basic field
tutorial</a> for FIELD-based entity beans.
</li></ul>

<def>
@Target(TYPE)
@Retention(RUNTIME)
public @interface Entity {
  String name() default "";

  EntityType entityType() default EntityType.CMP;
  AccessType access() default AccessType.PROPERTY;
  int version() default 3;
}
</def>

</s2>

<s2 title="@TransactionAttribute" type="defun">

<p>Defines the transaction boundary for session business methods.  The
default value is REQUIRED.  If 
@TransactionAttribute annotates the class, it defines the default
value. </p>

<deftable>
<tr><th>TransactionAttribute</th><th>meaning
</th></tr><tr><td>REQUIRED</td><td>Start a new transaction if necessary
</td></tr><tr><td>SUPPORTS</td><td>Don't start a new transaction, but use one if it
exists
</td></tr><tr><td>MANDATORY</td><td>Require the caller to have started a transaction
</td></tr><tr><td>NEVER</td><td>Forbid the caller to have started a transaction
</td></tr><tr><td>REQUIRESNEW</td><td>Always start a new transaction, suspending the
old one
</td></tr><tr><td>NOTSUPPORTED</td><td>Suspend any active transaction
</td></tr></deftable>

<ul>
<li>SUPPORTS is typically used for read-only methods
</li><li>REQUIRED is typically used for updating (read/write) methods
</li></ul>

<def>
@Target({TYPE,METHOD})
@Retention(RUNTIME)
public @interface TransactionAttribute {
  TransactionAttributeType value() default REQUIRED;
}
</def>

</s2>

</s1>

<s1 title="Dependency Injection Annotations">

<s2 title="@EJB" type="defun">

<p>Configures an EJB values for a field or method.</p>

<p>@EJB is essentially a @Resource where it's known that the
result is an EJB interface.</p>

<deftable-childtags>
<tr><td>jndiName</td><td>The jndi name of the resource</td><td>The field name
</td></tr></deftable-childtags>

<p>In the following exaple, Resin will call <code>setFoo</code>
method with the bean in "java:comp/env/ejb/foo" before the
session is started.</p>

<example>
@EJB
void setFoo(example.Test test)
{
  _test = test;
}
</example>

<def title="javax.ejb.EJB">
@Target({TYPE, METHOD, FIELD, PARAMETER})
@Retention(RUNTIME)
public @interface EJB {
  String name() default "";
  String businessInterface() default "";
  String jndiName() default "";
}
</def>

</s2>

<s2 title="@Inject" type="defun">

<p>Configures a JNDI values for a field or method.</p>

<p>Inject relies heavily on defaults from the field or method name
and type.  If more information is required, use @Resource, @EJB, or @EJBHome.
</p>

<deftable-childtags>
<tr><td>jndiName</td><td>The jndi name of the resource</td><td>The field name
</td></tr></deftable-childtags>

<p>In the following exaple, Resin will call <code>setDataSource</code>
method with the data source in "java:comp/env/jdbc/test" before the
session is started.</p>

<example>
@Inject(jndi-name="java:comp/env/jdbc/test")
void setDataSource(javax.sql.DataSource dataSource)
{
  _dataSource = dataSource;
}
</example>

<def title="javax.ejb.Inject">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Inject {
  String jndiName() default "";
}
</def>

</s2>

<s2 title="@Resource" type="defun">

<p>Configures a JNDI values for a field or method.  @Resource
is essentially the same as @Inject but provides more configurable
options.  @Resource can also be used at the Class level to
declare a dependency in cases where the session bean loads the
JNDI value by itself.</p>

<deftable-childtags>
<tr><td>name</td><td>The name of the resource</td><td>The field name
</td></tr><tr><td>resourceType</td><td>The resource typed</td><td>The field type
</td></tr><tr><td>authenticationType</td><td>Whether the container or the application is responsible for authentication</td><td>CONTAINER
</td></tr><tr><td>shareable</td><td>True if the bean follows JCA shareability requirements.</td><td>true
</td></tr><tr><td>jndiName</td><td>The jndi name of the resource</td><td>The field name
</td></tr></deftable-childtags>

<p>In the following exaple, Resin will call <code>setDataSource</code>
method with the data source in "java:comp/env/jdbc/test" before the
session is started.  The "java:comp/env/jdbc" full name
is inferred from the DataSource type.</p>

<deftable title="default JNDI names">
<tr><td>javax.sql.DataSource</td><td>java:comp/env/jdbc
</td></tr><tr><td>javax.mail.*</td><td>java:comp/env/mail
</td></tr><tr><td>javax.ejb.EntityManager</td><td>java:comp/EntityManager
</td></tr><tr><td>javax.transaction.UserTransaction</td><td>java:comp/UserTransaction
</td></tr><tr><td>javax.ejb.EJBHome</td><td>java:comp/env/ejb
</td></tr><tr><td>javax.jms.*</td><td>java:comp/env/jms
</td></tr></deftable>

<example>
@Resource(name="test")
void setDataSource(javax.sql.DataSource dataSource)
{
  _dataSource = dataSource;
}
</example>

<def title="javax.ejb.Resource">
@Target({TYPE, METHOD, FIELD, PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
public @interface Resource {
  String name() default "";
  String resourceType() default "";
  AuthenticationType authenticationType() CONTAINER;
  boolean shareable() default true;
  String jndiName() default "";
}
</def>

</s2>

</s1>

</body>
</document>

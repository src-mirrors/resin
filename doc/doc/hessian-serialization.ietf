<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="full3978" docName="hessian.txt">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>

  <front>
    <title>Hessian 2.0 Serialization Protocol</title>
    <author initials="S." surname="Ferguson" fullname="Scott Ferguson">
      <organization>Caucho Technology Inc.</organization>
      <address>
        <postal>
          <street>P.O. Box 9001</street>
          <city>La Jolla</city>
          <region>CA</region>
          <code>92038</code>
          <country>USA</country>
        </postal>
        <email>ferg@caucho.com</email>
      </address>
    </author>
    <author initials="E." surname="Ong" fullname="Emil Ong">
      <organization>Caucho Technology Inc.</organization>
      <address>
        <postal>
          <street>P.O. Box 9001</street>
          <city>La Jolla</city>
          <region>CA</region>
          <code>92038</code>
          <country>USA</country>
        </postal>
        <email>emil@caucho.com</email>
      </address>
    </author>
    <date month="August" year="2007" />
  </front>
  
  <middle>
    <section title="Design Goals">
      <t>
        Unlike older binary protocols, Hessian is both self-describing,
        compact, and portable across languages.  The wire protocol for web
        services should be invisible to application writers, it should not 
        require external schema or IDL.
      </t>
      <t>
      The Hessian protocol has the following design goals:
      </t>
      <list style="symbols">
        <t>
          It must not require external IDL or schema definitions, i.e. the 
          protocol should be invisible to application code.
        </t>
        <t>
          It must have sufficient power to serialize Java, including circular 
          references.
        </t>
        <t>
          It must be language-independent.  In particular, it must allow 
          non-Java clients to use web services.
        </t>
        <t>
          It must be simple so it can be effectively tested and implemented.
        </t>
        <t>It must be as fast as possible.</t>
        <t>It must be as compact as possible.</t>
        <t>It must support unicode strings.</t>
        <t>
          It must support 8-bit binary data (i.e. without encoding or using 
          attachments.)
        </t>
        <t>It must allow web services to deployed as a Servlet.</t>
        <t>It must have sufficient power to support EJB.</t>
        <t>
          It must support encryption, compression, signature, and
          transaction context envelopes.
        </t>
        <t>
          Hessian 2.0 must be backwards compatible with Hessian 1.0.
          Hessian 2.0 parsers must be read Hessian 1.0 messages.
        </t>
      </list>
    </section>

    <section title="Hessian Grammar">
      <figure anchor="serialization_grammar">
        <preamble>Serialization Grammar</preamble>
        <artwork>
           # starting production
top        ::= object

           # 8-bit binary data split into 64k chunks
binary     ::= 'b' b1 b0 &lt;binary-data> binary # non-final chunk
           ::= 'B' b1 b0 &lt;binary-data>        # final chunk
           ::= [x20-x2f] &lt;binary-data>        # binary data of 
                                              #  length 0-15

           # boolean true/false
boolean    ::= 'T'
           ::= 'F'

           # time in UTC encoded as 64-bit long milliseconds since 
           #  epoch
date       ::= 'd' b7 b6 b5 b4 b3 b2 b1 b0

           # 64-bit IEEE double
double     ::= 'D' b7 b6 b5 b4 b3 b2 b1 b0
           ::= x67                   # 0.0
           ::= x68                   # 1.0
           ::= x69 b0                # byte cast to double 
                                     #  (-128.0 to 127.0)
           ::= x6a b1 b0             # short cast to double
           ::= x6b b3 b2 b1 b0       # 32-bit float cast to double

           # 32-bit signed integer
int        ::= 'I' b3 b2 b1 b0
           ::= [x80-xbf]             # -x10 to x3f
           ::= [xc0-xcf] b0          # -x800 to x7ff
           ::= [xd0-xd7] b1 b0       # -x40000 to x3ffff

           # list/vector length 
length     ::= 'l' b3 b2 b1 b0
           ::= x6e int

           # list/vector
list       ::= 'V' type? length? object* 'z'
           ::= 'v' int int object*   # type-ref, length

           # 64-bit signed long integer
long       ::= 'L' b7 b6 b5 b4 b3 b2 b1 b0
           ::= [xd8-xef]             # -x08 to x0f
           ::= [xf0-xff] b0          # -x800 to x7ff
           ::= [x38-x3f] b1 b0       # -x40000 to x3ffff
           ::= x77 b3 b2 b1 b0       # 32-bit integer cast to long

           # map/object
map        ::= 'M' type? (object object)* 'z'  # key, value map pairs
           ::= 'o' int object*                 # Object instance - 
                                               #  type-ref

           # null value
null       ::= 'N'

           # main production for object serialization
object     ::= null
           ::= binary
           ::= boolean
           ::= date
           ::= double
           ::= int
           ::= list
           ::= long
           ::= map
           ::= object-def object
           ::= remote
           ::= ref
           ::= string
           ::= xml

           # definition for an object (compact map)
object-def ::= 'O' type int string*

           # Object reference (e.g. circular trees and graphs)
ref        ::= 'R' b3 b2 b1 b0    # reference to nth map/list in 
                                  #  stream
           ::= x4a b0             # reference to 1-255th map/list
           ::= x4b b1 b0          # reference to 1-65535th map/list

           # remote object using URL as locator
remote     ::= 'r' type? string

           # UTF-8 encoded character string split into 64k chunks
string     ::= 's' b1 b0 &lt;string-data> string  # non-final chunk
           ::= 'S' b1 b0 &lt;string-data>         # string of length 
                                               #  0-65535
           ::= [x00-x1f] &lt;string-data>         # string of length 
                                               #  0-31

           # map/list types for OO languages
type       ::= 't' b1 b0 &lt;type-string>         # type name
           ::= x75 int                         # type reference

           # UTF-8 encoded XML data
xml        ::= 'x' b1 b0 &lt;xml-data> xml
           ::= 'X' b1 b0 &lt;xml-data>
        </artwork>
      </figure>
    </section>

    <section title="Serialization">
      <t>Hessian's object serialization has 9 primitive types:</t>
      <list style="numbers">
        <t><xref target="#boolean">boolean</xref></t>
        <t>32-bit <xref target="#int">int</xref></t>
        <t>64-bit <xref target="#long">long</xref></t>
        <t>64-bit <xref target="#double">double</xref></t>
        <t>64-bit <xref target="#date">date</xref></t>
        <t>UTF8-encoded <xref target="#string">string</xref></t>
        <t>UTF8-encoded <xref target="#xml">xml</xref></t>
        <t>raw <xref target="#binary">binary</xref> data</t>
        <t><xref target="#remote">remote</xref> objects</t>
      </list>

      <t>It has 2 combining constructs:</t>
      <list style="numbers">
        <t><xref target="#list">list</xref> for lists and arrays</t>
        <t><xref target="#map">map</xref> for objects and hash tables.</t>
      </list>

      <t>Finally, it has 2 special contructs:</t>
      <list style="numbers">
        <t><xref target="#null">null</xref> for null values</t>
        <t>
          <xref target="#ref">ref</xref> for shared and circular object 
          references.
        </t>
      </list>

      <t>Hessian 2.0 has 3 reference maps:</t>
      <list style="numbers">
        <t>An object/list reference map.</t>
        <t>A type (class) reference map.</t>
        <t>An object definition reference map.</t>
      </list>

      <section title="binary data" anchor="#binary">
        <figure anchor="binary_grammar">
          <preamble>Binary Grammar</preamble>
          <artwork>
binary ::= b b1 b0 &lt;binary-data> binary
       ::= B b1 b0 &lt;binary-data>
       ::= [x20-x2f] &lt;binary-data>
          </artwork>
        </figure>

        <t>
          Binary data is encoded in chunks.  'B' represents the final chunk
          and 'b' represents any non-final chunk.  Each chunk has a 16-bit
          length value.
        </t>

        <section title="Compact: short binary">
          <t>
            Binary data with length less than 15 may be encoded with a single
            length byte [x20-x2f].
          </t>
        </section>

        <section title="Binary Examples">
          <figure anchor="binary_examples">
            <artwork>
x20               # zero-length binary data

x23 x01 x02 x03   # 3 byte data

B x10 x00 ....    # 4k final chunk of data

b x04 x00 ....    # 1k non-final chunk of data
            </artwork>
          </figure>
        </section>
      </section>

      <section title="boolean" anchor="#boolean">
        <figure anchor="boolean_grammar">
          <preamble>Boolean Grammar</preamble>
          <artwork>
boolean ::= T
        ::= F
          </artwork>
        </figure>

        <t>The byte 'F' represents false and the byte 'T' represents true.</t>

        <section title="Boolean Examples">
          <figure anchor="boolean_examples">
            <artwork>
T   # true
F   # false
            </artwork>
          </figure>
        </section>
      </section>

      <section title="date" anchor="#date">
        <figure anchor="date_grammar">
          <preamble>Date Grammar</preamble>
          <artwork>
date ::= d b7 b6 b5 b4 b3 b2 b1 b0
          </artwork>
        </figure>

        <t>
          Date represented by a 64-bit long of milliseconds since the epoch, 
          GMT.
        </t>

        <section title="Date Examples">
          <figure anchor="date_examples">
            <artwork>
d x00 x00 x00 xd0 x4b x92 x84 xb8   # 2:51:31 May 8, 1998 GMT
            </artwork>
          </figure>
        </section>
      </section>

      <section title="double" anchor="#double">
        <figure anchor="double_grammar">
          <preamble>Double Grammar</preamble>
          <artwork>
double ::= D b7 b6 b5 b4 b3 b2 b1 b0
       ::= x67
       ::= x68
       ::= x69 b0
       ::= x6a b1 b0
       ::= x6b b3 b2 b1 b0
          </artwork>
        </figure>

        <t>A 64-bit IEEE floating pointer number.</t>

        <section title="Compact: double zero">
          <t>The double 0.0 can be represented by the byte x67</t>
        </section>

        <section title="Compact: double one">
          <t>The double 1.0 can be represented by the byte x68</t>
        </section>

        <section title="Compact: double byte">
          <t>
            Doubles between -128.0 and 127.0 with no fractional component
            can be represented in two bytes by casting the byte value to a 
            double.
          </t>
        </section>

        <section title="Compact: double short">
          <t>
            Doubles between -32768.0 and 32767.0 with no fractional component
            can be represented in three bytes by casting the short value to a 
            double.
          </t>
        </section>

        <section title="Compact: double float">
          <t>
            Doubles which are equivalent to their 32-bit float representation
            can be represented as the 4-byte float and then cast to double.
          </t>
        </section>

        <section title="Double Examples">
          <figure anchor="double_examples">
            <artwork>
x67          # 0.0
x68          # 1.0

x69 x00      # 0.0
x69 x80      # -128.0
x69 xff      # 127.0

x70 x00 x00  # 0.0
x70 x80 x00  # -32768.0
x70 xff xff  # 32767.0

D x40 x28 x80 x00 x00 x00 x00 x00  # 12.25
            </artwork>
          </figure>
        </section>
      </section>

      <section title="int" anchor="#int">
        <figure anchor="integer_grammar">
          <preamble>Integer Grammar</preamble>
          <artwork>
int ::= 'I' b3 b2 b1 b0
    ::= [x80-xbf]
    ::= [xc0-xcf] b0
    ::= [xd0-xd7] b1 b0
          </artwork>
        </figure>

        <t>
          A 32-bit signed integer.  An integer is represented by the
          byte 'I' followed by the 4-bytes of the integer in big-endian order.
        </t>

        <section title="Compact: single octet integers">
          <t>
            Integers between -16 and 47 can be encoded by a single byte in the
            range x80 to xbf. The value of the integer is (code - x90).
          </t>
        </section>

        <section title="Compact: two octet integers (byte)">
          <t>
            Integers between -2048 and 2047 can be encoded in two bytes with
            the leading byte in the range xc0 to xcf. The value of the integer 
            is (256 * (code - xc8) + b0).
          </t>
        </section>

        <section title="Compact: three octet integers (short)">
          <t>
            Integers between -262144 and 262143 can be encoded in three bytes 
            with the leading byte in the range xd0 to xd7.  The value of the 
            integer is (65536 * (code - xd4) + 256 * b1 + b0).
          </t>
        </section>

        <section title="Integer Examples">
          <figure anchor="integer_examples">
            <artwork>
x90                # 0
x80                # -16
xbf                # 47

xc8 x00            # 0
xc0 x00            # -2048
xc7 x00            # -256
xcf xff            # 2047

xd4 x00 x00        # 0
xd0 x00 x00        # -262144
xd7 xff xff        # 262143

I x00 x00 x00 x00  # 0
I x00 x00 x01 x2c  # 300
            </artwork>
          </figure>
        </section>
      </section>

      <section title="list" anchor="#list">
        <figure anchor="list_grammar">
          <preamble>List Grammar</preamble>
          <artwork>
list ::= V type? length? object* z
     ::= v int int object*
          </artwork>
        </figure>

        <t>
          An ordered list, like an array.  All lists have a type string, a 
          length, a list of objects, and a trailing 'z'.  The type string may 
          be an arbitrary UTF-8 string understood by the service (often a Java 
          class name, but this isn't required.) The length may be -1 to 
          indicate that the list is variable length.
        </t>

        <t>
          Each list item is added to the reference list to handle shared and 
          circular elements.  See the ref element.
        </t>

        <t>
          Any parser expecting a list must also accept a null or a shared ref.
        </t>

        <t>
          The valid values of type are not specified in this document and 
          may depend on the specific application.  For example, a Java EJB 
          server which exposes an Hessian interface can use the type 
          information to instantiate the specific array type.  On the other 
          hand, a Perl server would likely ignore the contents of type
          entirely and create a generic array.
        </t>

        <section title="Compact: repeated list">
          <t>
            Hessian 2.0 allows a compact form of the list for successive lists 
            of the same type where the length is known beforehand.  The type 
            and length are encoded by integers, where the type is a reference 
            to an earlier specified type.
          </t>
        </section>

        <section title="List examples">
          <figure anchor="list_example_1">
            <preamble>Serialization of a Java int[] = {0, 1}</preamble>
            <artwork>
V
  t x00 x04 [int     # encoding of int[] type
  x6e x02            # length = 2
  x90                # integer 0
  x91                # integer 1
  z
            </artwork>
          </figure>

          <figure anchor="list_example_2">
            <preamble>Anonymous variable-length list = {0, "foobar"}</preamble>
            <artwork>
V
  t x00 x04 [int     # encoding of int[] type
  x6e x02            # length = 2
  x90                # integer 0
  x91                # integer 1
  z
            </artwork>
          </figure>

          <figure anchor="list_example_3">
            <preamble>Repeated list type</preamble>
            <artwork>
V
  t x00 x04 [int   # type for int[] (save as type #1)
  x63 x02          # length 2
  x90              # integer 0
  x91              # integer 1
  z

v
  x91              # type reference to int[] (integer #1)
  x92              # length 2
  x92              # integer 2
  x93              # integer 3
            </artwork>
          </figure>
        </section>
      </section>

      <section title="long" anchor="#long">
        <figure anchor="long_grammar">
          <preamble>Long Grammar</preamble>
          <artwork>
long ::= L b7 b6 b5 b4 b3 b2 b1 b0
     ::= [xd8-xef]
     ::= [xf0-xff] b0
     ::= [x38-x3f] b1 b0
     ::= x77 b3 b2 b1 b0
          </artwork>
        </figure>

        <t>
          A 64-bit signed integer.  An long is represented by the byte 'L' 
          followed by the 8-bytes of the integer in big-endian order.
        </t>

        <section title="Compact: single octet longs">
          <t>
            Longs between -8 and 15 are represented by a single byte in the
            range xd8 to xef.  The value of the long is (code - xe0).
          </t>
        </section>

        <section title="Compact: two octet longs (byte)">
          <t>
            Longs between -2048 and 2047 are encoded in two bytes with
            the leading byte in the range xf0 to xff.  The value of the long 
            is (256 * (code - xf8) + b0).
          </t>
        </section>

        <section title="Compact: three octet longs (short)">
          <t>
            Longs between -262144 and 262143 are encoded in three bytes with
            the leading byte in the range x38 to x3f.  The value of the long 
            is (65536 * (code - x3c) + 256 * b1 + b0).
          </t>
        </section>

        <section title="Compact: four octet longs (short)">
          <t>
            Longs between which fit into 32-bits are encoded in five bytes with
            the leading byte x77.
          </t>
        </section>

        <section title="Long Examples">
          <figure anchor="long_examples">
            <artwork>
xe0                  # 0
xd8                  # -8
xef                  # 15

xf8 x00              # 0
xf0 x00              # -2048
xf7 x00              # -256
xff xff              # 2047

x3c x00 x00          # 0
x38 x00 x00          # -262144
x3f xff xff          # 262143

x77 x00 x00 x00 x00  # 0
x77 x00 x00 x01 x2c  # 300

L x00 x00 x00 x00 x00 x00 x01 x2c  # 300
            </artwork>
          </figure>
        </section>
      </section>

      <section title="map" anchor="#map">
        <figure anchor="map_grammar">
          <preamble>Map Grammar</preamble>
          <artwork>
map        ::= M type? (object object)* z
           ::= 'o' int object*

object-def ::= 'O' type int string*
          </artwork>
        </figure>

        <t>
          Represents serialized objects and Maps. The type element describes 
          the type of the map.  Objects are represented by a map from field 
          names to their values and type is the class of the object itself.
        </t>

        <t>
          The type may be empty, i.e. a zero length.  The parser is responsible 
          for choosing a type if one is not specified.  For objects, 
          unrecognized keys will be ignored.
        </t>

        <t>
          Each map is added to the reference list.  Any time the parser expects 
          a map, it must also be able to support a null or a ref.
        </t>

        <t>
          The type is chosen by the service.  Often it may be the Java 
          classname describing the service.
        </t>

        <section title="Compact: object definition">
          <t>
            Hessian 2.0 has a compact object form where the field names
            are only serialized once.  Following objects only need to serialize
            their values.
          </t>

          <t>
            The object definition includes a mandatory type string, the number 
            of fields, and the field names.  The object definition is stored in 
            the object definition map and will be referenced by object 
            instances with an integer reference.
          </t>
        </section>

        <section title="Compact: object instantiation">
          <t>
            Hessian 2.0 has a compact object form where the field names
            are only serialized once.  Following objects only need to serialize
            their values.
          </t>

          <t>
            The object instantiation creates a new object based on a previous
            definition.  The integer value refers to the object definition.
          </t>
        </section>

        <section title="Map examples">
          <figure anchor="map_example_1">
            <preamble>A sparse array</preamble>
            <artwork>
map = new HashMap();
map.put(new Integer(1), "fee");
map.put(new Integer(16), "fie");
map.put(new Integer(256), "foe");

---

M
  x91       # 1
  x03 fee   # "fee"

  xa0       # 16
  x03 fie   # "fie"

  xb9 x00   # 256
  x03 foe   # "foe"

  z
            </artwork>
          </figure>

          <figure anchor="map_example_2">
            <preamble>Serialization of a Java Object</preamble>
            <artwork>
public class Car implements Serializable {
  String color = "aquamarine";
  String model = "Beetle";
  int mileage = 65536;
}

---
M
  t x00 x13 com.caucho.test.Car  # type

  x05 color                # color field
  x0a aquamarine

  x05 model                # model field
  x06 Beetle

  x07 mileage              # mileage field
  I x00 x01 x00 x00
  z
            </artwork>
          </figure>

          <figure anchor="map_example_3">
            <preamble>Compact Object serialization</preamble>
            <artwork>
class Car {
  String color;
  String model;
}

out.writeObject(new Car("red", "corvette"));
out.writeObject(new Car("green", "civic"));

---

O                        # object definition (#0)
  t x00 x0b example.Car  # type is example.Car
  x92                    # two fields
  x05 color              # color field name
  x05 model              # model field name

o
  x90                    # object definition #0
  x03 red                # color field value
  x08 corvette           # model field value

o
  x90                    # object definition #0
  x05 green              # color field value
  x05 civic              # model field value
            </artwork>
          </figure>

          <figure anchor="map_example_4">
            <preamble></preamble>
            <artwork>
enum Color {
  RED,
  GREEN,
  BLUE,
}

out.writeObject(Color.RED);
out.writeObject(Color.GREEN);
out.writeObject(Color.BLUE);
out.writeObject(Color.GREEN);

---

O                         # object definition #0
  t x00 x0b example.Color # type is example.Color
  x91                     # one field
  x04 name                # enumeration field is "name"

o                         # object #0
  x90                     # object definition ref #0
  x03 RED                 # RED value

o                         # object #1
  x90                     # object definition ref #0
  x05 GREEN               # GREEN value

o                         # object #2
  x90                     # object definition ref #0
  x04 BLUE                # BLUE value

x4a x01                   # object ref #1, i.e. Color.GREEN
            </artwork>
          </figure>
        </section>
      </section>

      <section title="null" anchor="#null">
        <figure anchor="null_grammar">
          <preamble>Null Grammar</preamble>
          <artwork>
null ::= N
          </artwork>
        </figure>

        <t>Null represents a null pointer.</t>

        <t>The byte 'N' represents the null pointer.</t>

        <t>
          null values are allowed in place of any string, xml, binary, list, 
          map, or remote.
        </t>
      </section>

      <section title="ref" anchor="#ref">
        <figure anchor="ref_grammar">
          <preamble>Ref Grammar</preamble>
          <artwork>
ref ::= R b3 b2 b1 b0
          </artwork>
        </figure>

        <t>
          An integer referring to a previous list or map instance.  As each 
          list or map is read from the input stream, it is assigned the integer 
          position in the stream, i.e. the first list or map is '0', the next 
          is '1', etc.  A later ref can then use the previous object.  Writers 
          are not required to generate refs, but parsers must be able to 
          recognize them.
        </t>

        <t>
          ref can refer to incompletely-read items.  For example, a circular 
          linked-list will refer to the first link before the entire list has 
          been read.
        </t>

        <t>
          A possible implementation would add each map and list to an array as 
          it's read.  The ref will return the corresponding object from the 
          array.  To support circular structures, the implementation would 
          store the map or list immediately, before filling in the object's 
          contents.
        </t>

        <t>
          Each &lt;list&gt; or &lt;array&gt; is stored into an array as it is
          parsed.  &lt;ref&gt; selects one of the stored objects.  The first
          object is numbered '0'.
        </t>

        <section title="Ref Examples">
          <figure anchor="ref_examples">
            <preamble>Circular list</preamble>
            <artwork>
list = new LinkedList();
list.head = 1;
list.tail = list;

---

M t x00 x0a LinkedList
  S x00 x04 head
  I x00 x00 x00 x01
  S x00 x04 tail
  R x00 x00 x00 x00
  z
            </artwork>
          </figure>
        </section>

        <t>
          ref only refers to list and map elements.  string and binary, in 
          particular, will only share references if they're wrapped in a list 
          or map.
        </t>
      </section>

      <section title="remote" anchor="#remote">
        <figure anchor="remote_grammar">
          <preamble>Remote Grammar</preamble>
          <artwork>
remote ::= r t b1 b0 &lt;type-name> string
          </artwork>
        </figure>

        <t>
          A reference to a remote object.  The remote has a type and a utf-8 
          string representing the object's URL.
        </t>

        <section title="Remote Examples">
          <figure anchor="remote_examples">
            <preamble>EJB Session Reference</preamble>
            <artwork>
r t x00 x0c test.TestObj
  S x00 x24 http://slytherin/ejbhome?id=69Xm8-zW
            </artwork>
          </figure>
        </section>
      </section>

      <section title="string" anchor="#string">
        <figure anchor="string_grammar">
          <preamble>String Grammar</preamble>
          <artwork>
string ::= s b1 b0 &lt;utf-8-data> string
       ::= S b1 b0 &lt;utf-8-data>
       ::= [x00-x1f] &lt;utf-8-data>
          </artwork>
        </figure>

        <t> 
          A 16-bit unicode character string encoded in UTF-8.  Strings are 
          encoded in chunks. 'S' represents the final chunk and 's' represents 
          any non-final chunk.  Each chunk has a 16-bit length value.
        </t>

        <t>
          The length is the number of characters, which may be different than
          the number of bytes.
        </t>

        <t>String chunks may not split surrogate pairs.</t>

        <section title="Compact: short strings">
          <t>
            Strings with length less than 32 may be encoded with a single
            byte length [x00-x1f].
          </t>
        </section>

        <section title="String Examples">
          <figure anchor="string_examples">
            <artwork>
x00             # "", empty string
x05 hello       # "hello"
x01 xc3 x83     # "\u00c3"

S x00 x05 hello # "hello"
            </artwork>
          </figure>
        </section>
      </section>

      <section title="xml" anchor="#xml">
        <figure anchor="xml_grammar">
          <preamble>XML Grammar</preamble>
          <artwork>
xml ::= x b1 b0 &lt;utf-8-data> xml
    ::= X b1 b0 utf-8-data
          </artwork>
        </figure>

        <t>
          An XML document encoded as a 16-bit unicode character string encoded 
          in UTF-8.  XML data is encoded in chunks.  'X' represents the final 
          chunk and 'x' represents any initial chunk.
        </t>

        <t>
          Each chunk has a 16-bit length value.  The length is the number of 
          characters, which may be different than the number of bytes.
        </t>

        <section title="XML Examples">
          <figure anchor="xml_examples">
            <artwork>
X x00 x10 &lt;top&gt;hello&lt;/top&gt;
            </artwork>
          </figure>
        </section>

        <t>
          Because this document does not define the language mapping,
          implementations are free to return a string when reading an xml
          entity.
        </t>
      </section>
    </section>

    <section title="Bytecode map">

      <t>
        Hessian is organized as a bytecode protocol.  A Hessian implementation 
        is essentially a big switch statement on the initial bytecode.
      </t>

      <figure anchor="bytecode_encoding">
        <preamble>Bytecode Encoding</preamble>
        <artwork>
x00 - x1f    # utf-8 string length 0-32
x20 - x2f    # binary data length 0-16
x30 - x37    # reserved
x38 - x3f    # long from -x40000 to x3ffff
x40 - x41    # reserved
x42          # 8-bit binary data final chunk ('B')
x43          # reserved ('C' streaming call)
x44          # 64-bit IEEE encoded double ('D')
x45          # reserved ('E' envelope)
x46          # boolean false ('F')
x47          # reserved
x48          # reserved ('H' header)
x49          # 32-bit signed integer ('I')
x4a          # reference to 1-256th map/list
x4b          # reference to 1-65536th map/list
x4c          # 64-bit signed long integer ('L')
x4d          # map with optional type ('M')
x4e          # null ('N')
x4f          # object definition ('O')
x50          # reserved ('P' streaming message/post)
x51          # reserved
x52          # reference to map/list - integer ('R')
x53          # utf-8 string final chunk ('S')
x54          # boolean true ('T')
x55          # reserved
x56          # list/vector ('V')
x57          # reserved
x58          # utf-8 xml final chunk ('X')
x59 - x62    # reserved
x62          # 8-bit binary data non-final chunk ('b')
x63          # reserved ('c' call for RPC)
x64          # UTC time encoded as 64-bit long milliseconds since 
             #  epoch ('d')
x65          # reserved
x66          # reserved ('f' for fault for RPC)
x67          # double 0.0
x68          # double 1.0
x69          # double represented as byte (-128.0 to 127.0)
x6a          # double represented as short (-32768.0 to 327676.0)
x6b          # double represented as float
x6c          # list/vector length ('l')
x6d          # reserved ('m' method for RPC call)
x6e          # list/vector compact length
x6f          # object instance ('o')
x70          # reserved ('p' - message/post)
x71          # reserved
x72          # reserved ('r' reply for message/RPC)
x73          # utf-8 string non-final chunk ('s')
x74          # map/list type ('t')
x75          # type-ref
x76          # compact vector ('v')
x77          # long encoded as 32-bit int
x78          # utf-8 XML non-final chunk ('x')
x79          # reserved
x7a          # list/map terminator ('z')
x7b - x7f    # reserved
x80 - xbf    # one-byte compact int (-x10 to x3f, x90 is 0)
xc0 - xcf    # two-byte compact int (-x800 to x3ff)
xd0 - xd7    # three-byte compact int (-x40000 to x3ffff)
        </artwork>
      </figure>

    </section>
  </middle>

  <back>
  </back>
 
</rfc>

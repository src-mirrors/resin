<document>
<header>
  <product>resin</product>
  <title>Authentication with Resin</title>
  <description>
  <p>Authentication provides a method for a username and password
  combination to be provided by a user and then verified by the web
  server.  By using Resin's Authenticator API for login support,
  applications can add security without writing an entire
  authentication library.</p>
          
  <p>Resin provides a predefined XML authenticator for user and
  password lookup in an XML file and a database authenticator for
  lookup in a database using JDBC. If the predefined
  authentication methods are inadequate, Resin provides an API to
  write custom authentication code.</p>
  </description>
</header>

<body>
<summary/>

<s1 title="Quick Start">
<p>The easiest authenticator to understand is the 
<a href="#XmlAuthenticator">XmlAuthenticator</a>.
It lets you put users and passwords directly in the configuration
file.  The following example uses "Basic" authentication for login.
Basic authentication asks the browser to pop open a window prompting
for a username and password.  (Basic authentication is discouraged
because it is not secure unless you use it with SSL, but it's the
easiest example.)  The only user defined here is "Harry Potter" and
he has the password "quidditch".  He also plays the
"user" role.</p>

<example title="Using the XmlAuthenticator">
&lt;web-app xmlns="http://caucho.com/ns/resin"&gt;

  ...

  &lt;authenticator type="com.caucho.server.security.XmlAuthenticator"&gt;
    &lt;init&gt;
      &lt;user&gt;Harry Potter:quidditch:user&lt;/user&gt;
      &lt;password-digest&gt;none&lt;/password-digest&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;

  &lt;login-config auth-method='basic'/&gt;

  &lt;security-constraint url-pattern='/users-only/*' role-name='user'/&gt;

  ...

&lt;/web-app&gt;
</example>

<p>In the above example, the &lt;security-constraint&gt; checks
for authorization.  Only users playing the "user" role can access
the /users-only directory.</p>

<p>Another often used authenticator is the 
<a href="#JdbcAuthenticator">JdbcAuthenticator</a>, 
which uses usernames, passwords, and roles stored in a database.</p>

<example>
&lt;web-app xmlns="http://caucho.com/ns/resin"&gt;

  ...

  &lt;!-- Resin-specific JdbcAuthenticator --&gt;
  &lt;authenticator type='com.caucho.server.security.JdbcAuthenticator'&gt;
    &lt;init&gt;
      &lt;data-source&gt;test&lt;/data-source&gt;
      &lt;password-query&gt;
        SELECT password FROM LOGIN WHERE username=?
      &lt;/password-query&gt;
      &lt;cookie-auth-query&gt;
        SELECT username FROM LOGIN WHERE cookie=?
      &lt;/cookie-auth-query&gt;
      &lt;cookie-auth-update&gt;
        UPDATE LOGIN SET cookie=? WHERE username=?
      &lt;/cookie-auth-update&gt;
      &lt;role-query&gt;
        SELECT role FROM LOGIN WHERE username=?
      &lt;/role-query&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;

  &lt;login-config auth-method='basic'/&gt;

  &lt;security-constraint url-pattern='/users-only/*' role-name='user'/&gt;

  ...

&lt;/web-app&gt;
</example>

</s1>

<s1 title="Configuration">

<s2 title="login-config" type="defun">

<p>Configures the login class.  The <a href="config|webapp#login-config">web.xml configuration</a> describes the
configuration in more detail.</p>

<p>The login can be customized by selecting the <code>com.caucho.server.security.AbstractLogin</code>.  The <var>type</var> attribute will select that
class. More sophisticated applications may want to add their own custom
AbstractLogin class to replace the predefined values.</p>

<p>Typically a custom login would only be necessary if the application
needed a custom way of extracting credentials from the request.</p>

</s2>

<s2 title="auth-method" type="defun">
<p>Selects the authentication method.</p>

<deftable title="auth-method values">
<tr><th>auth-method</th><th>Meaning
</th></tr><tr><td>basic</td><td>HTTP Basic authentication
</td></tr><tr><td>digest</td><td>HTTP Digest authentication
</td></tr><tr><td>form</td><td>Form-based authentication
</td></tr></deftable>

</s2>

<s2 title="form-login-config" type="defun">
<p>Configures authentication for forms.  The login form has
specific parameters that the servlet engine's login form processing
understands.  If the login succeeds, the user will see the original
page.  If it fails, she will see the error page.</p>

<deftable>
<tr><td>form-login-page</td><td>The page to be used to prompt the user login</td><td>none
</td></tr><tr><td>form-error-page</td><td>The error page for unsuccessful login</td><td>none
</td></tr><tr><td>internal-forward</td><td>Use an internal redirect on success or a sendRedirect</td><td>false
</td></tr><tr><td>form-uri-priority</td><td>If true, the form's j_uri will override a stored URI</td><td>false
</td></tr></deftable>

<p>The form itself must have the action <var>j_security_check</var>.  It
must also have the parameters <var>j_username</var> and <var>j_password</var>.
Optionally, it can also have <var>j_uri</var> and
<var>j_use_cookie_auth</var>.  <var>j_uri</var> gives the next page to display
when login succeeds.  <var>j_use_cookie_auth</var> allows Resin to send a
persistent cookie to the user to make following login easier.
</p>

<p><var>j_use_cookie_auth</var> gives control to the user whether to generate
a persistent cookie.  It lets you implement the "remember me" button.  By
default, the authentication only lasts for a single session.
</p>

<deftable title="j_security_check Parameters">
<tr><th>Parameter</th><th>Meaning)
</th></tr><tr><td>j_username</td><td>The user name
</td></tr><tr><td>j_password</td><td>The password
</td></tr><tr><td>j_uri</td><td>Resin extension for the successful display
page (Optional).
</td></tr><tr><td>j_use_cookie_auth</td><td>Resin extension to allow cookie
login (Optional).
</td></tr></deftable>

<p>The following is an example of a servlet-standard login page:</p>

<example>
&lt;form action='j_security_check' method='POST'&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;User:&lt;td&gt;&lt;input name='j_username'&gt;
&lt;tr&gt;&lt;td&gt;Password:&lt;td&gt;&lt;input name='j_password'&gt;
&lt;tr&gt;&lt;td colspan=2&gt;hint: the password is 'quidditch'
&lt;tr&gt;&lt;td&gt;&lt;input type=submit&gt;
&lt;/table&gt;
&lt;/form&gt;
</example>

</s2>

<s2 title="authenticator" version="Resin 1.1" type="defun">
<p>Specifies a class to authenticate users.  This Resin-specific
option lets you control your authentication.  You can either create your 
own custom authenticator, or use Resin's JdbcAuthenticator.</p>

<p>The authenticator is responsible for taking the username and
password and returning a UserPrincipal if the username and password match.
</p>

<p>Users wanting to implement an authenticator should look at the JavaDoc
for <a href="javadoc|com.caucho.server.security.ServletAuthenticator|"/>
and <a href="javadoc|com.caucho.server.security.AbstractAuthenticator|"/>.
To protect your application from API changes, you should extend
AbstractAuthenticator rather than implementing Authenticator directly.
</p>
</s2>
</s1>

<s1 title="XmlAuthenticator" version="Resin 2.0.4">
<p>The XmlAuthenticator (com.caucho.serer.security.XmlAuthenticator),
stores the authentication in either an xml file or in the configuration
itself.</p>

<p>When configuring the XmlAuthenticator in the resin.conf
(or web.xml), each <var>user</var> adds a new configured
user.  The value contains the username, password, and the
roles the user plays.</p>

<example title="XmlAuthenticator in resin.conf">
&lt;authenticator type="com.caucho.server.security.XmlAuthenticator"&gt;
  &lt;init&gt;
    &lt;user&gt;Harry Potter:quidditch:user,gryffindor&lt;/user&gt;
    &lt;user&gt;Draco Malfoy:pureblood:user,slytherin&lt;/user&gt;
    &lt;password-digest&gt;none&lt;/password-digest&gt;
  &lt;/init&gt;
&lt;/authenticator&gt;
</example>

<p>Because the plain text passwords in the example
above are a serious security issue, most sites will use
the password-digest attribute described below to protect the
passwords.</p>

<deftable>
<tr><th>attribute</th><th>meaning</th><th>default
</th></tr><tr><td>user</td><td>specifies an allowed user.  May be repeated.</td><td>none
</td></tr><tr><td>password-digest</td><td>selects the signature method to protect
the password</td><td>md5-base64
</td></tr><tr><td>path</td><td>specifies a path to an XML file containing the users and passwords.</td><td>none
</td></tr><tr><td>logout-on-session-timeout</td><td>If true, the user will be logged out when the session times out</td><td>true
</td></tr></deftable>

<p>The passwords can be specified in a separate *.xml file.  The password
file looks like:</p>

<example title="password.xml">
&lt;authenticator&gt;
  &lt;user name='Harry Potter' password='quidditch' roles='gryffindor'/&gt;
  &lt;user name='Draco Malfoy' password='pureblood' roles='slytherin'/&gt;
&lt;/authenticator&gt;
</example>

<p>Sites should use password-digest to protect the passwords.</p>

</s1>

<s1 title="JdbcAuthenticator" version="Resin 2.0">
<p>The JdbcAuthenticator (<a href="javadoc|com.caucho.server.security.JdbcAuthenticator|"/>)
asks a backend database for the password matching the user's name.
It uses the DataSource specified by the <var>pool-name</var> option, or
the JNDI <var>java:comp/env/jdbc/db-pool</var> by default.
<var>pool-name</var> refers to a DataSource configured with
<a href="env.xtp#database">database</a>.</p>

<p>The following are the attributes for the JdbcAuthenticator:</p>

<deftable>
<tr><th>attribute</th><th>meaning</th><th>default
</th></tr><tr><td>data-source</td><td>The database pool.  Looks in the application
attributes first, then in the global database pools.</td><td>none
</td></tr><tr><td>password-query</td><td>A SQL query to get the user's password.  The
default query is given below.</td><td>see below
</td></tr><tr><td>cookie-auth-query</td><td>A SQL query to authenticate the user by a
persistent cookie.</td><td>none
</td></tr><tr><td>cookie-auth-update</td><td>A SQL update to match
a persistent cookie to a user.</td><td>none
</td></tr><tr><td>role-query</td><td>A SQL query to determine the user's role.  By
default, all users are in role "user", but no others.</td><td>none
</td></tr><tr><td>password-digest</td><td>Specifies the digest algorithm and format (Resin 2.0.4)</td><td>md5-base64
</td></tr><tr><td>logout-on-session-timeout</td><td>If true, the user will be logged out when the session times out (Resin 2.0.6)</td><td>true
</td></tr></deftable>

<example>
&lt;web-app xmlns="http://caucho.com/ns/resin"&gt;

  ...

  &lt;!-- Resin-specific JdbcAuthenticator --&gt;
  &lt;authenticator type='com.caucho.server.security.JdbcAuthenticator'&gt;
    &lt;init&gt;
      &lt;data-source&gt;test&lt;/data-source&gt;
      &lt;password-query&gt;
        SELECT password FROM LOGIN WHERE username=?
      &lt;/password-query&gt;
      &lt;cookie-auth-query&gt;
        SELECT username FROM LOGIN WHERE cookie=?
      &lt;/cookie-auth-query&gt;
      &lt;cookie-auth-update&gt;
        UPDATE LOGIN SET cookie=? WHERE username=?
      &lt;/cookie-auth-update&gt;
      &lt;role-query&gt;
        SELECT role FROM LOGIN WHERE username=?
      &lt;/role-query&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;

  &lt;login-config auth-method='basic'/&gt;

  &lt;security-constraint url-pattern='/users-only/*' role-name='user'/&gt;

  ...

&lt;/web-app&gt;
</example>

</s1>

<s1 title="AuthenticationList" version="3.0.9">
<p>AuthenticatorList 
(<a href="javadoc|com.caucho.server.security.AuthenticatorList|"/>)
is used to configure more than one authenticator in a list, each
authenticator is tried in turn and if the authentication fails the next
authenticator in the list is attempted.

<example>
  &lt;authenticator type="com.caucho.server.security.AuthenticatorList"&gt;
    &lt;init&gt;
      &lt;authenticator resin:type="com.caucho.server.security.XmlAuthenticator"&gt;
        &lt;user&gt;admin:NIHlOSafJN2H7emQCkOQ2w==:user,admin&lt;/user&gt;
      &lt;/authenticator&gt;

      &lt;authenticator resin:type='com.caucho.server.security.JdbcAuthenticator'&gt;
        &lt;data-source&gt;jdbc/users&lt;/data-source&gt;
        &lt;password-query&gt;
          SELECT password FROM LOGIN WHERE username=?
        &lt;/password-query&gt;
        &lt;cookie-auth-query&gt;
          SELECT username FROM LOGIN WHERE cookie=?
        &lt;/cookie-auth-query&gt;
        &lt;cookie-auth-update&gt;
          UPDATE LOGIN SET cookie=? WHERE username=?
        &lt;/cookie-auth-update&gt;
        &lt;role-query&gt;
          SELECT role FROM LOGIN WHERE username=?
        &lt;/role-query&gt;
      &lt;/authenticator&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;

  &lt;login-config auth-method='basic'/&gt;

  &lt;security-constraint url-pattern='/users/*' role-name='user'/&gt;
  &lt;security-constraint url-pattern='/admin/*' role-name='admin'/&gt;
</example>

</p></s1>

<s1 title="PasswordDigest" version="Resin 2.0.4">

<p>Resin has the capability of storing the digest of
a password instead of the password itself.  By using the password digest,
the application can avoid storing the password in a form that someone
can read.</p>

<p>Setting <a config-tag="password-digest"/> of any authenticator
extending <a href="javadoc|com.caucho.server.security.AbstractAuthenticator|"/> will create a digest of the password.
The password-digest has two parts: the digest algorithm
and the encoding format.  "MD5-base64" is a typical digest format, and is the default for the Resin authenticators..</p>

<p>The use of a password digest is more completely described in <a href="security|digest">Digest Passwords</a>.
</p></s1>

<s1 title="Single Signon" version="Resin 3.0.0">

<p>"Single signon" refers to allowing for a single login for more
than one context, for example, logging in to all web-apps in a server at once.
You can implement single signon by configuring the authenticator in
the proper environment: web-app, host, or server.  The login will last for
all the web-apps in that environment.</p>

<p>The authenticator is a resource which is shared across its <a href="env.xtp">environment</a>.  For example, to configure the XML authenticator
for all web-apps in foo.com, you might configure as follows:</p>

<example title="Single Signon for foo.com">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  &lt;server&gt;
    &lt;http port="8080"/&gt;

    &lt;host id="foo.com"&gt;
      &lt;root-directory&gt;/opt/foo.com&lt;/root-directory&gt;

      &lt;authenticator type="com.caucho.server.security.XmlAuthenticator"&gt;
        &lt;init&gt;
          <!-- password: quidditch -->
          &lt;user&gt;harry:uTOZTGaB6pooMDvqvl2LBu:user,gryffindor&lt;/user&gt;
          &lt;!-- password: pureblood --&gt;
          &lt;user&gt;dmalfoy:yI2uN1l97Rv5E6mdRnDFDB:user,slytherin&lt;/user&gt;
        &lt;/init&gt;
      &lt;/authenticator&gt;

      &lt;web-app-deploy path="webapps"/&gt;
    &lt;/host&gt;
  &lt;/server&gt;
&lt;/resin&gt;
</example>

<p>Any .war in the webapps directory will share the same signon for the
host.  You will still need to implement a
<a href="config|webapp#login-config">login-config</a> for each web-app.</p>

</s1>

<s1 title="Custom Login">
<p>The Login is primarily responsible for extracting the credentials
from the request (typically username and password) and passing those
to the ServletAuthenticator.</p>

<p>The Servlet API calls the Login in two contexts: directly from
<code>ServletRequest.getUserPrincipal()</code>, and during 
security checking.   When called from the Servlet API, the login class
can't change the response.  In other words, if an application
calls getUserPrincipal(), the Login class can't return a forbidden
error page.  When the servlet engine calls authenticate(), the login class
can return an error page (or forward internally.)</p>

<p>Normally, Login implementations will defer the actual authentication
to a ServletAuthenticator class.  That way, both "basic" and "form" login
can use the same JdbcAuthenticator.  Some applications, like SSL
client certificate login, may want to combine the Login and authentication
into one class.</p>

 <p>Login instances are configured through bean introspection.  Adding
 a public <code>setFoo(String foo)</code> method will be configured with
 the following login-config:</p>

<example>
&lt;login-config type="test.CustomLogin"&gt;
  &lt;init&gt;
    &lt;foo&gt;bar&lt;/bar&gt;
  &lt;/init&gt;
&lt;/login-config&gt;
</example>

</s1>

</body>
</document>
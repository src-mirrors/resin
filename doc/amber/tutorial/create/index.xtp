<document>
  <header>
    <product>resin</product>
    <title>Creating and Deleting Persistent Beans</title>
    <description>

      <p>Creating and deleting beans from the database uses AmberConnection's create() and delete() methods.</p>

      <p>This example explains:</p>
      <ul>
      <li>Using the create() method to add a bean to the database</li>
      <li>Using the delete() method to remove a bean from the database</li>
      </ul>
    </description>
    <type>tutorial</type>
    <tutorial-startpage>create</tutorial-startpage>
  </header>

  <body>
    <summary/>

<p>Almost all applications need to add and remove entities from the
database.  Although most database accesses are reads, eventually we
need to change the database.</p>

<section title="Files in this tutorial">
<deftable>
<tr><td><viewfile-link file="WEB-INF/web.xml"/>
    <td>Configures the Amber resource and Database
<tr><td><viewfile-link file="WEB-INF/classes/example/Course.java"/>
    <td>The Course bean.
<tr><td><viewfile-link file="WEB-INF/classes/example/Course.hbm.xml"/>
    <td>The Course configuration file.
<tr><td><viewfile-link file="WEB-INF/classes/example/CreateServlet.java"/>
    <td>The Create servlet.
<tr><td><viewfile-link file="WEB-INF/classes/example/InitResource.java"/>
    <td>A resource to initialize the database for the demo
</deftable>
</section>

<section title="Database Schema">

<p>The example uses the same database table as the previous basic example.</p>

<example title="create.sql">
CREATE TABLE amber_create_courses (
  id INTEGER PRIMARY KEY auto_increment,

  course VARCHAR(250) NOT NULL,
  instructor VARCHAR(250),
);
</example>

</section>

<section title="Creating a Course">

<p>Creating a new entity in Amber just means creating the bean with
normal Java calls and then asking Amber to create the entity.</p>

<example title="Creating a Course">
AmberConnection aConn = factory.getConnection();

Course divination = new Course();
divination.setName("Divination");
divination.setTeacher("Sybil Trelawney");

aConn.create(divination);
</example>

<p>Amber only inserts the new course in the database at the
<code>create</code> call.  Before the create, the Course
is a <em>transient</em> object, unconnected with Amber or the
database.</p>

<p>After the create, the object is <em>persistent</em>: registered
with Amber and existing in the database.  In other words, it's
live.</p>

<section title="Generated Keys">

<p>It's convenient to use integers or longs as table keys and
let the database generate the keys itself, avoiding potential
conflicts.</p>

<p>In the example, the database will generate the id and Amber will
call the <code>setId</code> method to fill the new key.  After the
<code>create</code> call, <code>getId()</code> will return the actual
key generated by the database.</p>

<p>Key generation is configured in the hbm.xml file by adding a
&lt;generate> tag:</p>

<example title="Course.hbm.xml">
&lt;hibernate-mapping>
  &lt;class name="example.Course" table="amber_create_courses">
    &lt;id name="id">
      &lt;generator class="identity"/>
    &lt;/id>

    &lt;property name="name"/>
    &lt;property name="teacher"/>
  &lt;/class>
&lt;/hibernate-mapping>
</example>

<p>The <em>identity</em> generator lets the database generate the key
and returns the value using the JDBC API.</p>

</section>

</section>

<section title="Deleting a Course">

<p>The AmberConnection <code>delete</code> call deletes the object
from the database and makes the bean object <em>transient</em>, i.e
unregistered from the AmberConnection.</p>

<example title="Delete a Course">
AmberConnection aConn = factory.getConnection();

aConn.delete(divination);
</example>

<p>When the delete commits, the bean is <em>transient</em>.
It's no longer registered with Amber and it is deleted from the database.</p>

</section>
  </body>
</document>

<document>
<header>
  <product>resin-ee</product>
  <title>Entity Table Configuration</title>
  <version>Resin 3.0</version>

  <description>
  <p>Describes the basic annotation for a single-table entity bean.</p>

  </description>
</header>

<summary objsummary='localtoc'/>

<section title="See Also">

<ul>
<li>See <a href="tutorial/cmp-basic/index.xtp">Basic tutorial</a> for
a complete single-table example.
<li>See <a href="tutorial/cmp-many2one/index.xtp">Many-to-one tutorial</a> for
basic relations.
</ul>

</section>

<section title="Table annotations">

<defun title="@Entity">

<p>Annotates the class as an entity bean.</p>

<p>See the <a href="tutorial/cmp-basic/index.xtp">basic property tutorial</a>
and the <a href="tutorial/cmp-basic-field/index.xtp">basic field tutorial</a>
for an introduction.</p>

<deftable-childtags>
<tr><td>name<td>The name of the bean<td>The class name (unqualified)
<tr><td>entityType<td>container-managed (CMP) or bean-managed (BMP).<td>CMP
<tr><td>access<td>FIELD or PROPERTY<td>PROPERTY
<tr><td>version<td>The EJB version<td>3
</deftable-childtags>

<p>An <var>access</var> type of PROPERTY uses bean-style setters and getters
to implement CMP, i.e. each field <var/Foo/> will have
a <var/getFoo/> and a <var/setFoo/> method.  The
<a href="tutorial/cmp-basic/index.xtp">basic property tutorial</a> describes
this access type.</p>

<p>An <var>access</var> type of FIELD modifies the Java fields directly
to impement CMP like JDO.  The
<a href="tutorial/cmp-basic-field/index.xtp">basic field tutorial</a>
describes this access type.</p>

<def>
@Target(TYPE)
@Retention(RUNTIME)
public @interface Entity {
  String name() default "";

  EntityType entityType() default CMP;
  AccessType access() default PROPERTY;
  int version() default 3;
}
</def>

</defun>

<defun title="@SecondaryTable">

<p>Specifies a secondary database table for an entity bean.
The secondary table will contain the fields with a secondaryTable
in the @Column.</p>

<deftable-childtags>
<tr><td>name<td>The name of the table<td>The unqualified class name.
<tr><td>catalog<td>the table's catalog<td>none
<tr><td>schema<td>the table's schema<td>none
<tr><td>join<td>join column to the primary table<td>joins the primary key
<tr><td>uniqueConstraint<td>unique constraints during generation<td>none
</deftable-childtags>

<def>
@Target(TYPE)
@Retention(RUNTIME)
public @interface SecondaryTable {
  String name() default "";
  String catalog() default "";
  String schema() default "";
  JoinColumn []join() default {};
  UniqueConstraint []uniqueConstraints() default {};
}
</def>

</defun>

<defun title="@Table">

<p>Specifies the database table for an entity bean.  The
default table name is the class name.</p>

<deftable-childtags>
<tr><td>name<td>The name of the table<td>The unqualified class name.
<tr><td>catalog<td>the table's catalog<td>none
<tr><td>schema<td>the table's schema<td>none
<tr><td>uniqueConstraint<td>unique constraints during generation<td>none
</deftable-childtags>

<def>
@Target(TYPE)
@Retention(RUNTIME)
public @interface Table {
  String name() default "";
  String catalog() default "";
  String schema() default "";
  UniqueConstraint []uniqueConstraints() default {};
}
</def>

</defun>

</section>

<section title="Property Annotations">

<defun title="@Basic">

<p>Marks a field as a persistent field.</p>

<deftable-childtags>
<tr><td>fetch<td>EAGER or LAZY fetching<td>FetchType.EAGER
</deftable-childtags>

<p>The fetch types are:
<ul>
<li>EAGER - fetch the field when the bean is loaded
<li>LAZY - fetch the field only when the field is used
</ul>

<example title="String property ">
@javax.ejb.Entity
public class Course {
  @javax.ejb.Basic
  public String getName()

  ...
}
</example>

<example title="Lazy-loaded property ">
@javax.ejb.Entity
public class Course {
  @javax.ejb.Basic(fetch=FetchType.LAZY)
  public String getMassiveText()

  ...
}
</example>

<def title="javax.ejb.Basic">
@Target({Method, FIELD})
@Retention(RUNTIME)
public @interface Basic {
  FetchType fetch() default EAGER;
}
</def>

</defun>

<defun title="@Column">

<p>Specifies the field's SQL column name as well as any CREATE TABLE
properties for auto generation.</p>

<deftable-childtags>
<tr><td>name<td>The SQL name of the column<td>the field name
<tr><td>primaryKey<td>True for primary key<td>false
<tr><td>unique<td>True for UNIQUE columns<td>false
<tr><td>nullable<td>False for IS NOT NULL columns<td>true
<tr><td>insertable<td>True if column is inserted on a <code>create</code> call<td>true
<tr><td>updatable<td>True if column is updated when the field is modified<td>false
<tr><td>columnDefinition<td>SQL to create the column in a CREATE TABLE<td>none
<tr><td>secondaryTable<td>specified if column is stored in a secondary table<td>none
<tr><td>length<td>the default length for a VARCHAR for a CREATE TABLE<td>255
<tr><td>precision<td>the default length for a number definition for a CREATE TABLE<td>0
<tr><td>scale<td>the default length for a number definition for a CREATE TABLE<td>0
</deftable-childtags>

<example title="String property ">
@javax.ejb.Entity
public class Course {
  @javax.ejb.Basic
  @javax.ejb.Column(unique=true,
                    nullable=false,
                    length=32)
  public String getName()

  ...
}
</example>

<def title="javax.ejb.Column">
@Target({Method, FIELD})
@Retention(RUNTIME)
public @interface Column {
  String name() default "";
  boolean primaryKey() default false;
  boolean unique() default false;
  boolean nullable() default true;
  boolean insertable() default true;
  boolean updateable() default true;
  String columnDefinition() default "";
  String secondaryTable() default "";
  int length() default 255;
  int precision() default 0;
  int scale() default 0;
  boolean specified() default true;
}
</def>

</defun>

</section>

<section title="Primary Key Annotations">

<defun title="@Id">

<p>Marks a field as a primary key.  The <code>@Id</code>
may specify a generator for automatic key generation when new
objects are created.</p>

<p>The default column name is "ID".</p>

<deftable-childtags>
<tr><td>generate<td>The auto-generation type<td>NONE
<tr><td>generator<td>The sequence or table generator name<td>\${table}_cseq
</deftable-childtags>

<p>The generator types are:
<ul>
<li>NONE - no auto generation for this field
<li>IDENTITY - the database supplies the new key, e.g. auto_increment, SERIAL, or IDENTITY
<li>SEQUENCE - use a SEQUENCE type to generate the key
<li>TABLE - use a @TableGenerator for the key
<li>AUTO - choose the generator based on the database
<ul>
<li>MySQL - IDENTITY using auto_increment
<li>Resin - IDENTITY using auto_increment
<li>Postgres - SEQUENCE
<li>Oracle - SEQUENCE
</ul>
</ul>

<p>For SEQUENCE and TABLE, Resin will create the sequence
name as "\${table}_cseq".</p>

<example title="automatic generation">
@javax.ejb.Entity
public class Course {
  @javax.ejb.Id(generate=GeneratorType.AUTO)
  public long getId()

  ...
}
</example>

<example title="sequence generation">
@javax.ejb.Entity
public class Course {
  @javax.ejb.Id(generate=GeneratorType.SEQUENCE,
                generator=COURSE_SEQ)
  public long getId()

  ...
}
</example>

<def title="javax.ejb.Id">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Id {
  GeneratorType generate() default NONE;
  String generator() default "";
}
</def>

</defun>

</section>

<section title="Relation annotations">

<defun title="@AssociationTable">

<p>Defines an association table for a many-to-many relation.</p>

<deftable-childtags>
<tr><td>table<td>Table definition for the association table<td>concatening the source and target table names
<tr><td>joinColumns<td>Columns from from the association table to the source table<td>Uses the source table primary key
<tr><td>inverseJoinColumns<td>Columns from from the association table to the target table<td>Uses the target table primary key
</deftable-childtags>

<def title="javax.ejb.AssociationTable">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface AssociationTable {
  Table table() default @Table(specified=false);
  JoinColumn []joinColumns() default {};
  JoinColumn []inverseJoinColumns() default {};
}
</def>

</defun>

<defun title="@JoinColumn">

<p>Defines a join (foreign) columns.  Used for <a href="#@ManyToOne">@ManyToOne</a>.</p>

<p>See also <a href="#@Column">@Column</a> for
corresponding definition for <a href="#@Basic">@Basic</a> columns.</p>

<p>See the <a href="tutorial/cmp-many2one/index.xtp">Many-to-One
tutorial</a> for a full example.</p>

<deftable-childtags>
<tr><td>name<td>The column name of the source table<td>the column name of the target key
<tr><td>referencedColumnName<td>The target column for composite keys<td>the single primary key
<tr><td>primaryKey<td>True for a primary key<td>false
<tr><td>unique<td>True if unique<td>false
<tr><td>nullable<td>False if IS NOT NULL<td>true
<tr><td>insertable<td>True if the column is inserted on a <code>create</code><td>true
<tr><td>updateable<td>True if the column is updated on field changes<td>true
<tr><td>columnDefinition<td>SQL column definition<td>false
<tr><td>secondaryTable<td>specifies a secondary table if not in the primary<td>none
</deftable-childtags>

<example title="Student to House link">
public class Student {
  @Id
  @Column(name="student_id")
  long getId()

  @ManyToOne
  @JoinColumn(name="house_id")
  public House getHouse()
}
</example>

<example title="Student SQL">
CREATE TABLE Student {
  student_id BIGINT PRIMARY KEY auto_increment

  house_id BIGINT REFERENCES House(id)
)
</example>

<def title="javax.ejb.JoinColumn">
@Target({TYPE, METHOD, FIELD})
@Retention(RUNTIME)
public @interface JoinColumn {
  String name() default "";
  String referencedColumnName() default "";
  boolean primaryKey() default false;
  boolean unique() default false;
  boolean nullable() default false;
  boolean insertable() default true;
  boolean updateable() default true;
  String columnDefinition() default "";
  String secondaryTable() default "";
}
</def>

</defun>

<defun title="@JoinColumns">

<p>Defines a set of join (foreign) columns for composite keys.</p>

<def title="javax.ejb.ManyToOne">
@Target({TYPE,METHOD, FIELD})
@Retention(RUNTIME)
public @interface JoinColumns {
  JoinColumn [] value() default{}
}
</def>

</defun>

<defun title="@ManyToMany">

<p>Marks a field as a many-to-many (association) relation.</p>

<p>The column names are the key columns of the source and target tables.</p>

<p>See the <a href="tutorial/cmp-many2many/index.xtp">many-to-many tutorial</a> for an example.</p>

<deftable-childtags>
<tr><td>targetEntity<td>The class of the target entity<td>the property's type
<tr><td>cascade<td>Operations which cascade to the target<td>none
<tr><td>fetch<td>EAGER or LAZY fetching<td>FetchType.EAGER
<tr><td>isInverse<td>If true, this is the dependent size<td>false
</deftable-childtags>

<example title="Simple link ">
@javax.ejb.Entity
public class Student {
  @javax.ejb.ManyToMany
  @javax.ejb.AssociationTable(
    table=@javax.ejb.Table(name="student_course_map"),
    joinColumns=@JoinColumn(name="student_id"),
    inverseJoinColumns=@JoinColumn(name="course_id")
  )
  public Collection getCourses()

  ...
}
</example>

<def title="javax.ejb.ManyToMany">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface ManyToMany {
  String targetEntity default "";
  CascadeType []cascade() default {};
  FetchType fetch() default LAZY;
  boolean isInverse() default false;
}
</def>

</defun>

<defun title="@ManyToOne">

<p>Marks a field as a many-to-one (link) relation.</p>

<p>The default column name is the column name of the target key.</p>

<p>See the <a href="tutorial/cmp-many2one/index.xtp">many-to-one tutorial</a> for an example.</p>

<deftable-childtags>
<tr><td>targetEntity<td>The class of the target entity<td>the property's type
<tr><td>cascade<td>Operations which cascade to the target<td>none
<tr><td>fetch<td>EAGER or LAZY fetching<td>FetchType.EAGER
<tr><td>optional<td>If false, the relation must always have a value<td>true
</deftable-childtags>

<example title="Simple link ">
@javax.ejb.Entity
public class Student {
  @javax.ejb.ManyToOne
  @javax.ejb.JoinColumn(name="house")
  public House getHouse()

  ...
}
</example>

<def title="javax.ejb.ManyToOne">
@Target({Method, FIELD})
@Retention(RUNTIME)
public @interface ManyToOne {
  String targetEntity default "";
  CascadeType []cascade() default {};
  FetchType fetch() default EAGER;
  boolean optional() default true;
}
</def>

</defun>

<defun title="@OneToMany">

<p>Marks a field as a one-to-many (collection) relation.
Because a one-to-many field is dependent, it
needs a @ManyToOne relation on the source table which defines the column.</p>

<deftable-childtags>
<tr><td>targetEntity<td>The class of the target entity<td>the property's type
<tr><td>cascade<td>Operations which cascade to the target<td>none
<tr><td>fetch<td>EAGER or LAZY fetching<td>FetchType.EAGER
</deftable-childtags>

<example title="Collection java">
@javax.ejb.Entity
public class House {
  ...
  @javax.ejb.OneToMany(targetEntity="Student")
  public Collection getStudents()
}

@javax.ejb.Entity
public class Student {
  ...
  @javax.ejb.ManyToOne
  @javax.ejb.JoinColumn(name="house")
  public House getHouse()
}
</example>

<example title="Collection SQL">
CREATE TABLE House {
  id BIGINT PRIMARY KEY
)

CREATE TABLE Student {
  id BIGINT PRIMARY KEY,

  house BIGINT REFERENCES House(id)
)
</example>

<def title="javax.ejb.OneToMany">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface OneToMany {
  String targetEntity default "";
  CascadeType []cascade() default {};
  FetchType fetch() default EAGER;
}
</def>

</defun>

<defun title="@OneToOne">

<p>Marks a field as a one-to-one (dependent link) relation.
Because a one-to-one field is dependent, it
needs a @OneToOne relation on the source table which defines the column.</p>

<deftable-childtags>
<tr><td>targetEntity<td>The class of the target entity<td>the property's type
<tr><td>cascade<td>Operations which cascade to the target<td>none
<tr><td>fetch<td>EAGER or LAZY fetching<td>FetchType.EAGER
</deftable-childtags>

<def title="javax.ejb.OneToOne">
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface OneToOne {
  String targetEntity default "";
  CascadeType []cascade() default {};
  FetchType fetch() default EAGER;
  boolean optional() default true;
}
</def>

</defun>

</section>

<section title="Inheritance annotations">

<defun title="@DiscriminatorColumn">

<p>Configures the discriminator column.</p>

<def title="javax.ejb.DiscriminatorColumn">
@Target(TYPE)
@Retention(RUNTIME)
public @interface DiscriminatorColumn {
  String name() default "";
  boolean nullable() default false;
  String columnDefinition() default "";
  int length() default 10;
}
</def>

</defun>

<defun title="@Inheritance">

<p>@Inheritance marks the entity bean as supporting inheritance,
i.e. the database maps to different Java classes depending on
a discriminator value.</p>

<def title="javax.ejb.Inheritance">
@Target(TYPE)
@Retention(RUNTIME)
public @interface Inheritance {
  InteritanceType strategy() default SINGLE_TABLE;
  DiscriminatorType discriminatorType() default STRING;
  String discriminatorValue() default "";
}
</def>

</defun>

<defun title="InheritanceType">

<def title="javax.ejb.InheritanceType">
public enum InheritanceType {
  SINGLE_TABLE,
  TABLE_PER_CLASS,
  JOINED
}
</def>

</defun>

</section>

</document>

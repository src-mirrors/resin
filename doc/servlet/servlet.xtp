<document>
  <header>
    <product>resin</product>
    <resin-2.0>$resin/ref/servlet-config.xtp</resin-2.0>
    <title>Servlets</title>
    <description>
      <p>Servlets are Java classes which service HTTP requests.  The only
        requirement for writing a servlet is that it implements the
        javax.servlet.Servlet interface.</p>

      <p>Servlets are loaded from the classpath like all Java classes.
        Normally, users put servlets in <var>WEB-INF/classes</var> so Resin will
          automatically reload them when they change.</p>
      
      <p><a href="jsp|index">JSP</a> pages are implemented as
        Servlets, and tend to be more efficient for pages with lots of text.</p>
    </description>
  </header>

  <body>
    <summary no-objsummary="1"/>

<s1 title="Examples">

<s2 title="Configuring the web.xml">

<p>The following is a complete working web.xml to run this example.</p>

<p>The <var>servlet-mapping</var> tells Resin that the URL
<var>/hello</var> should invoke the <var>hello-world</var> servlet.</p>

<p>The <var>servlet</var> tells Resin that <var>hello-world</var> uses the
<var>test.HelloWorld</var> class and that the value of the <var>greeting</var>
init parameter is <var>Hello World</var>.</p>

<example title="WEB-INF/web.xml">
&lt;web-app&gt;
  &lt;servlet-mapping url-pattern='/hello'
                   servlet-name='hello-world'/&gt;

  &lt;servlet servlet-name='hello-world'
           servlet-class='test.HelloWorld'&gt;
    &lt;init-param greeting='Hello, World'/&gt;
&lt;/web-app&gt;
</example>

<p>The Java code, <var>HelloWorld.java</var> belongs in</p>
<def>
$app-dir/WEB-INF/classes/test/HelloWorld.java
</def>

<p>Or, if you're compiling the servlet yourself, the class file belongs in</p>
<def>
$app-dir/WEB-INF/classes/test/HelloWorld.class
</def>

<p>Following is the actual servlet code.  It just prints a trivial
HTML page filled with the greeting specified in the web.xml.</p>

<p><var>init()</var> and <var>destroy()</var> are included mostly for
illustration.  Resin will call <var>init()</var> when it starts the servlet
and <var>destroy</var> before Resin destroys it.</p>

<example>
package test;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet {
  private String greeting;

  public void init()
    throws ServletException
  {
    greeting = getInitParameter("greeting");
  }

  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
    throws ServletException, IOException
  {
    PrintWriter out = response.getWriter();

    out.println("&lt;title&gt;" + greeting + "&lt;/title&gt;");
    out.println("&lt;h1&gt;" + greeting + "&lt;/h1&gt;");
  }
  
  public void destroy()
  {
    // nothing to do
  }
}
</example>

</s2>

<s2 title="Servlet Example for JSP Programmers">

<p>Because Resin compiles JSP pages into servlets, programmers familiar
with JSP can start writing servlets fairly easily.  The following template
can be used to see how to write a servlet for someone familiar with JSP.
</p>

<example>
package test;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet {
  public void service(HttpServletRequest request,
                      HttpServletResponse response)
    throws ServletException, IOException
  {
    PrintWriter out = response.getWriter();
    ServletContext application = getServletContext();
    HttpSession session = request.getSession();

    try {
      // <var>code goes here</var>

      // The equivalent of jsp:include:
      // request.getRequestDispatcher("/inc.jsp").include(request, response);
    } catch (ServletException e) {
      throw e;
    } catch (Exception e) {
      throw new ServletException(e);
    }
  }
}
</example>

</s2>

<s2 title="Using Databases from a Servlet">

<p>The following is a sample design pattern for getting new database
connections.  The <var>try ... finally</var> block is very important.  Without
the close in the finally block, Resin's database pool can loose connections.</p>

<p>Configuring the database is described in the
<a href="doc|db|index">database configuration</a> page.</p>

<example title="TestDatabase.java">
package test;

import java.io.*;

import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import javax.sql.*;

public class TestDatabase extends HttpServlet {
  DataSource pool;

  public void init()
    throws ServletException
  {
    try {
      Context env = (Context) new InitialContext().lookup("java:comp/env");

      pool = (DataSource) env.lookup("jdbc/test");

      if (pool == null)
        throw new ServletException("`jdbc/test' is an unknown DataSource");
    } catch (NamingException e) {
      throw new ServletException(e);
    }
  }

  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
    throws IOException, ServletException
  {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();

    Connection conn = null;
    try {
      conn = pool.getConnection();

      // <var>code for the servlet using the database goes here</var>

      rs.close();
      stmt.close();
    } catch (SQLException e) {
      throw new ServletException(e);
    } finally {
      try {
        if (conn != null)
          conn.close();
      } catch (SQLException e) {
      }
    }
  }
}
</example>

</s2>

</s1>


<s1 title="Servlet Configuration">

<s2 title="init" version="Resin 2.1.3" type="defun">
<p>Configures servlets using bean-style initialization.
Each entry in an &lt;init&gt; tag will configure a <code>setFoo</code>
method in a Servlet. JSP EL expressions are allowed.</p>

<p>The <code>init(config)</code> method is called after
all the bean setters are called.</p>

<example title="Bean-style Configuration">
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;init&gt;
    &lt;greeting&gt;Hello, ${host.url}&lt;/greeting&gt;
  &lt;/init&gt;
&lt;/servlet&gt;
</example>

<example title="HelloWorld bean">
public HelloWorld extends GenericServlet {
  private String _greeting;

  public void setGreeting(String greeting)
  {
    _greeting = greetin;
  }

  public void service(ServletRequest req,
                      ServletResponse res)
    throws IOException, ServletException
  {
    PrintWriter out = res.getWriter();

    out.println("Greeting: " + _greeting);
  }
}
</example>

</s2>

<s2 title="init-param" type="defun">
<p>Initializes servlet variables. <code>servlet-param</code>
defines initial values for <code>getServletConfig().getInitParameter("foo")</code>.
</p>

<p>The full servlet 2.2 syntax is supported and allows a simple shortcut.</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;init-param foo='bar'/&gt;

  &lt;init-param&gt;
    &lt;param-name&gt;baz&lt;/param-name&gt;
    &lt;param-value&gt;value&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</s2>

<s2 title="load-on-startup" type="defun">
<p>If present, starts the servlet when the server starts.</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'&gt;
  &lt;load-on-startup/&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</s2>

<s2 title="run-at" version="Resin 1.1" type="defun">
<p>If present, calls the servlet's <var>service()</var> method
at the specified times.
&lt;run-at&gt; lets servlet writers execute periodic tasks without worrying
about creating a new Thread.</p>

<p>The value is a list of 24-hour times when the
servlet should be automatically executed.  To run the servlet every 6
hours, you could use:</p>

<example>
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;run-at&gt;0:00, 6:00, 12:00, 18:00&lt;/run-at&gt;
&lt;/servlet&gt;
</example>

<p>If the hour is omitted, the servlet runs every hour at the
specified minute.  To run the server every 15 minutes, you could use:
</p>

<example>
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;run-at&gt;:00, :15, :30, :45&lt;/run-at&gt;
&lt;/servlet&gt;
</example>
</s2>

<s2 title="servlet" type="defun">
<p>Defines a servlet alias for later mapping.</p>

<deftable>
<tr><th>Attribute</th><th>Description
</th></tr><tr><td>servlet-name</td><td>The servlet's name (alias)
</td></tr><tr><td>servlet-class</td><td>The servlet's class (defaults to servlet-name)
</td></tr><tr><td>init-param</td><td>Initialization parameters
</td></tr><tr><td>load-on-startup</td><td>Initializes the servlet when the server starts.
</td></tr><tr><td>run-at</td><td>Times to execute the servlet automatically
</td></tr></deftable>

<p>The following example defines a servlet alias 'hello'</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet-mapping url-pattern='/hello.html'
                 servlet-name='hello'/&gt;

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'&gt;
  &lt;init-param title='Hello, World'/&gt;
&lt;/servlet&gt;

&lt;servlet servlet-name='cron'
         servlet-class='test.DailyChores'&gt;
  &lt;run-at&gt;3:00&lt;/run-at&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</s2>

<s2 title="servlet-class" type="defun">
<p>Class of the servlet.  The CLASSPATH for servlets includes
the WEB-INF/classes directory and all jars in the WEB-INF/lib directory.
</p>
</s2>

<s2 title="servlet-name" type="defun">
<p>Alias of the servlet, uniquely naming a servlet configuration.
Several &lt;servlet&gt; configurations might configure the same
servlet class with different &lt;init-param&gt; values.  Each will
have a separate servlet-name.</p>

<example title="Multiple Servlets">
&lt;web-app&gt;
  &lt;servlet servlet-name='foo-a'&gt;
    &lt;servlet-class&gt;test.FooServlet&lt;/servlet-class&gt;
    &lt;init-param name='foo-a sample'/&gt;
  &lt;/servlet&gt;

  &lt;servlet servlet-name='foo-b'&gt;
    &lt;servlet-class&gt;test.FooServlet&lt;/servlet-class&gt;
    &lt;init-param name='foo-b sample'/&gt;
  &lt;/servlet&gt;
&lt;/web-app&gt;
</example>

</s2>

<s2 title="servlet-mapping" type="defun">
<p>Maps from a URL to the servlet to execute.  The servlet-mapping
has a url-pattern to match the URL and a servlet-name to match the
configured servlet.</p>

<example title="typical servlet-mapping">
&lt;servlet&gt;
  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
  &lt;servlet-class&gt;test.HelloServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
  &lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;
  &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
&lt;/servlet-mapping&gt;
</example>

<p>Resin allows for a shortcut combining the servlet and
the servlet mapping:</p>

<example title="shortcut servlet-mapping">
&lt;servlet-mapping url-pattern="/hello/*"
                 servlet-class="test.HelloServlet"/&gt;
</example>
</s2>

<s2 title="url-pattern" version="Servlet 2.2" type="defun">
<p>Matches a set of URLs for servlet-mapping.</p>

<deftable>
<tr><th width="25%">Pattern</th><th>Description
</th></tr><tr><td>/foo/bar.html</td><td>Matches exactly the /foo/bar.html URL.
</td></tr><tr><td>/foo/*</td><td>Matches /foo and any children
</td></tr><tr><td>*.foo</td><td>Matches any URL with a .foo extension
</td></tr><tr><td>/</td><td>Replaces the default servlet.
</td></tr></deftable>

<p><var>/</var> defines a default handler and <var>/*</var> defines a prefix handler.
<var>/*</var> will override extension handlers like <var>*.foo</var>. <var>/</var>
will only be used if no other pattern matches.</p>

<p>No default.  Either url-pattern or url-regexp is required.</p>
</s2>

</s1>
  </body>
</document>
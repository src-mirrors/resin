<document>
<header>
<product>resin</product>
<title>Internationalization (i18) in PHP/Quercus</title>
<description>
<p>
This i18n tutorial goes through the process of internationalizing a PHP
application.
</p>
</description>
   <type>tutorial</type>
   <tutorial-startpage>i18n.php</tutorial-startpage>
</header>

<body>

<localtoc/>

<s1 title="Files in this tutorial">
<deftable>
<tr>
    <td><viewfile-link file="i18n.php"/></td>
    <td>The i18n example page</td>
</tr>
<tr>
    <td><viewfile-link file="locale/de_DE/LC_MESSAGES/messages.po"/></td>
    <td>German translations</td>
</tr>
<tr>
    <td><viewfile-link file="locale/en_AU/LC_MESSAGES/messages.po"/></td>
    <td>Australian translations</td>
</tr>
<tr>
    <td><viewfile-link file="locale/fr_CA/LC_MESSAGES/messages.po"/></td>
    <td>French translations</td>
</tr>
</deftable>
</s1>

<s1 title="Internationalization in PHP/Quercus">

<s2 title="Introduction">

<p>For most PHP applications, internationalization simply means using gettext
to prepare the application for translations.  Gettext works by creating
seperate files for the translations.  Places that contains strings will call a
gettext function to lookup translations that reside in files separate from the
source code.</p>

<p>The following tutorial goes through the the steps in internationalizing a
simple PHP program and showcases the benefits of using Quercus, Caucho
Technology's PHP implementation in Java, over the standard PHP interpreter.</p>

</s2>

<s2 title="Simple PHP Application">

<p>Below is a non-internationalized PHP script that just outputs
"Good morning":</p>

<example>
&lt;?php

  echo "Good morning";

?>
</example>

</s2>

<s2 title="Preparing translation files">

<p>The developer would need to extract the strings from the above script into
a .po file.  The downloadable <a href="http://www.gnu.org/software/gettext/">
GNU gettext utilities</a> can do the extraction automatically.</p>

<p>To extract the strings from the script, run the command line xgettext
utility:</p>

<example>
  $xgettext -a filename.php
</example>

<p>This will give a human-readable messages.po file like the one below:</p>

<example>

# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR &lt;EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2006-09-26 02:10-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE &lt;LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=<b>CHARSET</b>\n"
"Content-Transfer-Encoding: 8bit\n"

#: i18n.php:3
msgid "Good morning"
msgstr ""

</example>

<p>The string right after msgstr will be the string that gettext returns as the
translation for "Good morning".  Before giving the PO file to the translators,
the developer needs to set the CHARSET, or character set, of the
original/translated strings.  The translators should type their translations
in  this character set.  The most common character set is "UTF-8".</p>

<p>(Quercus' gettext library works with both .po and .mo files, so the
conversion from .po to .mo can be skipped, thus preventing source control
problems when a .mo file is not kept up to date with the .po file.  Quercus
will try to read translations from the .po file and if the .po file is not
found, it will try to read the .mo file.)</p>

</s2>

<s2 title="Modifying the application">

<p>The following is the internationalized script:</p>

<example>
&lt;?php

  bindtextdomain("messages", "./locale");

  echo _("Good morning");

?>
</example>

<p>The call to bindtextdomain() tells gettext the location of the base
directory of the translation files with prefix "messages".  The underscore
function is the shorthand version of the gettext() function.</p>

</s2>

<s2 title="Organizing the translation files">

<p>Translation files should be placed in a directory hierarchy in the base
directory specified by bindtextdomain().  Below are examples for US English,
Canada French, and Germany German for the default gettext category/directory
"LC_MESSAGES".  The underscore function will always use "LC_MESSAGES" as the
default category.</p>

<example>
  ./locale/de_DE/LC_MESSAGES/messages.po
  ./locale/en_US/LC_MESSAGES/messages.po
  ./locale/fr_CA/LC_MESSAGES/messages.po
</example>

<p>The locale strings "en_US", "fr_CA", and "de_DE" are made up of
standardized ISO codes.  The first two letters is the language code and the
last two letters is the country code.  Gettext will pick the language depending
on the locale of the host machine.  The locale can be changed manually by:</p>

<example>
  setlocale(LC_MESSAGES, "de_DE");
</example>

</s2>

</s1>

</body>
</document>

<document>
<body>
<s1 title="Web Application Configuration">

<p>HTTP configuration follows the Servlet 2.2 deployment descriptors.
The nesting order is important, but order is generally not important.
In the sections that follow, the section
header tells where the attribute belongs.  For example, an attribute in
<var/caucho.com/http-server/host/> belongs in a <var/host/> element which
belongs in an <var/http-server/> element which belongs in the
<var/caucho.com/> element.</p>

<p>The application configuration can be placed in <var/WEB-INF/web.xml/>
If <var/web.xml/> exists, Resin will use it to configure the application.
</p>

<p><a href='servlet-config.xtp'>Servlet</a> configuration interacts with the
application configuration.  In particular, <var/servlet-mapping/> tells Resin
how to map urls to servlets.</p>

<objsummary/>

<s2 title='web-app'>




<defun title='cookie-length' version="Resin 2.1.1">
<p>Specifies the maximum length for the session's generated cookie.
Only special situations like WAP devices should use this option.
Reducing this value reduces the randomness in the cookie and increases the
chance of session collisions.</p>

<p>Defaults to generate the maximum length of the cookie
(64 random bits = 12 characters.)</p>
</defun>

<defun title='directory-servlet' version="Resin 1.2">
<p>Specifies the servlet to use to display directories.  To
disable directory listing, set this to 'none'.</p>

<example>
&lt;web-app id='/'&gt;

  &lt;directory-servlet>none&lt;/directory-servlet>

&lt;/web-app>
</example>

<p>The default is com.caucho.server.http.DirectoryServlet.</p>
</defun>

<defun title="ejb-ref" version="Servlet 2.2">
<p>Instantiates a EJB client bean.  Normally, EJB clients
use <a href="#jndi-link">jndi-link</a> instead.  There are
<a href="ejb.xtp">EJB configuration</a> examples for some vendors.</p>

<deftable>
<tr><th>Attribute><th>Meaning
<tr><td>ejb-ref-name<td>JNDI path attribute to store the bean
<tr><td>ejb-ref-type<td>EJB class type
<tr><td>ejb-ref-factory<td>Factory for creating an EJB client bean
(Resin 1.2)
<tr><td>init-param<td>Parameter for the factory (Resin 1.2)
</deftable>

</defun>

<defun name=error-log title='error-log' index='error-log'>
<p>Specifies the file for error logging.  See
the host <a href="http-config.xtp#error-log">error-log</a> for more details.</p>

<p>The default uses the containing host's error log.</p>
</defun>


<defun title='jdbc-store' version="Servlet 2.2">
<p>Configure sessions to use a JDBC backing store. The database must be
specified using the resource-ref configuration.  The database store
will automatically create a table to store the sessions.</p>

<deftable>
<tr><td>data-source<td>data source name for the table
<tr><td>table-name<td>database table for the session data
<tr><td>blob-type<td>database type for a blob
<tr><td>timestamp-type<td>database type for a blob
<tr><td>session-timeout<td>cleanup time
</deftable>

<example title="Example configuration">
&lt;session-config>
  &lt;jdbc-store>
    &lt;data-source>jdbc/sessions&lt;/data-source>
  &lt;/jdbc-store>
&lt;/session-config>
</example>

<example title="Example table created by session">
CREATE TABLE session (
  id VARCHAR(64) NOT NULL,
  data BLOB,
  mod_time TIMESTAMP,
  PRIMARY KEY(id)
)
</example>

<p>By default, Resin does not use JDBC persistent sessions.</p>
</defun>

<defun title="jndi-link" version="Resin 1.2">
<p>Links a foreign JNDI context to the Resin JNDI context.
For example, you can use <var/jndi-link/> to link in client EJBs from
a foreign EJB container.</p>

<deftable>
<tr><th>Attribute<th>Description.
<tr><td>jndi-name<td>JNDI path attribute to bind the link
<tr><td>property-file<td>jndi.property to use to obtain the Context.
<tr><td>jndi-factory<td>Class name of an InitialContextFactory used to
create the bean.
<tr><td>init-param<td>Properties to be used to get the initial
context.
<tr><td>jndi-lookup<td>JNDI path for the foreign context.
</deftable>

<example title="Linking a WebLogic EJB client bean">
&lt;jndi-link>
  &lt;jndi-name>java:comp/env/ejb/traderHome&lt;/jndi-name>
  &lt;jndi-factory>weblogic.jndi.WLInitialContextFactory&lt;/jndi-factory>
  &lt;init-param java.naming.provider.url="t3://localhost:7001"/>
  &lt;jndi-lookup>statelessSession.TraderHome&lt;/jndi-lookup>
&lt;/jndi-link>
</example>

<p>By default, Resin does not add any special JNDI links.</p>
</defun>

<defun name=jsp title='jsp' version="Resin 1.1">
<p>JSP configuration.</p>

<deftable>
<tr><th>attribute<th>meaning<th>default
<tr><td>auto-compile<td>if false, changes in .jsp will not
<tr><td>disable-init-log<td>if true, disables logging of the jsp init and destroy<td>false
<tr><td>jsp-update-interval<td>How often JSP files should be checked for changes (since Resin 2.1.1)<td>class-update-interval
<tr><td>jsp-max<td>limit the number of active JSP pages<td>1024
<tr><td>precompile<td>use precompiled JSP classes if available.<td>true
<tr><td>require-source<td>check to see if the *.jsp file has been deleted<td>false
<tr><td>recompile-on-error<td>If the JSP page throws a java.lang.Error, recompile it. (since Resin 1.2.3)<td>false
<tr><td>recycle-tags<td>recycles tags following the JSP 1.2 (since Resin 2.0.2)<td>true
<tr><td>session<td>If "false", disable sessions by default.<td>true
<tr><td>static-encoding<td>allow JSP to precompile character encoding.<td>true
force auto-compile.<td>true
<tr><td>velocity<td>allows Velocity-style syntax (since Resin 2.0.3)<td>false
<tr><td>tld-dir<td>restricts the search for .tld files to a subdirectory (since 3.0.0)<td>WEB-INF
</deftable>

</defun>

<defun title='lazy-init' version="Resin 2.1.1">
<p>Marks the web-app as lazily initialized.  Normally,
web-apps are loaded when Resin starts and the load-on-init servlets are run.
With lazy-init, the web-app will only be started on the first request.
</p>
</defun>

<defun title="multipart-form" version="Resin 1.2">
<p>Enables multipart-mime for forms and file uploads.  multipart-mime
is disabled by default.</p>

<p>For an uploaded file with a form name of <var/foo/>, the parameter
value contains the path name to a temporary file containing the uploaded
file.  <var/foo.filename/> contains the uploaded filename, and
<var/foo.content-type/> contains the content-type of the uploaded file.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>enable<td>if set false, this disables multipart-form processing.<td>true
<tr><td>upload-max<td>maximum size of an upload request (in kb).<td>no limit
</deftable>

<p>If the upload is larger than the limit or if multipart-form processing
is disabled, Resin will not parse the request and will set an error message
in the "caucho.multipart.form.error" request attribute. (Resin 2.0.2)
</p>

<p>By default, multipart-form is disabled.</p>
</defun>

<defun title="run-at" version="Resin 1.1">
<p>Times to execute the servlet automatically.
The run-at value in the servlet configuration configures a servlet to be
run at certain times of the day.</p>

<p>The value of the run-at is a list of hours or minutes the servlet
should be run at.  To run the servlet at 3am and at 2:25pm, use:
</p>
<example title='Run test.Alarm at 3am and 2:25pm'>
&lt;servlet servlet-name='foo' servlet-class='test.Alarm'>
  &lt;run-at>3:00 14:25&lt;/run-at>
&lt;/servlet>
</example>

<p>To run the servlet at 5 minutes past the hour and at 45 minutes past the
our use ":05 :45".</p>

<p>You can also assign a period to the run-at, instead of specifying
specific times.  This can be useful if the period is something short like
every 5 minutes:</p>
<example title='Run test.Alarm every 5 minutes'>
&lt;servlet servlet-name='foo' servlet-class='test.Alarm'>
  &lt;run-at period='5m'/>
&lt;/servlet>
</example>
</defun>

<defun title="servlet-mapping" version="Servlet 2.2">
<p>Maps url patterns to servlets.  <var/servlet-mapping/> has two
children, <var/url-pattern/> and <var/servlet-name/>.
<var/url-pattern/>
selects the urls which should execute the servlet.</p>

<p><code/servlet-name/> can either specify a servlet class directly or it
can specify a servlet alias defined by <code/servlet/>.</p>

<p>The special <code/servlet-name/> <em/invoker/> is used to dispatch
servlets by class name.  For example, /servlets/test.HelloServlet.</p>

<deftable>
<tr><th>attribute<th>meaning<th>default
<tr><td><var/url-pattern/><td>A pattern matching the url:
<var//foo/*/>, <var//foo/>, or <var/*.foo/><td>n/a
<tr><td>url-regexp<td>A regular expression matching the url<td>n/a
<tr><td>servlet-name<td>The servlet name (can use replacement vars
like <var/$1/>)<td>n/a
<tr><td>path-info<td>Path info rewriting string (can use replacement
vars like <var/$1/>)<td>The standard path-info
<tr><td>servlet-class<td>The servlet's class<td>uses servlet-name
<tr><td>init-param<td>Initialization parameters<td>n/a
<tr><td>load-on-startup<td>Initializes the servlet when the server starts.<td>none
<tr><td>run-at<td>Times to execute the servlet automatically<td>none
<tr><td>case-sensitive<td>If true, the match is case-sensitive<td>true on Unix and false on Windows
</deftable>

<example>
&lt;caucho.com&gt;
&lt;web-app id='/'&gt;

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'/&gt;

&lt;servlet-mapping url-pattern='/hello.html'
                 servlet-name='hello'/&gt;

&lt;servlet-mapping url-pattern='/servlet/*'
                 servlet-name='invoker'/&gt;

&lt;servlet-mapping url-pattern='*.xtp'
                 servlet-name='com.caucho.jsp.XtpServlet'/&gt;

&lt;/web-app>
</example>

<p>The plugins use servlet-mapping to decide which URLs to send to Resin.
The following servlet-name value are special:</p>

<deftable>
<tr><td>plugin_match<td>The plugin will send the request to Resin, but
Resin will ignore the entry.  Use to get around regexp limitations. (Resin 1.2.2)
<tr><td>plugin_ignore<td>The plugin will ignore the request.  Use this
to define a sub-url the web server should handle, not Resin. (Resin 1.2.2)
</deftable>

</defun>

<defun title='servlet' version="Servlet 2.2">
<p>Defines a servlet alias for later mapping.  More details are in the
<a href='servlet-config.xtp'>servlet configuration</a> section.</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td>servlet-name<td>The servlet's name (alias)
<tr><td>servlet-class<td>The servlet's class (defaults to servlet-name)
<tr><td>init-param<td>Initialization parameters
<tr><td>load-on-startup<td>Initializes the servlet when the server starts.
<tr><td>run-at<td>Times to execute the servlet automatically (Resin 1.1)
<tr><td>init<td>Allows bean-style configuration.  See the <a href="servlet.xtp#init">servlet</a> page (Resin 2.1.3).
</deftable>

<p>The following example defines a servlet alias 'hello'</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet-mapping url-pattern='/hello.html'
                 servlet-name='hello'/&gt;

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'&gt;
  &lt;init-param title='Hello, World'/&gt;
&lt;/servlet&gt;

&lt;servlet servlet-name='cron'
         servlet-class='test.DailyChores'&gt;
  &lt;run-at&gt;3:00&lt;/run-at&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</defun>

<defun title='session-config' version="Servlet 2.2">
<p>Contains session configuration parameters.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>session-timeout<td>The session timeout in minutes<td>30 minutes
<tr><td>session-max<td>Maximum active sessions<td>4096
<tr><td>enable-cookies<td>Enable cookies for sessions (resin 1.1)<td>true
<tr><td>enable-url-rewriting<td>Enable URL rewriting for sessions (resin 1.1)<td>true
<tr><td>cookie-version<td>Version of the cookie spec for sessions (resin 1.2)<td>1.0
<tr><td>cookie-domain<td>Domain for session cookies (resin 1.2)<td>none
<tr><td>cookie-max-age<td>Max age for persistent session cookies (resin 2.0)<td>none
<tr><td>cookie-length<td>Maximum length of the cookie. (resin 2.1.1)<td>Integer.MAX_VALUE
<tr><td>file-store<td>Persistent sessions using a file store (resin 1.2)<td>none
<tr><td>jdbc-store<td>Persistent sessions using a JDBC store (resin 1.2)<td>none
<tr><td>tcp-store<td>Persistent sessions using a distributed ring (resin 1.2)<td>none
<tr><td>always-load-session<td>Reload data from the store on every request (resin 1.2)<td>false
<tr><td>always-save-session<td>Save session data to the store on every request (resin 1.2)<td>false
<tr><td>save-on-shutdown<td>Only save session when the application shuts down. (resin 1.2.3)<td>false
<tr><td>reuse-session-id<td>Reuse the session id even if the session has timed out. (resin 2.0.4)<td>true
<tr><td>ignore-serialization-errors<td>When persisting a session, ignore any values which don't implement java.io.Serializable<td>false
</deftable>

<p>By default, both <code/enable-cookies/> and
<code/enable-url-rewriting/> are true. To force url rewriting, you
would create a configuration like:</p>

<example>
&lt;web-app id='/'&gt;

  &lt;session-config
   enable-cookies='false'
   enable-url-rewriting='true'/&gt;

&lt;/web-app&gt;
</example>
</defun>

<defun title='session-timeout' version="Servlet 2.2">
<p>Sets the session timeout in minutes.  Sessions idle for
longer than <code/session-timeout/> are purged.</p>

<p><code/session-timeout/> must be contained in a
<code/session-config/> tag.</p>

<example>
&lt;web-app id='/dir'&gt;

  &lt;session-config session-timeout='120'/&gt;

&lt;/web-app&gt;
</example>

<p>Defaults to 30 minutes.</p>
</defun>

<defun title='session-max' version="Servlet 2.2">
<p>Sets the maximum number of active sessions.  Sessions are
stored in an LRU cache.  When the cache fills, the oldest sessions are
recovered.</p>

<p><code/session-max/> must be contained in a
<code/session-config/> tag.</p>

<example>
&lt;web-app id='/dir'&gt;

  &lt;session-config&gt;
     &lt;session-timeout id=120/&gt;
     &lt;session-max id=4096/&gt;
  &lt;/session-config&gt;

&lt;/web-app&gt;
</example>

<p>Defaults to 4096.</p>
</defun>

<defun title='taglib' version="Servlet 2.2">
<p>Configures a JSP 1.1 tag library.  See the <a
href='taglib.xtp'>tlb</a> configuration for details.</p>

<deftable>
<tr><th>Attribute<th>Description
<tr><td>taglib-uri<td>Matching uri for the tag library
<tr><td>taglib-location<td>Location for the tab library definition file.
</deftable>

<p>The location is relative to the class path. In the following example,
MyTag.tld should be in WEB-INF/classes/MyTag.tld.</p>

<example>
&lt;taglib taglib-uri='/mytag/test'
        taglib-location='/MyTag.tld'/>
</example>

<p>The JSP file will use the tag library as follows:</p>
<example>
&lt;%@ taglib prefix='x' uri='/mytag/test' %>
&lt;x:mytag/>
</example>

<p>By default, looks up all WEB-INF/*.tld and META-INF/*.tld.</p>
</defun>

<defun title='tcp-store' version="Servlet 2.2">
<p>Configure sessions to use a TCP-ring backing store. All the
&lt;srun> servers are arranged in a ring based on their order in the
resin.conf.  The <var/tcp-store/> will store the session based on that
ring order.</p>

<example title="Example Symmetrical configuration">
&lt;http-server>
  &lt;http id='a' port='80'/>
  &lt;srun id='a' host='host-a' port='6802'/>

  &lt;http id='b' port='80'/>
  &lt;srun id='b' host='host-b' port='6802'/>

  &lt;host id=''>
  &lt;web-app id=''>

  &lt;session-config>
    &lt;tcp-store/>
    &lt;always-load-session/>
  &lt;/session-config>

  &lt;/web-app>
  &lt;/host>
&lt;/http-server>
</example>

<p>The above example assumes the two hosts use an external load-balancer, like
a router load-balancer.</p>

<p>See <a href="sessions.xtp">distributed sessions</a> for more details.</p>

<p>Disabled by default.</p>
</defun>

<defun title='url-pattern' version="Servlet 2.2">
<p>Matches a set of URLs for servlet-mapping.</p>

<deftable>
<tr><th width='25%'>Pattern<th>Description
<tr><td>/foo/bar.html<td>Matches exactly the /foo/bar.html URL.
<tr><td>/foo/*<td>Matches /foo and any children
<tr><td>*.foo<td>Matches any URL with a .foo extension
<tr><td>/<td>Replaces the default servlet.
</deftable>

<p><var///> defines a default handler and <var//*/> defines a prefix handler.
<var//*/> will override extension handlers like <var/*.foo/>. <var///>
will only be used if no other pattern matches.</p>

<p>No default.  Either url-pattern or url-regexp is required.</p>
</defun>

<defun title="resource-ref" version="Servlet 2.2">
<p>Database pooling configuration. <var/resource-ref/> puts
the DataSource in a JNDI context and also in the ServletContext.
Each web-app can configure its own database pool.  Resin can also
share a common pool by putting the resource-ref outside the http-server.</p>

<p>More details are in the <a href='db-config.xtp'>database config</a>
page.</p>

<p>The driver can be in WEB-INF/lib or WEB-INF/classes, although it's
a better idea to put it in the global classpath or resin-2.0.x/lib.</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td>res-ref-name<td>JNDI path attribute to store the pool.  The path is relative to java:comp/env.
<tr><td>res-type<td>javax.sql.DataSource or javax.sql.XADataSource for database pools
<tr><td>init-param<td>initialization parameters (Resin 1.2)
<tr><td>init-class<td>Class containing init params (Map or Hashtable) (Resin 1.2.4)
<tr><td>bean-name<td>optional bean class to be used as a resource (Resin 1.2)
</deftable>

<p><var/init-param/> sets bean properties of the data source.
You can look at the com.caucho.sql.DBPool JavaDoc for its interface.
Unknown parameters are used to set the driver properties.  So you can
set any driver-specific property in the init-param.</p>

<deftable title="DBPool Init Parameters">
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>driver-name<td>JDBC driver class<td>required
<tr><td>url<td>JDBC url for the database<td>required
<tr><td>user<td>Database user<td>""
<tr><td>password<td>Database password<td>""
<tr><td>max-connections<td>Maximum number of allowed connections<td>20
<tr><td>max-idle-time<td>Maximum time an idle connection is kept in
the pool<td>30 sec
<tr><td>connection-wait-time<td>How long to wait for an idle connection (Resin 1.2.3)<td>10 minutes
<tr><td>max-overflow-connections<td>How many "overflow" connection are allowed if the connection wait times out.<td>0
<tr><td>ping-table<td>The database table used to "ping", checking that
the connection is still live.<td>false
<tr><td>ping-on-reuse<td>Test for live connections before allocating
them from the pool.<td>false
<tr><td>ping-on-free<td>Test for live connections before replacing
them in the pool.<td>false
<tr><td>ping-on-idle<td>Periodically test connections in the pool<td>false
<tr><td><var/any other/><td>calls DBPool.setProperty() to set driver properties.<td>none
</deftable>

<p>Here's a sample minimal resin.conf fragment to bind a DBPool-based
database to the JNDI path "java:comp/env/jdbc/test".</p>

<example title="Sample resin.conf fragment">
&lt;resource-ref>
  &lt;res-ref-name>jdbc/test&lt;/res-ref-name>
  &lt;res-type>javax.sql.DataSource&lt;/res-type>
  &lt;init-param driver-name="org.gjt.mm.mysql.Driver"/>
  &lt;init-param url="jdbc:mysql://localhost:3306/test"/>
&lt;/resource-ref>
</example>

<p>The following is a sample design pattern for getting new database
connections.  The <var/try ... finally/> block is very important for
making database connections reliable.</p>

<example title="Sample test.jsp to use database connections">
&lt;%@ page import='javax.sql.*, javax.naming.*, java.sql.*' %>
&lt;%
Context env = (Context) new InitialContext().lookup("java:comp/env");

DataSource source = (DataSource) env.lookup("jdbc/test");
Connection conn = source.getConnection();
try {
  ...
} finally {
  conn.close();
}
%>
</example>

</defun>

<defun title='path-mapping'>
<p>Maps url patterns to real paths.  If using a server like
IIS, you may need to match the server's path aliases.</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td><var/url-pattern/><td>A pattern matching the url:
<var//foo/*/>, <var//foo/>, or <var/*.foo/>
<tr><td>url-regexp<td>A regular expression matching the url
<tr><td>real-path<td>The prefix of the real path.  When used with url-regexp, allows substitution variables like <var/$1/>.
</deftable>

<example>
&lt;web-app id='/'&gt;

&lt;path-mapping url-pattern='/resin/*'
              real-path='e:\resin'/&gt;

&lt;path-mapping url-regexp='/~([^/]*)'
              real-path='e:\home\$1'/&gt;

&lt;/web-app&gt;
</example>
</defun>

<defun title='secure' version="Resin 2.0.6">
<p>Requires that the web-app be only accessed from a secure
connection, e.g. SSL.</p>
</defun>

<defun title="stderr-log" version="Resin 2.0.2">
<p>Configures the location for System.err for the current web-app.
The stdout-log may be put in the &lt;host> or &lt;http-server> context
to apply to all web-apps within that context.</p>

<example>
&lt;web-app>
  &lt;stdout-log href='$app-dir/WEB-INF/logs/stdout.log'/>
  ...
&lt;/web-app>
</example>

<deftable>
<tr><th>attribute<th>meaning
<tr><td>href<td>The location of the file.  Path variables may be used.
<tr><td>rollover-period<td>How often the log should be rotated.
<tr><td>rollover-size<td>The maximum size of the log before rotation.
<tr><td>timestamp<td>Timestamp before each line (Resin 2.0.3)
<tr><td>encoding<td>Character encoding
</deftable>

</defun>

<defun title="stdout-log" version="Resin 2.0.2">
<p>Configures the location for System.out for the current web-app.
The stdout-log may be put in the &lt;host> or &lt;http-server> context
to apply to all web-apps within that context.</p>

<example>
&lt;web-app>
  &lt;stdout-log href='$app-dir/WEB-INF/logs/stdout.log'/>
  ...
&lt;/web-app>
</example>

<deftable>
<tr><th>attribute<th>meaning
<tr><td>href<td>The location of the file.  Path variables may be used.
<tr><td>rollover-period<td>How often the log should be rotated.
<tr><td>rollover-size<td>The maximum size of the log before rotation.
<tr><td>timestamp<td>Timestamp before each line (Resin 2.0.3)
</deftable>

</defun>


<defun title='web-xml' version="Resin 2.0">
<p>Lets applications specify the web.xml file.</p>

<p><b>Default:</b> Defaults to web.xml.</p>
</defun>


</s2>
</s1>
<title>Authentication Configuration</title>

<objsummary/>

<example>
&lt;http-server>
  &lt;!-- Resin DBPool for the JdbcAuthenticator -->
  &lt;resource-ref>
    &lt;res-ref-name>jdbc/auth&lt;/res-ref-name>
    &lt;res-type>javax.sql.DataSource&lt;/res-type>
    &lt;init-param driver-name="org.gjt.mm.mysql.Driver"/>
    &lt;init-param url="jdbc:mysql://localhost:3306/test"/>
  &lt;/resource-ref>
     
  &lt;login-config auth-method='form'>
    &lt;form-login-config>
      &lt;form-login-page>/login.html&lt;/form-login-page>
      &lt;form-error-page>/error.html&lt;/form-error-page>
    &lt;/form-login-config>
    
    &lt;!-- Resin-specific JdbcAuthenticator -->
    &lt;authenticator id='com.caucho.http.security.JdbcAuthenticator'>
      &lt;password-query>
        SELECT password FROM LOGIN WHERE username=?
      &lt;/password-query>
    &lt;/authenticator>
  &lt;/login-config>
&lt;/http-server>
</example>


<section name=authenticator title='authenticator' version='Resin 1.1'>
<sum>Specifies a class to authenticate users.</sum>  This Resin-specific
option lets you control your authentication.  You can either create your 
own custom authenticator, or use Resin's JdbcAuthenticator.

<p/>The authenticator is responsible for taking the username and
password and returning a UserPrincipal if the username and password match.

<p/>Users wanting to implement an authenticator should look at the JavaDoc
for <a href="../javadoc/com/caucho/http/security/ServletAuthenticator.html">ServletAuthenticator</a>
and <a href="../javadoc/com/caucho/http/security/AbstractAuthenticator.html">AbstractAuthenticator</a>.
To protect your application from API changes, you should extend
AbstractAuthenticator rather than implementing Authenticator directly.

<subsection title='JdbcAuthenticator' version='Resin 2.0'>
<p/>The JdbcAuthenticator (com.caucho.http.security.JdbcAuthenticator),
asks a backend database for the password matching the user's name.
It uses the DataSource specified by the <var/pool-name/> option, or
the JNDI <var/java:comp/env/jdbc/db-pool/> by default.
<var/pool-name/> refers to a DataSource configured with
<a href="app-config.xtp#resource-ref">resource-ref</a>.

<p/>The following are the attributes for the JdbcAuthenticator:

<deftable>
<tr><td>pool-name<td>The database pool.  Looks in the application
attributes first, then in the global database pools.
<tr><td>password-query<td>A SQL query to get the user's password.  The
default query is given below.
<tr><td>cookie-auth-query<td>A SQL query to authenticate the user by a
persistent cookie.
<tr><td>cookie-auth-update<td>A SQL update to match
a persistent cookie to a user.
<tr><td>role-query<td>A SQL query to determine the user's role.  By
default, all users are in role "user", but no others.
<tr><td>password-digest<td>Specifies the digest algorithm and format (Resin 2.0.4)
</deftable>

<example>
&lt;!-- Resin-specific JdbcAuthenticator -->
&lt;authenticator id='com.caucho.http.security.JdbcAuthenticator'>
  &lt;pool-name>test&lt;/pool-name>
  &lt;password-query>
    SELECT password FROM LOGIN WHERE username=?
  &lt;/password-query>
  &lt;cookie-auth-query>
    SELECT username FROM LOGIN WHERE cookie=?
  &lt;/cookie-auth-query>
  &lt;cookie-auth-update>
    UPDATE LOGIN SET cookie=? WHERE username=?
  &lt;/cookie-auth-update>
  &lt;role-query>
    SELECT role FROM LOGIN WHERE username=?
  &lt;/role-query>
&lt;/authenticator>
</example>

</subsection>

<subsection title='PasswordDigest' version='Resin 2.0.4'>

Resin 2.0.4 adds the capability to store the digest of
a password instead of the password itself.  By using the password digest,
the application can avoid storing the password in a form that someone
can read.

<p/>Setting password-digest of any authenticator
extending AbstractAuthenticator will create a digest of the password.
The password-digest has two parts: the digest algorithm
and the encoding format.  "MD5-base64" is a typical digest format.

<p/>The authenticator will create a digest of the username and password.
Since that digest is a byte array, it is then converted to a string.
<def>
MD5(<var/username/>:<var/password/>)
</def>

<example title='Using password-digest with XmlAuthenticator'>
&lt;authenticator>
  &lt;class-name>com.caucho.http.security.XmlAuthenticator&lt;/class-name>
  &lt;init-param password-digest='MD5-base64'/>
  &lt;init-param user='harry:Syvian7bcPDKI261QvH9Cw:user'/>
&lt;/authenticator>
</example>

<p/>Of course, storing the digest password take a bit more work.  When
the user registers, the application needs to compute the
digest to store it.  You can use the PasswordDigest class to do that.

<example>
import com.caucho.http.security.PasswordDigest;

...
PasswordDigest digest = new PasswordDigest();
digest.setAlgorithm("MD5");
digest.setFormat("base64");

String password = digest.getDigestPassword("harry", "quidditch");
</example>

</subsection>

</section>

</section>
<s1 title="Basic Configuration">

<p>Because the flexibility of Resin's configuration can be overwhelming, we've
collected the most important configuration here.  Once you understand the
basic configuration, you can use it as a framework to attach more detailed
configuration as you need it.</p>

<p>You may want to look at:</p>
<ul>
<li><a href="../java_tut/conf-basic.xtp">basic configuration</a> in the
tutorial section.
<li>System-specific <a href='starting.xtp'>installation</a> information is in
a different section.
<li>An <a href='config-index.xtp'>index</a> of all configuration elements.
</ul>

<s2 title='Configuration Overview'>

<p>Configuring Resin involves configuring the following:</p>

<ul>
<li>ports and protocols: <a href="http-config.xtp#http">http</a>, ssl, <a href="http-config.xtp#srun">srun</a>
<li>resources (<a href="jndi.xtp">JNDI</a>): <a href="db-config.xtp">databases</a>, <a href="jms.xtp">JMS</a>, EJB, JNDI links
<li>virtual hosts and web-applications
<li><a href="app-config.xtp#classpath">classpaths</a>
<li><a href="servlet.xtp">servlets</a>: web.xml
</ul>

<p>Resin organizes classes and JNDI resources into a tree.
Each node in the tree inherits classes and JNDI resources from
its parents and adds it's own classes and resources.  So a database
<var/jdbc/test/> configured for the <var/foo.com/> virtual host would
be available for every web-app in the host.</p>

<figure src="jndi_tree.gif"/>

</s2>

<s2 title='Complete resin.conf Example'>

<p>The following creates a basic working configuration for a Resin standalone
configuration.  Resin will compile and load servlets and classes placed
in <var//home/ferg/public_html/WEB-INF/classes/> and jars placed in
in <var//home/ferg/public_html/WEB-INF/lib/>.</p>

<p>The url <var//servlet/test.MyServlet/> will invoke a servlet in 
<var//home/ferg/public_html/WEB-INF/classes/test/MyServlet.class/>.</p>

<p>The url <var//hello.jsp/> will run a JSP in
<var//home/ferg/public_html/hello.jsp/>.</p>

<example title="Example resin.conf">
&lt;caucho.com>
&lt;http-server>

&lt;http port='8080'/>

&lt;host id=''>
  &lt;doc-dir>/home/ferg/public_html&lt;/doc-dir>

  &lt;war-dir>webapps&lt;/war-dir>

  &lt;web-app id='/'>
  &lt;/web-app>
&lt;/host>

&lt;/http-server>
&lt;/caucho.com>
</example>

<p>Servlet configuration normally belongs in the web.xml in the WEB-INF
directory.  Resin-specific configuration, e.g. database configuration,
belongs in a resin.xml file in WEB-INF or in the resin.conf.</p>

<p>Because Resin merges the contents of resin.xml, web.xml, and resin.conf,
so you can put everything in the resin.conf if that makes your application
easier to maintain.</p>

<p>The following web.xml configures the special "invoker" servlet, which lets
you call servlets using the classname in the URL like
/servlet/qa.MyServlet.  In general, it's a better idea to create specific
servlet-mappings for each servlet for better security.</p>

<example title="Example /WEB-INF/web.xml">
&lt;web-app>
  &lt;servlet-mapping>
    &lt;url-pattern>/servlet/*&lt;/url-pattern>
    &lt;servlet-name>invoker&lt;/servlet-name>
  &lt;/servlet-mapping>
&lt;/web-app>
</example>

</s2>

<objsummary/>

<s2 title='http configuration'>

<defun title='caucho.com'>
<p>caucho.com is just a container for any Caucho configuration</p>
</defun>

<defun title='http-server'>
<p><a href='http-config.xtp'>http-server</a> contains all
configuration for the Resin server.</p>

<p>The most important configuration variable is <var/app-dir/>.
<var/app-dir/> configures the document root.  <var/app-dir/> can appear
in <var/&lt;http-server>/>, <var/&lt;host>/>, and <var/&lt;web-app>/>.
If it's not specified, it defaults to the parent.</p>

<example title='Apache Config'>
&lt;caucho.com>
&lt;http-server>

&lt;app-dir>/usr/local/apache/htdocs&lt;/app-dir>

  ...

&lt;/http-server>
&lt;/caucho.com>
</example>

<example title='IIS Config'>
&lt;caucho.com>
&lt;http-server>

&lt;app-dir>d:\inetpub\wwwroot&lt;/app-dir>

  ...

&lt;/http-server>
&lt;/caucho.com>
</example>

<example title='Resin Config'>
&lt;caucho.com>
&lt;http-server>

&lt;app-dir>doc&lt;/app-dir>

  ...

&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='http'>
<p>Configures the HTTP port for Resin to listen at.</p>

<deftable>
<tr><th>Attribute<th>Meaning<td>Default
<tr><td>port<td>TCP post to listen to<td>required
<tr><td>host<td>TCP interface to listen to<td>all interfaces
</deftable>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;http host='localhost' port='6802'/>
  ...
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='srun'>
<p>Configures a servlet runner port for Resin to listen at.</p>

<deftable>
<tr><th>Attribute<th>Meaning<td>Default
<tr><td>port<td>TCP post to listen to<td>required
<tr><td>host<td>TCP interface to listen to<td>all interfaces
</deftable>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;srun host='localhost' port='6802'/>
  ...
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='host'>
<p>Each http-server contains some
<a href='virtual-host.xtp'>virtual hosts</a>.  Most
configurations will use the default host.</p>

<example>
&lt;caucho.com>
&lt;http-server>

&lt;host id=''>
  ...
&lt;/host>

&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='web-app'>
<p>Each host contains some <a href='app-config.xtp'>web
applications.</a>  A web application is just a container for
some servlets.  It's closely related to the
javax.servlet.ServletContext.
Most configurations will use the default web-app.</p>

<example>
&lt;caucho.com>
&lt;http-server>

&lt;host id=''>
&lt;web-app id='/'>

...

&lt;/web-app>

&lt;/host>

&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

</s2>

<s2 title='Servlets'>

</ul>
<s1 title="Semi-Formal Configuration Description">

<p>Configuration is based on element-only XML like the Servlet 2.2
deployment descriptors.</p>

<p>For convenience, Resin allows any element to be used as an attribute.
This syntactic sugar makes the configuration files more readable and
maintainable.</p>

<p>Using the syntactic sugar, the following are equivalent:</p>
<deftable>
<tr><td>&lt;foo>&lt;bar>13&lt;/bar>&lt;/foo><td>canonical representation, but verbose
<tr><td>&lt;foo bar=13/><td>typical configuration
<tr><td>&lt;foo>&lt;bar id=13/>&lt;/foo><td>Useful for a key-based list.
</deftable>

<p>In general, the order is not important, but the nesting depth is.</p>

<p>The special element
<a href="resin-config.xtp#resin_include">resin:include</a> can be used in
any place to read in another file.</p>

<s1 title="Starting and Configuration">

<defun name='starting' title="Getting Started">
<p>Installation information, including Apache and IIS information, for Resin is
in <a href='starting.xtp'>Getting Started</a>.</p>
</defun>

<defun name='trouble' title="Troubleshooting">
<p>Some common problems starting Resin are solved in the <a
href='../faq/index.xtp'>troubleshooting FAQ.</a></p>
</defun>

<defun title="Basic Config">
<p>A minimal <a href='basic-config.xtp'>basic configuration</a> of resin.conf.
You should use this as a framework for understanding the more
detailed configuration.</p>
</defun>

<defun title="Semi-Formal Description">
<p><a href='config-sum.xtp'>Semi-Formal Description</a> of resin.conf.</p>
</defun>

<defun name='http-config' title="HTTP/Srun Config">
<p><a href='http-config.xtp'>HTTP and srun</a> configuration.  Running Resin
standalone and as srun shares 95% of the configuration.</p>
</defun>

<defun name='app-config' title="Application Config">
<p><a href='app-config.xtp'>Application</a> configuration.
Configuring applications follows the Servlet 2.2 deployment
descriptors.</p>
</defun>

<defun name='servlet-config' title="Servlet Config">
<p><a href='servlet-config.xtp'>Servlet</a> configuration.
Configuring servlets follows the Servlet 2.2 deployment
descriptors.</p>
</defun>

<defun name='resin-config' title="Generic Config">
<p><a href='resin-config.xtp'>Resin</a> (non-HTTP) configuration.</p>
</defun>

<defun name='ssl' title="SSL">
<p><a href="ssl-quick.xtp">SSL</a> configuration.</p>
</defun>

<defun name="virtual-host" title="Virtual Host">
<p><a href="virtual-host.xtp">Virtual Host</a> configuration.</p>
</defun>

<defun name="jndi" title="JNDI: Resource Configuration">
<p><a href="jndi.xtp">JNDI</a> configuration for system resources:
databases, JMS, EJB beans.</p>
</defun>

<defun name="db" title="Database Configuration">
<p><a href="db-config.xtp">Database</a> configuration.</p>
</defun>

<defun name="caching" title="Caching">
<p><a href="caching.xtp">Caching</a> hints.</p>
</defun>

<defun name="balance" title="Load Balancing">
<p><a href="balance.xtp">Reliability and load balancing</a> hints.</p>
</defun>
</s1><s1 title="Database Configuration">

<summarylist/>

<s2 title="Configuration" version="Servlet 2.2">

<p>Database configuration in the resin.conf uses <var/resource-ref/> to put
the DataSource in a JNDI context.  The <a href="jndi.xtp">JNDI
configuration</a> page gives a more general description of using JNDI
in Resin.  The DataSource is the JDBC 2.0 factory to get new
database connections.  Each web-app can configure its own database pool.
Hosts can share a database pool by putting the resource-ref in
the &lt;host> block and the entire server can share a database pool
by putting the &lt;database> in the &lt;http-server> block.</p>

<s3 title='Core Configuration'>

<p>The driver classes can be in WEB-INF/lib or WEB-INF/classes,
although it's a better idea to put it in the global classpath or resin2.0/lib.
</p>

<deftable title='Basic Init Parameters'>
<tr><th>Attribute<th>Meaning
<tr><td>name<td>JNDI path attribute to store the pool.  The path is relative to java:comp/env.
<tr><td>driver-class<td>The Java classname of the driver.
<tr><td>driver-url<td>The driver specific database url.
<tr><td>data-source<td>Use a defined PooledDataSource or XADataSource
instead of using the driver directly.
<tr><td>xa<td>whether the database is transaction-aware<td>false
<tr><td>driver-init<td>Extra parameters for the data source/driver.
</deftable>

<p>Here's a sample minimal resin.conf fragment to bind a DBPool-based
database to the JNDI path "java:comp/env/jdbc/test".  The examples
below show how that JNDI path will be used.</p>

<example title="Sample resin.conf fragment">
&lt;database>
  &lt;name>jdbc/test&lt;/res-ref-name>
  &lt;driver-class id="com.caucho.jdbc.mysql.Driver"/>
  &lt;driver-url id="jdbc:mysql-caucho://localhost:3306/test"/>
&lt;/database>
</example>

</s3>

<s3 title='Common Databases'>

<deftable>
<tr><th colspan=2>MySql (Caucho driver)
<tr><td>driver-class<td>com.caucho.jdbc.mysql.Driver
<tr><td>driver-url<td>jdbc:mysql-caucho://localhost:3306/test
<tr><th colspan=2>MySql (mm.mysql driver)
<tr><td>driver-class<td>org.gjt.mm.mysql.Driver
<tr><td>driver-url<td>jdbc:mysql://localhost:3306/test
<tr><th colspan=2>Oracle (thin driver)
<tr><td>driver-class<td>oracle.jdbc.driver.OracleDriver
<tr><td>driver-url<td>jdbc:oracle:thin:@localhost:1521:test
<tr><th colspan=2>Postgres
<tr><td>driver-class<td>org.postgresql.Driver
<tr><td>driver-url<td>jdbc:postgresql://localhost/test
</deftable>

</s3>

<s3 title='Pooling Configuration'>

<deftable title="Pooling Parameters">
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>max-connections<td>Maximum number of allowed connections<td>20
<tr><td>max-idle-time<td>Maximum time an idle connection is kept in
the pool<td>30 sec
<tr><td>max-active-time<td>Maximum time a connection allowed to be active
<td>6 hours
<tr><td>max-pool-time<td>Maximum time a connection is kept in
the pool<td>24 hours
<tr><td>connection-wait-time<td>How long to wait for an idle
connection (Resin 1.2.3)<td>10 minutes
<tr><td>max-overflow-connections<td>How many "overflow" connection are allowed if the connection wait times out.<td>0
</deftable>

<p>All times default to seconds, but can use longer time periods:</p>

<deftable title="Time suffixes">
<tr><td>s<td>seconds
<tr><td>m<td>minutes
<tr><td>h<td>hours
<tr><td>D<td>days
</deftable>

</s3>

<s3 title='Transactions'>

<p>Some applications, including any applications using EJB or Resin-CMP,
need transaction-aware database pools.  A transaction-aware database
pool will participate in any transaction, either handled by EJB or
using the UserTransactoin API.  A non-transaction-aware database will
ignore any transaction.</p>

<p>Transaction-aware databases use XADataSource for their
configuration.  Non-transaction-aware databases use DataSource
for the configuration.</p>

</s3>

<s3 title='Reliability Parameters (ping)'>

<p>Resin's database pool can test if the pooled database connection
is still alive by configuring a <var/ping/> query.  The database connection
may become stale if the database is restarted, possibly for maintenance.
Normally when a database connection is returned to the pool it will wait
there until the next request.  If the database goes down in the meantime,
the connection will become stale.  The <var/ping/> configuration can test
the database connection.</p>

<p>When pinging, Resin's DBPool will test a table specified with the
<var/ping-table/> parameter.  For a ping-table of my_table, Resin will
use a query like the following:</p>

<example>
SELECT 1 FROM my_table
</example>

<p>There are three ping modes: ping-on-free, ping-on-idle, and
ping-on-reuse.  ping-on-free tests the database when the connection is
returned to the database pool, ping-on-idle tests the connection when
it's in the idle pool, and ping-on-reuse tests the connection just
before using the connection.</p>

<deftable title="Reliability Parameters">
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>ping-table<td>The database table used to "ping", checking that
the connection is still live.<td>n/a
<tr><td>ping-on-reuse<td>Test for live connections before allocating
them from the pool.<td>false
<tr><td>ping-on-free<td>Test for live connections before replacing
them in the pool.<td>false
<tr><td>ping-on-idle<td>Periodically test connections in the pool<td>false
<tr><td>ping-interval<td>How often to ping for ping-on-idle<td>60s
</deftable>

<p>If the database had a table <var/my_table/>, you could
configure the pool to check idle connections as follows:</p>

<example>
&lt;resource-ref>
  &lt;res-ref-name>jdbc/test&lt;/res-ref-name>
  &lt;res-type>javax.sql.DataSource&lt;/res-type>
  &lt;init-param driver-name="com.caucho.jdbc.mysql.Driver"/>
  &lt;init-param url="jdbc:mysql-caucho://localhost:3306/test"/>
  &lt;init-param ping-table="my_table"/>
  &lt;init-param ping-on-idle="true"/>
&lt;/resource-ref>
</example>

<p>You can test the database reliability using the following steps:
</p>

<ol>
<li>Configure the database with ping-table and ping-on-idle.
<li>Execute some servlet that queries the database.
<li>Restart the database server.
<li>Execute another servlet that queries the database.
</ol>

</s3>

<s3 title='Caucho MySql Driver'>

<p>The experimental Caucho MySql driver includes one special init-param
to configure the character encoding:</p>

<deftable title='Properties'>
<tr><th>Property<th>Meaning<th>Default
<tr><td>encoding<td>character encoding<td>ISO-8859-1
</deftable>

</s3>

</s2>

<s2 title='Example Uses'>

<s3 title='Using Databases from a Servlet'>

<p>The following is a sample design pattern for getting new database
connections.  The <var/try ... finally/> block is very important.  Without
the close in the finally block, Resin's database pool can loose connections.
</p>

<example title="TestDatabase.java">
package test;

import java.io.*;

import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import javax.sql.*;

public class TestDatabase extends HttpServlet {
  private DataSource _pool;

  public void setDataSource(DataSource ds)
  {
    _pool = ds;
  }

  public void init()
    throws ServletException
  {
    try {
      if (_pool == null) {
        Context ic = (Context) new InitialContext();

        _pool = (DataSource) ic.lookup("java:comp/env/jdbc/test");
      }

      if (_pool == null)
        throw new ServletException("`jdbc/test' is an unknown DataSource");
    } catch (NamingException e) {
      throw new ServletException(e);
    }
  }

  public void doGet(HttpServletRequest req,
                    HttpServletResponse res)
    throws IOException, ServletException
  {
    res.setContentType("text/html");
    PrintWriter out = res.getWriter();

    Connection conn = null;
    try {
      conn = _pool.getConnection();

      Statement stmt = conn.createStatement();

      ResultSet rs = stmt.executeQuery("select NAME, PRICE from BROOMS");

      out.println("Brooms:&lt;br>");
      while (rs.next()) {
        out.print(rs.getString(1));
        out.print(" ");
        out.print(rs.getInt(2));
        out.println("&lt;br>");
      }

      rs.close();
      stmt.close();
    } catch (SQLException e) {
      throw new ServletException(e);
    } finally {
      try {
        if (conn != null)
          conn.close();
      } catch (SQLException e) {
      }
    }
  }
}
</example>

</s3>

<s3 title='Bean-style servlet configuration'>

<p>Using Resin 3.0's bean-style servlet configuration,
you can eliminate the JNDI lookup in the above servlet.  In an
&lt;init> block in the servlet configuration, you can use the
JSP expression language to assign a value to a bean-style set method.</p>

<p>In the following example, the &lt;data-source> configuration will
call the <code>setDataSource</code> method with the JNDI value at
<var>java:comp/env/jdbc/test</var>.</p>

<example title="web.xml for servlet">
&lt;web-app>
  &lt;database name="jdbc/test">
    &lt;driver-class id="com.caucho.jdbc.mysql.Driver"/>
    &lt;driver-url id="jdbc:mysql-caucho://localhost:3306/test"/>
  &lt;/database>

  &lt;servlet servlet-name='test'>
    &lt;servlet-class>test.TestDatabase&lt;/servlet-class>

    &lt;init>
      &lt;data-source>${jndi:lookup("java:comp/env/jdbc/test")}&lt;/data-source>
    &lt;/init>
  &lt;/servlet>

  &lt;servlet-mapping url-pattern='/test' servlet-name='test'/>
&lt;/web-app>
</example>

</s3>

<s3 title='Using Databases from a JSP'>

<p>The following is a sample design pattern for using database using
JSP.</p>

<example title="test.jsp">
&lt;%@ page import='java.sql.*, javax.sql.*, javax.naming.*' %>
&lt;%
Context ic = new InitialContext();
DataSource ds = (DataSource) ic.lookup("java:comp/env/jdbc/test");

Connection conn = ds.getConnection();

try {
  Statement stmt = conn.createStatement();
  ResultSet rs = stmt.executeQuery("select NAME, PRICE from BROOMS");

  %>&lt;h2>Brooms:&lt;/h2>&lt;%
    while (rs.next()) { %>
&lt;%= rs.getString(1) %> &lt;%= rs.getString(2) %>&lt;br>&lt;%
  }
} finally {
  conn.close();
}
%>
</example>

<p>In many cases, it will be easier to use a tag library to simplify
the JSP.</p>

</s3>
</s2>
</s1>
<s1 title="File Configuration">

<s2 title="RESIN_HOME">

<p>RESIN_HOME is the directory containing the Resin binaries and classes.
In the default configuration, RESIN_HOME will be the same as SERVER_ROOT,
i.e. the document directories and log files are based on RESIN_HOME.
A typical location for RESIN_HOME might be /usr/local/resin.</p>

<p>RESIN_HOME is controlled by the command-line and system environment when
Resin starts.  The heuristic for selecting RESIN_HOME is

<ol>
<li>-resin-home <var/dir/> command-line argument
<li>$RESIN_HOME system environment variable
<li>The parent directory of the starting binary.  bin/resin, bin/httpd,
or bin/httpd.sh will look at its own directory and then use the parent directory as RESIN_HOME.
</ol>

<p>The Resin binary will set the Java system property
resin.home to the value for RESIN_HOME, e.g. by setting
-Dresin.home=$RESIN_HOME.  If an application starts
the Resin main class directly, it should set the resin.
home system property.</p>

<deftable title="Contents of RESIN_HOME">
<tr><th>Directory/File<th>Description
<tr><td>bin/<td>Resin startup binaries
<tr><td>lib/<td>jar files automatically added to the system classpath.
Applications may add third-party library .jar files.
<tr><td>libexec/<td>JNI *.so files to be automatically loaded
<tr><td>classes/<td>Optional directory of classes to be added to the system classpath.  (Applications should use WEB-INF/classes instead.)
<tr><td>conf/<td>Directory containing configuration files when RESIN_HOME is the same as SERVER_ROOT.
<tr><td>conf/resin.conf<td>The main Resin configuration file when RESIN_HOME is the same as SERVER_ROOT.
<tr><td>doc/<td>Document root when RESIN_HOME is the same as SERVER_ROOT for the default virtual host.
<tr><td>webapps/<td>War expansion directory when RESIN_HOME is the same as SERVER_ROOT for the default virtual host.
<tr><td>log/<td>Log directory when RESIN_HOME is the same as SERVER_ROOT.
</deftable>

</s2>

<s2 title="SERVER_ROOT">

<p>SERVER_ROOT is the directory containing the user's
configuration, documents, and log files.  By default, SERVER_ROOT is
the same as RESIN_HOME, but sophisticated users will create a
separate directory from the Resin binaries.  For example, an ISP
might have a separate SERVER_ROOT for each user's JVM.  A typical
location for SERVER_ROOT might be /usr/local/webroot.</p>

<p>SERVER_ROOT is controlled by the command-line when Resin starts.
The heuristic for selecting SERVER_ROOT is:</p>

<ol>
<li>The value of &lt;root-dir> in the &lt;http-server> section of
the resin.conf.
<li>-server-root <var/dir/> command-line argument
<li>The value of RESIN_HOME.
</ol>

<deftable title="Contents of SERVER_ROOT">
<tr><th>Directory/File<th>Description
<tr><td>conf/<td>Directory containing the resin.conf configuration file.
<tr><td>conf/resin.conf<td>The main Resin configuration file.
<tr><td>cache/<td>Directory Resin's cache files.
<tr><td>doc/<td>Document root for the default virtual host.
<tr><td>webapps/<td>War expansion directory for the default virtual hosts.
<tr><td>log/<td>Log directory.
<tr><td>WEB-INF/<td>Application classes and jars common to all virtual
hosts.
<tr><td><var/foo.com/>/<td>Root directory for a virtual host.
</deftable>

</s2>

<s2 title="virtual host root-dir">

<p>Each virtual host has its own root directory.  The root directory
contains virtual host's documents, war directory, and logs.</p>

<p>The virtual host's directory is configured in the resin.conf.
<a href="http-config.xtp#root-dir">root-dir</a> configures the
virtual host's root.  <a href="http-config.xtp#doc-dir">doc-dir</a>
configures the virtual host's document directory.</p>

<deftable title="Contents of the virtual host">
<tr><th>Directory/File<th>Config<th>Description
<tr><td>webapps/<td><a href="http-config.xtp#war-dir">war-dir</a><td>.war expansion directory.
<tr><td>webapps/WEB-INF/<td><a href="http-config.xtp#war-dir">war-dir</a><td>Common classes for the virtual host
<tr><td>doc/<td><a href="http-config.xtp#doc-dir">doc-dir</a><td>document directory.
<tr><td>log/access.log<td><a href="http-config.xtp#access-log">access-log</a><td>per-virtual host access logs
<tr><td>log/error.log<td><a href="http-config.xtp#error-log">error-log</a><td>per-virtual host error logs
<tr><td>log/stdout.log<td><a href="app-config.xtp#stdout-log">stdout-log</a><td>per-virtual host System.out
<tr><td>log/stderr.log<td><a href="app-config.xtp#stderr-log">stderr-log</a><td>per-virtual host System.err
</deftable>

</s2>

<s2 title="webapps (war-dir)">

<p>The webapps directory automatically expands .war and .ear files.</p>

<p>Each .war file will be expanded into
a web-app as a directory under the webapps directory.  webapps/foo.war will
expand into webapps/foo.  /foo will then be a web-app for the virtual
host.  So the URL might be http://www.bar.com/foo.</p>

<p>Each .ear file will expand its jars and .war files.  The jars will go
into webapps/WEB-INF/lib.  The .wars will be expanded into webapps.</p>

<p>The resin.conf configures the webapps directory with
the <a href="http-config.xtp#war-dir">war-dir</a> configuration.</p>

<example title="Configuring the war-dir">
&lt;host id="www.bar.com">
  &lt;root-dir>bar.com&lt;/root-dir>
  &lt;war-dir>webapps&lt;/war-dir>
&lt;/host>
</example>

<s3 title=".war file">

<p>A .war file is a packaged Servlet application. It's just a renamed
.jar file of the web-app directory tree. Resin provides a special
webapps directory which will automatically expand .war files,
configured by the <a href="http-config.xtp#war-dir">war-dir</a>
attribute in the resin.conf's host configuration.</p>

<p>Placing a foo.war in webapps/foo.war will prompt Resin to expand
foo.war into webapps/foo/*. Resin will automatically create a new
application browsable at the URL http://localhost:8080/foo</p>

<p>You can also use the &lt; war-dir> for development. Just creating a
webapps/bar directory will create an application browsable at
http://localhost:8080/bar. A small warning, though, any bar.war placed
in webapps will delete and replace your webapps/bar directory.</p>

<p>The special .war file ROOT.war can be used to configure the 'root'
web-app, i.e. the web-app with no context path. webapps/ROOT is
browsed with http://localhost:8080.</p>

<p>Resin always handles all files in a war, even when Resin is used
with another webserver like Apache.</p>

</s3>

</s2>

<s2 title="web-app directory">

<p>Each web application has its own document directory.
The files in that directory are served as static file.  The WEB-INF
subdirectory contains classes and configuration files for the web-app.</p>

<p>Web applications are either configured implicitly by the
webapps directory or explicitly in the resin.conf.  Any .war files in the
webapps directory will create a web application.  <var/foo.war/> will
expand into the web-app directory <var/webapps/foo/>.  The WEB-INF
directory is in <var/webapps/foo/WEB-INF/>.</p>

<p>Web applicatoins configured in the resin.conf can be placed anywhere
in the filesystem using the <var/app-dir/> tag.</p>

<example title="Explicit web-app in resin.conf">
&lt;host id='www.foo.com'>
  &lt;web-app id='/bar' app-dir='/opt/bar'/>
&lt;/host>
</example>

<p>The web-apps can also be configured using regular expressions.
For example, <var//~ferg/> may translate into a web-app in
/home/ferg/public_html.</p>

<example title="Regexp web-app in resin.conf">
&lt;host id=''>
  &lt;web-app url-regexp='/~([^/]*)'>
    &lt;app-dir>/home/$1/public_html&lt;/app-dir>
  &lt;/web-app>
&lt;/host>
</example>

<deftable title="web-app directory contents">
<tr><th>Directory/File<th>Description
<tr><td><var/test.html/><td>Static HTML file served to user
<tr><td><var/foo.jsp/><td>JSP file served to user
<tr><td>WEB-INF/<td>Directory for classes and servlets
</deftable>

</s2>

<s2 title="WEB-INF">

<p>The WEB-INF contains the classes, jars, and configuration files
for the web application.  WEB-INF is at the root of the web-app's
document directory.</p>

<deftable title="Contents of WEB-INF">
<tr><th>Directory/File<th>Description
<tr><td>classes/<td>Directory containing .class files
<tr><td>lib/<td>Directory containing .jar files
<tr><td>tld/<td>Directory containing tag library configuration files.
<tr><td>sessions/<td>Directory containing persistent sessions.
<tr><td>work/<td>Directory containing Resin's automatically
generated java and class files for JSP, XSL, and EJB.
<tr><td>tmp/<td>Temporary directory for the web-app.
<tr><td>web.xml<td>Servlet standard configuration file for the web-app.
<tr><td>resin-web.xml<td>Resin-specific configuration.
<tr><td><var/foo.ejb/><td>Resin-specific EJB configuration files.
</deftable>

<s3 title="WEB-INF for hosts and http-server">

<p>Hosts and the http-server may also have a WEB-INF directory.
The host's WEB-INF will be shared for all web-apps in the virtual host.
The http-server's WEB-INF will be shared for all virtual hosts in
the server.</p>

<p>The host's WEB-INF directory is in webapps/WEB-INF.
The http-server's WEB-INF is in SERVER_ROOT/WEB-INF.</p>

<p>Sites will typically use the host's WEB-INF to share resources,
EJB servers, or single-signon authenticators for all applications in a
host or in the server.</p>

</s3>

</s2>

<s2 title="path-mapping (aliasing)">

<p>In the web.xml file, directories and files can be aliased using
the <a href="app-config.xtp#path-mapping">path-mapping</a> directive.

<example title="aliasing /images to /opt/images">
&lt;web-app>
  &lt;path-mapping>
    &lt;url-pattern>/images/*&lt;/url-pattern>
    &lt;real-path>/opt/images&lt;/real-path>
  &lt;/path-mapping>
&lt;/web-app>
</example>

</s2>

<s2 title="Path Variable expansion">

<p>Paths in configuration variables can use path and
regular expression variables.</p>

<deftable>
<tr><th>Variable<th>Value
<tr><td>$server-root<td>The root of the server instance.  Same as the -server-root argument.
<tr><td>$server-doc<td>The document root for the server instance.
<tr><td>$host-root<td>The root directory of the enclosing &lt;host>
<tr><td>$host-doc<td>The document directory of the enclosing &lt;host>
<tr><td>$app-dir<td>The app-dir of the enclosing &lt;web-app>
<tr><td>$host0 ... $host9<td>Regular expression replacement from a host url-regexp.
<tr><td>$app0 ... $app9<td>Regular expression replacement from a web-app url-regexp.
<tr><td>$0 ... $9<td>Regular expression replacement for the containing context (host or web-app)
<tr><td>$<var/foo/><td>Java property value from System.getProperty("foo")
</deftable>

</s2>

</s1>
<s1 title="Servlet and Host Configuration">

<p>HTTP and Srun configuration is identical except for load balancing
(<var/srun/> and <var/srun-backup/>.)</p>

<p>HTTP configuration follows the Servlet 2.2 deployment descriptors.
The nesting depth is important, but order is generally not important.
In the sections that follow, the section
header tells where the attribute belongs.  For example, the
<var/servlet-mapping/> configuration in
<var/caucho.com/http-server/host/web-app/> looks like:</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;host id=''>
      &lt;web-app id='/'>
        &lt;servlet-mapping url-pattern='/test' .../>
      &lt;/web-app>
    &lt;/host>
  &lt;/http-server>
&lt;/caucho.com>
</example>

<p>Most of the interesting configuration belongs in
<a href="app-config.xtp">web-app</a>.  For example, <var/servlet-mapping/>
belongs in a <var/web-app/> element, but
<var/thread-max/> belongs in the top-level <var/http-server/> element.</p>

<p>The server contains a number of <var/host/> elements and each
<var/host/> contains <var/web-app/> elements.  Each <var/host/>
configures a virtual host and each <var/web-app/> configures an
application.
</p>

<example title='Full Configuration'>
&lt;caucho.com>
&lt;http-server>
  &lt;host id='gryffindor.caucho.com' app-dir='gryffindor'>
    &lt;web-app id='/'>
      &lt;servlet-mapping .../>
      ...
    &lt;/web-app>
    
    &lt;web-app id='/test' app-dir='/usr/local/test'>
      ...
    &lt;/web-app>
  &lt;/host>
  
  &lt;host id='slytherin.caucho.com' app-dir='slytherin'>
    ...
  &lt;/host>

  ...
&lt;/http-server>
&lt;/caucho.com>
</example>

<objsummary/>

<s2 title='http-server'>

<defun name='http-server' title='http-server'>

<p>Configuration for the servlet engine.</p>

<p>Any &lt;resource-ref> resource configured in &lt;http-server> is
shared for all virtual hosts and web-apps in the server.  So a database
or EJB server configured in the &lt;http-server> will be shared
for all virtual hosts.</p>

<p>Default application tags like
&lt;servlet-mapping> may appear in the &lt;http-server> section.  These
tags will be defaults for the contained &lt;web-app> and &lt;host>.

</defun>

<defun title='alternate-session-url-prefix' version="Resin 2.0.5">
<p>Configures an alternate URL prefix to be used for /~J=xxx/test.jsp
style url-rewriting.  There is no default.</p>

<p>If alternate-session-url-prefix is configured, URL rewriting will
add the session to the beginning of the URL as a path prefix instead of the
standard ;jsessionid= suffix.  For clients like mobile devices with limited
memory, this will allow careful web designers to minimize the page size.
</p>

<example>
...
&lt;http-server>
  &lt;alternate-session-url-prefix>/~J=&lt;/alternate-session-url-prefix>
  ...
</example>

</defun>

<defun title='cache' version='Resin 1.1'>
<p>Activates the memory cache with a specified size.  Resin's
cache acts as a proxy cache.  Pages with <var/expires/> headers will
be cached, avoiding expensive Java or Database processing.</p>

<p>To activate caching, you must add a cache directive.  By default,
caching is disabled.</p>

<p>The cache combines memory and file caching.  The most referenced
pages are served out of memory and the rest are served from the
filesystem.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>dir<td>File directory to store the cached pages<td>resin1.2/cache
<tr><td>entries<td>Number of entries allowed in the memory cache<td>16386
<tr><td>size<td>Size in kilobytes of the memory<td>1024
<tr><td>enable<td>true or false to disable<td>true
</deftable>

<p>For example, a page created by several sophisticated and slow
database queries may only change every 15 minutes.  If that page sets
its expires header, Resin can serve the generated page as fast as a
static page.</p>

<p><b>Default:</b> by default, cache is disabled.</p>

</defun>

<defun title='error-log'>
<p>Specifies the file for error logging.  The log is relative
to $RESIN_HOME.  You can use the special path <var/$app-dir/> to make
the log relative to the host, e.g. <var/$app-dir/WEB-INF/log/access.log/>.
</p>

<example>
&lt;caucho.com&gt;
&lt;http-server error-log='log/error.log'&gt;

&lt;host id='foo.com' error-log='log/foo.log'&gt;
 ...
&lt;/host&gt;

&lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<deftable title="error-log attributes">
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>encoding<td>character encoding<td>The JVM's default
<tr><td>href<td>The log's filename<td>required
<tr><td>rollover-period<td>How often the log should be rotated<td>never
<tr><td>rollover-size<td>How large the log can be before rotating<td>infinite
<tr><td>timestamp<td>Format for a timestamp before each entry<td>none
</deftable>

<p><b>Default:</b> By default, a host's error log will use an
error-log defined in http-server.</p>
</defun>

<defun name=error-page title='error-page' index='error-page'>
<p>The url to display if the web server can't connect to Resin.
This is a special case of <a href='app-config.xtp#error-page'>error-page</a>
in the web-app configuration.</p>

<p>The Apache and IIS plugins use this special error-page directive to
display a custom error page when the web server can't connect to Resin.
The location must be an absolute path understandable to the web server.
</p>

<example>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;error-page exception-type='connection'
                location='/connection_error.html'/&lt;>
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

</defun>

<defun title='forbid-host' version='Resin 2.0.3'>
<p>Selects a list of IPs that are forbidden.</p>

<example>
&lt;http-server>
  &lt;forbid-host>192.168.0.1&lt;/forbid-host>
  &lt;forbid-host>192.168.0.2&lt;/forbid-host>
  ...
&lt;/http-server>
</example>

<p>forbid-host is implemented by com.caucho.http.security.ForbidHost.  It is
stored in JNDI as java:comp/env/caucho/forbid-host.  An intelligent
log might detect a denial of service attack and dynamically forbid the host.
</p>
</defun>

<defun name=ignore title='ignore-client-disconnect' version='Resin 1.2.3'>
<p>Ignores ClientDisconnectionExceptions thrown when the browser
disconnects.</p>

<example>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;ignore-client-disconnect>false&lt;/ignore-client-disconnect>

    ...
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<p>False by default, throws exceptions on disconnects.</p>
</defun>

<defun title='global-system-properties' version="Resin 2.0.5">
<p>Determines if system-properties are classloader specific or global.</p>

<p>By default, Resin's web-apps and hosts have isolated system properties.
So System.getProperty("test") in host foo.com might return a different value
from System.getProperty("test") in host bar.com.  Usually, this is the
correct solution to prevents hosts and web-apps from affecting each other.
Specialized applications may want to disable this feature however.</p>

<example>
...
&lt;http-server>
  &lt;global-system-properties>true&lt;/global-system-properties>
  ...
&lt;/http-server>
</example>

<p><b>Default:</b> The default value is false.</p>
</defun>

<defun title='host'>
<p>Defines a virtual host.  If no hosts are specified, or if a
request doesn't match a host, configuration in http-server will be
used instead.</p>

<p>The id may contain a list of hosts.  Any host in the list will
match.</p>

<p>See <a href='app-config.xtp'>application configuration</a> for
servlet configuration.</p>

<p>Hosts can use <var/regexp/> instead of <var/id/> to dynamically create
new hosts.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>The host name<td>required
<tr><td>regexp<td>A regular expression matching hosts.<td>none
<tr><td>app-dir<td>The root directory of the host (can use replacement vars)
<td>use http-server app-dir
</deftable>

<p>Any &lt;resource-ref> resource configured in &lt;http-server> is
shared for all virtual hosts and web-apps in the server.  So a database
or EJB server configured in the &lt;http-server> will be shared
for all virtual hosts.</p>

<p>Default application tags like
&lt;servlet-mapping> may appear in the &lt;http-server> section.  These
tags will be defaults for the contained &lt;web-app> and &lt;host>.

<example>
&lt;caucho.com&gt;
&lt;http-server&gt;

&lt;host id='www.foobar.com, foobar.com'
      app-dir='foobar/docs'&gt;
  &lt;web-app id='/'>
    &lt;servlet-mapping url-pattern='/servlets/*'
                     servlet-name='invoker'/&gt; 
  &lt;/web-app>
&lt;/host&gt;

&lt;host regexp='([^.]*).users.com'
      app-dir='/home/$1/public_html'&gt;
  ...
&lt;/host&gt;


&lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<note>Only the Resin Java process understands regexps.  Because mod_caucho,
isapi_srun and the other web server plugins don't understand the regexps,
you may need to do additional work to make the web server send the request
to Resin.</note>

<p><b>Default:</b> If the <var/id/> attribute is null or '*', the &lt;host>
will be used as the default configuration for any virtual host that doesn't
match a specific &lt;host> block.</p>

</defun>

<defun title='http' version="Resin 1.2">
<p>Defines a HTTP or SSL port for the standalone server.</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td>id<td>http identifier name
<tr><td>host<td>The listening host
<tr><td>port<td>The listening port
<tr><td>virtual-host<td>Virtual host to select a <a href="#host">host</a> block.
<tr><td>ssl<td>enable ssl
<tr><td>key-store-type<td>JSSE Type of the key store (default jks)
<tr><td>key-store-file<td>JSSE File containing the certificates
<tr><td>key-store-password<td>JSSE Password to read the certificates
<tr><td>certificate-file<td>OpenSSL certificate (Resin 2.0.5)
<tr><td>certificate-key-file<td>OpenSSL key certificate (Resin 2.0.5)
<tr><td>certificate-key-password<td>OpenSSL key password (Resin 2.1.1)
<tr><td>crypto-device<td>OpenSSL engine (Resin 2.0.5)

<tr><td>thread-max<td>Maximum number of live threads.<td>200
<tr><td>thread-min<td>Minimum number of live threads.<td>5
<tr><td>thread-keepalive<td>Number of keepalive threads<td>100
<tr><td>request-timeout<td>Max time for a request, after this the request
will be interrupted.<td>30 sec
<tr><td>listen<td>Value of the socket listen parameter<td>5
<tr><td>accept-buffer-size<td>Number of sockets in the accept buffer.<td>256
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>

<example title='Basic HTTP configuration'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;http port='8080'&gt;
    ...
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<example title='JSSE configuration'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;http port='8443'&gt;
      &lt;ssl>true&lt;/ssl>
      &lt;key-store-type>pkcs12&lt;/key-store-type>
      &lt;key-store-file>keys/server.p12&lt;/key-store-file>
      &lt;key-store-password>changeit&lt;/key-store-password>
    &lt;/http>
    ...
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

</defun>

<defun name=ping title='ping' index='ping'>
<p>Specifies a list of URLs to test to check the webserver's uptime.
Ping adds reliability to a web site.  It launches a separate thread to
check if a list of URLs return valid results, i.e. HTTP status 200.  If the
URLs fail after repeated attempts, Resin will exit.  The parent process,
either wrapper.pl or the NT service, will automatically restart Resin.
</p>

<p>Because the ping thread is in the same JVM as the web server,
ping cannot detect all failure types.  In particular, if the JDK itself
freezes, ping can do nothing.  It can detect problems like deadlocks
or database connection overflows or memory leaks.
</p>

<p>The URLs listed in the &lt;ping> should exercise the important operations
in the application.  For example, it should at least access the database.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>url<td>URL to test for failure<td>required
<tr><td>sleep-time<td>time to sleep between pings.<td>15 min
<tr><td>retry-count<td>how many times to retry failures before restarting.<td>3
<tr><td>retry-time<td>how long to sleep between failures.<td>1 sec
<tr><td>class-name<td>specify a custom ping class (Resin 2.0.3)<td>com.caucho.http.admin.PingThread 
<tr><td>socket-timeout<td>how long the socket should wait for a response before timing out.<td>10s
</deftable>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;ping>
    &lt;sleep-time>1m&lt;/sleep-time>
    &lt;retry-count>3&lt;/retry-count>
    &lt;retry-time>1s&lt;/retry-time>
    &lt;url>http://localhost:8080/test.jsp&lt;/url>
  &lt;/ping>

  ...
&lt;/http-server>
&lt;/caucho.com>
</example>

<p>Custom ping classes must extend com.caucho.http.admin.PingThread.
For example, the PingMailer will mail when the PingThread fails.
</p>

<deftable title='PingMailer additional Attributes'>
<tr><td>Attribute<th>Meaning<th>Default
<tr><td>mail-to<td>Recipient of the warning mail<td>required
<tr><td>mail-from<td>Sender of the mail<td>the user of the Resin process
<tr><td>mail-subject<td>The subject of the mail<td>"Resin ping has failed"
</deftable>

<example>
&lt;ping>
  &lt;class-name>com.caucho.http.admin.PingMailer&lt;/class-name>
  &lt;sleep-time>1m&lt;/sleep-time>
  &lt;retry-count>3&lt;/retry-count>
  &lt;retry-time>1s&lt;/retry-time>
  &lt;url>http://localhost:8080/test.jsp&lt;/url>

  &lt;mail-to>webmaster@localhost&lt;/mail-to>
&lt;/ping>
</example>

<p>No default.</p>
</defun>

<defun title='srun' version='Resin 1.1'>
<p>Defines multiple client machines for load balancing.  This
directive used by the web server (Apache or IIS) and by the Java portion
of Resin.</p>

<p>Each <var/srun/> directive adds a new client to receive load
balanced requests.  With Resin 1.2, the resin.conf must have at least
one &lt;srun> or &lt;http> element.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>srun identifier name.<td>none
<tr><td>host<td>The host name of the client srun.<td>all interfaces
<tr><td>port<td>The port name of the client srun.<td>none
<tr><td>connect-timeout<td>How long to wait for a connection from the
web server to the Resin srun before giving up.<td>30 sec
<tr><td>live-time<td>How long the web-server/srun connection should stay live.<td>10 sec
<tr><td>dead-time<td>How long before checking that a srun has come back up.<td>5 sec
<tr><td>timeout<td>How long the load balancing server should wait for a response.<td>30 sec

<tr><td>thread-max<td>Maximum number of live threads.<td>200
<tr><td>thread-min<td>Minimum number of live threads.<td>5
<tr><td>thread-keepalive<td>Number of keepalive threads<td>100
<tr><td>request-timeout<td>Max time for a request, after this the request
will be interrupted.<td>30 sec
<tr><td>listen<td>Value of the socket listen parameter<td>5
<tr><td>accept-buffer-size<td>Number of sockets in the accept buffer.<td>256
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>

<example title='Load balance over three machines'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;srun id='a' host='host1.caucho.com' port='6802'&gt;
    &lt;srun id='b' host='host2.caucho.com' port='6802'&gt;
    &lt;srun id='c' host='host2.caucho.com' port='6803'&gt;
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<p>To start srun 'a' use a command line like</p>
<example>
unix> <var/srun.sh -server a/>
Resin 2.1.0
srun listening to host1.caucho.com:6802
</example>

<p>On Unix, when starting a daemon, you'll need to specify a unique pid file.
</p>

<example>
unix> <var/srun.sh -server a -pid a.pid start/>
</example>
</defun>

<defun title='srun-backup' version='Resin 1.1'>
<p>Defines backup client machines for load balancing.  This
directive is only picked up by the load balancer.  The
Java portion of Resin treats a &lt;srun-backup> like any other srun.
Normally, &lt;srun-backup> is only used when each web server has
a primary &lt;srun> in preference to other &lt;srun> JVMs.
See the <a href="balance.xtp">load-balancing</a> section
for more information.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>srun identifier name<td>none
<tr><td>host<td>The host name of the client srun<td>all interfaces
<tr><td>port<td>The port name of the client srun<td>none
<tr><td>connect-timeout<td>How long to wait for a connection from the
web server to the Resin srun before giving up.<td>30 sec
<tr><td>live-time<td>How long a keepalive connection will remain alive before
closing.<td>5 sec.
<tr><td>dead-time<td>How long to treat a non-responding srun before trying again.<td>5 sec.
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>
</defun>

<defun title='thread-keepalive'>
<p>Number of threads to be used in keepalive requests.  When
Resin is used in combination with a web server, like Apache or IIS,
Resin will reuse the socket connection to that web server if
possible.  <var/thread-keepalive/> specifies the number of theads that
can be used in these keepalive connections.
</p>

<p>Defaults to 100.</p>
</defun>

<defun title='thread-max'>
<p>Maximum number of request-handling threads.</p>

<p>Defaults to 200.</p>
</defun>

</s2>

<!--
   - host section
  -->

<s2 title='host'>

<defun title='access-log'>
<p>Specifies the access log file.  The log is relative to
$RESIN_HOME.  You can use the special path <var/$app-dir/> to make
the log relative to the host, e.g. <var/$app-dir/WEB-INF/log/access.log/>.
</p>

<deftable>
<tr><th>Attribute<th>Description<th>Default
<tr><td>id<td>The access log path.<td>required
<tr><td>format<td>Access log format.<td>see below
<tr><td>class-name<td>Class implementing AbstractAccessLog for custom logging.
<tr><td>rollover-period<td>how often to rollover the log.
Normally in days (15D), weeks (2W) or months (1M).<td>none
<tr><td>rollover-size<td>max size of the log before a rollover.<td>10 meg
<tr><td>archive-format<td>format the name of the archive file.<td>n/a
</deftable>

<p>The <var/rollover-period/> variable controls how often the access log
will be rotated.  When the time runs out, Resin will move the old log
file to a timestamped one, e.g. access.log20001114.  Rollovers happen
at midnight in the local time if the time period is a day or longer.
</p>

<p>The access log formatting variables follow the Apache variables:</p>

<deftable>
<tr><td>%b<td>result content length
<tr><td>%h<td>remote IP addr
<tr><td>%{<var/xxx/>}i<td>request header <var/xxx/>
<tr><td>%{<var/xxx/>}o<td>response header <var/xxx/>
<tr><td>%{<var/xxx/>}c<td>cookie value <var/xxx/>
<tr><td>%n<td>request attribute
<tr><td>%r<td>request URL
<tr><td>%s<td>status code
<tr><td>%{<var/xxx/>}t<td>request date with optional time format string.
<tr><td>%T<td>time of request in seconds
<tr><td>%u<td>remote user
<tr><td>%U<td>request URI
</deftable>

<p>The default format is:</p>

<def>
"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""
</def>

<example>
&lt;host id=''>

  &lt;access-log id='log/access.log'&gt;
    &lt;rollover-period>2W&lt;/rollover-period>
  &lt;/access-log>

 ...

&lt;/host&gt;
</example>

<p>If the web-app doesn't specify an access-log, it will use the host's
access-log.</p>
</defun>

<defun title='doc-dir' version="Resin 2.1">
<p>Specifies the document directory for the &lt;host>
or &lt;http-server>.</p>

<p>&lt;doc-dir> values may use use system properties,
like <var/$server.root/> or <var/$resin.home/> or even <var/$foo/>.</p>

<example>
&lt;host id=''&gt;
  &lt;doc-dir>/opt/web/default_host&lt;/doc-dir>

 ...

&lt;/host&gt;
</example>

<p><b>Default:</b> Defaults to &lt;root-dir> if specified.  Otherwise
&lt;host> defaults to the document directory of the &lt;http-server>
&lt;http-server> defaults to the server-root.</p>
</defun>

<defun title='root-dir' version="Resin 2.1">
<p>Specifies the root directory for the &lt;host>
or &lt;http-server>.  Non-document data like log files
and war directories are based off the root directory.</p>

<p>&lt;root-dir> values may use use system properties,
like <var/$server.root/> or <var/$resin.home/> or even <var/$foo/>.</p>

<example>
&lt;host id=''&gt;
  &lt;root-dir>/opt/web/default_host&lt;/root-dir>
  &lt;doc-dir>doc&lt;/doc-dir>

 ...

&lt;/host&gt;
</example>

<p><b>Default:</b> Hosts defaults to the &lt;root-dir> of
the &lt;http-server>.  &lt;http-server> defaults to the server-root.
</p>
</defun>

<defun title=session-cookie version="Resin 2.1.2">
<p>Configures session cookie.  The default is "JSESSIONID".</p>
</defun>

<defun title=session-url-prefix version="Resin 2.0">
<p>Configures the URL prefix to be used for url-rewriting.  The
default is ";jsessionid=".</p>
</defun>

<defun title='server-name' version='Resin 2.0.4'>
<p>Defines the canonical url for the host. In some cases, the
specific URL that's used for a virtual host might be different from the &lt;host id='...'> name.  &lt;server-name> lets you specify the exact URL to be added when using a sendRedirect.
</p>

<example>
...
&lt;host id='foo.com'>
  &lt;server-name>http://foo.com&lt;/server-name>
  ...
&lt;/host>
...
</example>
</defun>

<defun title=server-listener version="Resin 2.0.3">
<p>Specifies the classname for a listener when the server starts and
shuts down.  The class must be in the system classpath because
it's called before the dynamic classpaths have been created and after
they've been destroyed.</p>

<p>The server listener class must extend
com.caucho.http.admin.AbstractServerListener.</p>

<example>
&lt;http-server>
  &lt;server-listener>
    &lt;class-name>test.MyListener&lt;/class-name>
  &lt;/server-listener>
  ...
</example>
</defun>

<defun title=servlet-classloader-hack version="Resin 2.0.3">
<p>Enables the Servlet specification classloader hack.
The Servlet 2.3 classloader order violates the JDK
classloader specification.  By default, therefore, Resin follows the
JDK requirements.  Those application which need to violate the JDK spec
may enable the servlet-classloader-hack.</p>

<p>By default, the hack is disabled.</p>
</defun>

<defun title=sticky-sessions version="Resin 2.0">
<p>Enables or disables sticky-session load balancing.</p>

<p>The default is true to enable sticky sessions.</p>
</defun>

<defun title='url-character-encoding'>
<p>Defines the character encoding to be used for decoding the
URL.  Because the HTTP protocol does not specify the encoding to
be used, the server must specify the encoding beforehand.</p>

<p><b>Default: </b> utf-8</p>
</defun>

<defun title='url-length-max'>
<p>Specifies the maximum length allowed in a HTTP URL.  Requests with
longer lengths will receive an error.</p>

<p><b>Default: </b> 8192</p>
</defun>

<defun title='war-dir'>
<p>Specifies a special directory to place war files.  Any .war
(web-application resource) file placed in the war directory will be
automatically expanded and installed.  The .war file will be expanded
into <var/war-expand-dir/>, if specified.</p>

<p>The war-dir is relative to $RESIN_HOME, not to the virtual host's
app-dir.</p>

<example>
&lt;host id='www.foo.com'>
  &lt;war-dir>foo-apps&lt;/war-dir>
&lt;/host>
</example>

<p>Given the above example, if you put foo.war in resin1.2/foo-apps, Resin
will automatically expand it and install it with the prefix <var//foo/>.
So browsing <var/http://localhost:8080/foo/> will give the top-level contents.
</p>

<p>Generally, war files use <var/WEB-INF/web.xml/> for configuration.  The
syntax is the same as for other application configuration.</p>

<p>No war-dir is defined by default.</p>
</defun>

<defun title='war-expand-dir' version='Resin 1.2.3'>
<p>Specifies the destination of war expansion.  Any .war
(web-application resource) file placed in the war-dir directory will be
automatically expanded into war-expand-dir.  You can also create a web-app
by creating a directory in war-expand-dir.</p>

<p>The war-dir is relative to $RESIN_HOME, not to the virtual host's
app-dir.</p>

<p>The special directory <var/ROOT/> lets you define the root web-app.</p>

<p>Generally, war files use <var/WEB-INF/web.xml/> for configuration.  The
syntax is the same as for other application configuration.
</p>

<p><b>Default:</b> Defaults to the value of &lt;war-dir>.
</p>
</defun>

<defun title='web-app'>
<p>Specifies an application.  Applications are self-contained
subtrees of the web site.  They have distinct Application objects,
sessions, and servlet mappings.  Applications can even be deployed
entirely from .jar files.</p>

<p>The full <a href='app-config.xtp'>application configuration</a> is
described in a separate page.</p>

<p>Applications have a root <var/app-dir/> similar to the document root.
By default, it's just the same as the relative path.</p>

<p>Beneath the <var/app-dir/> root, a special directory <var/WEB-INF/>
contains servlet classes and beans.  <var/WEB-INF/classes/> contains Java
source files and Java classes. <var/WEB-INF/lib/> contains additional
jar files for the application.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>The url prefix of the application.<td>required
<tr><td>url-regexp<td>A regular expression matching a url prefix.<td>none
<tr><td>app-dir<td>The application's root directory.<td>The subdirectory of
the host's app-dir named by <var/id/>
</deftable>

<example>
&lt;host id='foo.com'&gt;

&lt;web-app id='example/tictactoe'
         app-dir='c:\work\ttt'&gt;
  &lt;servlet-mapping url-pattern='*.foo'
                      servlet-name='com.caucho.jsp.XtpServlet'/&gt;
&lt;/web-app&gt;

&lt;/host&gt;
</example>

<p>The <var/url-regexp/> configuration allows for dynamic applications,
for example, creating a new application for each user.</p>

<example title="Per-user Servlet Directory">
&lt;host&gt;

&lt;web-app url-regexp='^/~([^/]+)'
         app-dir='/home/$1/public_html'&gt;
  ...
&lt;/web-app&gt;

&lt;/host&gt;
</example>

<p>In the above example, users will put their own web.xml
in <var//home/user/public_html/WEB-INF/web.xml/>.  Classes belong
in <var/public_html/WEB-INF/classes/>.</p>

<note>Only the Resin Java process understands regexps.  Because mod_caucho,
isapi_srun and the other web server plugins don't understand the regexps,
you may need to do additional work to make the web server send the request
to Resin.</note>
</defun>

</s2>

<s2 title='Formal Description'>

<def>
http-server ::= <a href="#http">http</a>,
                <a href="#srun">srun</a>,
                <a href="#srun-backup">srun-backup</a>,
                <a href="#thread-max">thread-max</a>,
                <a href="#thread-min">thread-min</a>,
                <a href="#thread-keepalive">thread-keepalive</a>,
                <a href="#request-timeout">request-timeout</a>,
                <a href="#ping">ping</a>,
                <a href="#alternate-session-url-prefix">alternate-session-url-prefix</a>,
                <a href="#session-url-prefix">session-url-prefix</a>,
                <a href="#sticky-sessions">sticky-sessions</a>,
                <a href="#ignore-client-disconnect">ignore-client-disconnect</a>,
                <a href="#global-system-properties">global-system-properties</a>,
                <a href="#root-dir">root-dir</a>,
                <a href="#doc-dir">doc-dir</a>,
                <a href="#cache">cache</a>,
                <a href="#host">host</a>*,
                <var/default host or web-app tags/>*

</def>

</s2>
</s1>
<s1 title="Log Configuration">

<summarylist/>

<defun title="stdout-log">
<p>Configures the destination for System.out.  Each &lt;host> and
&lt;web-app> can have its own individual System.out location.</p>

<deftable>
<tr><th>Attribute<th>Description<th>Default
<tr><td>id (or href)<td>Filesystem path for the stream<td>required
<tr><td>rollover-period<td>how often to rollover the log.  Normally in days (15D), weeks (2W) or months (1M).<td>none
<tr><td>rollover-size<td>max size of the log before a rollover in bytes.<td>1 meg
</deftable>

<p>The following example configures System.out for a host.  All web-apps in the
host will write to the same output file.</p>

<example>
...
&lt;host id='foo.com'>
  &lt;stdout-log href='/var/log/foo/stdout.log'
              rollover-period='1W'/>

  ...
&lt;/host>
...
</example>

</defun>

<defun title="stderr-log">
<p>Configures the destination for System.err.  Each &lt;host> and
&lt;web-app> can have its own individual System.err location.</p>

<deftable>
<tr><th>Attribute<th>Description<th>Default
<tr><td>id (or href)<td>Filesystem path for the stream<td>required
<tr><td>rollover-period<td>how often to rollover the log.  Normally in days (15D), weeks (2W) or months (1M).<td>none
<tr><td>rollover-size<td>max size of the log before a rollover.<td>1 meg
</deftable>

<p>The path <var/href/> may use path and regular expression variables.</p>

<p>The following example configures System.err for a host.
All web-apps in the host will write to the same output file.</p>

<example>
...
&lt;host id='foo.com'>
  &lt;stderr-log href='/var/log/foo/stderr.log'
              rollover-period='1W'/>

  ...
&lt;/host>
...
</example>

</defun>

<defun title="access-log">
<p>The access-log configures the logging of each request.</p>

<p>The access-log can be configured either in the &lt;http-server>, &lt;host>,
or &lt;web-app> context.  It will apply within the context.</p>

<deftable>
<tr><th>Attribute<th>Description<th>Default
<tr><td>id<td>The access log path.<td>required
<tr><td>format<td>Access log format.<td>see below
<tr><td>rollover-period<td>how often to rollover the log.
Normally in days (15D), weeks (2W) or months (1M).<td>none
<tr><td>rollover-size<td>max size of the log before a rollover in bytes.<td>10 meg
<tr><td>class-name<td>Class implementing AbstractAccessLog for custom logging.<td>none
<tr><td>init-param<td>Parameters for the custom log.<td>none
</deftable>

<p>The access log formatting variables follow the Apache variables:</p>

<deftable>
<tr><td>%b<td>result content length
<tr><td>%h<td>remote IP addr
<tr><td>%{<var/xxx/>}i<td>request header <var/xxx/>
<tr><td>%{<var/xxx/>}o<td>response header <var/xxx/>
<tr><td>%{<var/xxx/>}c<td>cookie value <var/xxx/>
<tr><td>%n<td>request attribute
<tr><td>%r<td>request URL
<tr><td>%s<td>status code
<tr><td>%{<var/xxx/>}t<td>request date with optional time format string.
<tr><td>%T<td>time of request in seconds
<tr><td>%u<td>remote user
<tr><td>%U<td>request URI
</deftable>

<p>The default format is:</p>

<def>
"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""
</def>

<example>
&lt;host id=''>

  &lt;access-log id='log/access.log'&gt;
    &lt;rollover-period>2W&lt;/rollover-period>
  &lt;/access-log>

 ...

&lt;/host&gt;
</example>

<p>The class-name attribute allows for custom logging.  Application can
extend a custom class from com.caucho.http.log.AbstractAccessLog.  The
init-param parameters set bean parameters in the custom class.</p>

<example>
...
&lt;host id='foo.com'>
  &lt;access-log href='$server-root/foo/error.log'
             rollover-period='1W'
             class-name='test.MyLog'>
    &lt;init-param foo='bar'/>
  &lt;/access-log>
  ...
&lt;/host>
...
</example>

</defun>

<defun title="error-log">
<p>The error-log configures the destination for ServletContext.log()
messages.  The error-log is also used for exceptions not caught
by the application.</p>

<p>The error-log can be configured either in the &lt;http-server>, &lt;host>,
or &lt;web-app> context.  It will apply within the context.</p>

<deftable>
<tr><th>Attribute<th>Description<th>Default
<tr><td>id<td>The access log path.<td>required
<tr><td>rollover-period<td>how often to rollover the log.
Normally in days (15D), weeks (2W) or months (1M).<td>none
<tr><td>rollover-size<td>max size of the log before a rollover in bytes.<td>1 meg
<tr><td>class-name<td>Class implementing AbstractAccessLog for custom logging.<td>none
<tr><td>init-param<td>Parameters for the custom log.<td>none
</deftable>

<p>The class-name attribute allows for custom logging.  Application can
extend a custom class from com.caucho.http.log.AbstractErrorLog.  The
init-param parameters set bean parameters in the custom class.</p>

<example>
...
&lt;host id='foo.com'>
  &lt;error-log href='$server-root/foo/error.log'
             rollover-period='1W'
             class-name='test.MyErrorLog'>
    &lt;init-param foo='bar'/>
  &lt;/error-log>
  ...
&lt;/host>
...
</example>

</defun>

<defun title="log">
<p>Starts logging for debugging.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>default
<tr><td>id<td>Name of debugging section<th>none
<tr><td>href<td>Destination file<td>none
<tr><td>timestamp<td>timestamp format<td>none
<tr><td>rollover-count<td>how many rotated (<var/href.n/>) logs to keep.<td>2
<tr><td>rollover-period<td>How often to rotate the log.<td>none
</deftable>

<p>For example, to log everything to standard error use:</p>

<example>
&lt;caucho.com&gt;
  &lt;log id='/' href='stderr:' timestamp="[%H:%M:%S.%s]"/>
  ...
&lt;/caucho.com&gt;
</example>

<deftable>
<tr><th>log <var/id/> value<th>Meaning
<tr><td>/<td>Debug everything
<tr><td>/caucho.com/jsp<td>Debug jsp
<tr><td>/caucho.com/java<td>Java compilation
<tr><td>/caucho.com/xsl<td>XSL debugging
<tr><td>/caucho.com/tcp-server
    <td>TCP connections
<tr><td>/caucho.com/thread
    <td>Thread creation and deletion
<tr><td>/caucho.com/sql
    <td>Database pooling
<tr><td>/caucho.com/http
    <td>HTTP related information
<tr><td>/caucho.com/http/session
    <td>HTTP sessions
</deftable>

<p>The timestamp can include the following patterns:</p>

<deftable>
<tr><th>Pattern<th>Meaning
<tr><td>%a<td>short weekday (mon, tue, ...)
<tr><td>%A<td>long weekday (Monday, Tuesday, ...)
<tr><td>%b<td>short month (Jan, Feb, ...)
<tr><td>%B<td>long month (January, February, ...)
<tr><td>%c<td>locale specific date
<tr><td>%d<td>day of month
<tr><td>%H<td>24-hour
<tr><td>%I<td>12-hour
<tr><td>%j<td>day of year
<tr><td>%m<td>month
<tr><td>%M<td>minute
<tr><td>%p<td>am/pm
<tr><td>%S<td>seconds
<tr><td>%s<td>milliseconds
<tr><td>%W<td>week of year
<tr><td>%w<td>day of week
<tr><td>%y<td>2-digit year
<tr><td>%Y<td>4-digit year
</deftable>

<p>Debugging uses the com.caucho.vfs.LogStream interface.  A typical use is
as follows</p>

<example>
import com.caucho.vfs.*;

public class Foo {
  static LogStream dbg = LogStream.open("/caucho.com/foo");

  ...
  void doFoo()
  {
    if (dbg.canWrite())
      dbg.log("executing foo");
  }
  ...
}
</example>

</defun>

<s2 title="Log Paths">

<p>The path <var/href/> may use path and regular expression variables.</p>

<deftable>
<tr><th>Variable<th>Value
<tr><td>$server-root<td>The root of the server instance.  Same as the -server-root argument.
<tr><td>$host-root<td>The app-dir of the enclosing &lt;host>
<tr><td>$app-dir<td>The app-dir of the enclosing &lt;web-app>
<tr><td>$host0 ... $host9<td>Regular expression replacement from a host url-regexp.
<tr><td>$app0 ... $app9<td>Regular expression replacement from a web-app url-regexp.
<tr><td>$0 ... $9<td>Regular expression replacement for the containing context (host or web-app)
<tr><td>$<var/foo/><td>Java property value from System.getProperty("foo")
</deftable>

</s2>
</s1><s1 title="Port and Protocol Configuration">

<objsummary/>

<s2 title='Port Configuration'>

<defun title='accept-buffer-size' version="Resin 1.2">
<p>Number of sockets in the accept buffer.</p>

<p><b>Default:</b> 256</p>
</defun>

<defun title='http' version="Resin 1.2">
<p>Defines a HTTP or SSL port for the standalone server.</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td>id<td>http identifier name
<tr><td>host<td>The listening host
<tr><td>port<td>The listening port
<tr><td>virtual-host<td>Virtual host to select a <a href="#host">host</a> block.
<tr><td>ssl<td>enable ssl
<tr><td>ssl2<td>enable SSLv2<td>true
<tr><td>ssl3<td>enable SSLv3<td>true
<tr><td>tls1<td>enable TLSv1<td>true
<tr><td>key-store-type<td>JSSE Type of the key store (default jks)
<tr><td>key-store-file<td>JSSE File containing the certificates
<tr><td>key-store-password<td>JSSE Password to read the certificates
<tr><td>certificate-chain-file<td>OpenSSL certificate chain (Resin 2.1.4)
<tr><td>certificate-file<td>OpenSSL certificate (Resin 2.0.5)
<tr><td>certificate-key-file<td>OpenSSL key certificate (Resin 2.0.5)
<tr><td>certificate-key-password<td>OpenSSL key password (Resin 2.1.1)
<tr><td>crypto-device<td>OpenSSL engine (Resin 2.0.5)

<tr><td>thread-max<td>Maximum number of live threads.<td>200
<tr><td>thread-min<td>Minimum number of live threads.<td>5
<tr><td>thread-keepalive<td>Number of keepalive threads<td>100
<tr><td>request-timeout<td>Max time for a request, after this the request
will be interrupted.<td>30 sec
<tr><td>listen<td>Value of the socket listen parameter<td>5
<tr><td>accept-buffer-size<td>Number of sockets in the accept buffer.<td>256
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>

<example title='Basic HTTP configuration'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;http port='8080'&gt;
    ...
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<example title='JSSE configuration'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;http port='8443'&gt;
      &lt;ssl>true&lt;/ssl>
      &lt;key-store-type>pkcs12&lt;/key-store-type>
      &lt;key-store-file>keys/server.p12&lt;/key-store-file>
      &lt;key-store-password>changeit&lt;/key-store-password>
    &lt;/http>
    ...
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

</defun>

<defun title="dead-time">
<p>For load balancing, how long the server should treat a dead server
as dead before retrying it.</p>

<p><b>Default:</b> Defaults to 5 sec.</p>
</defun>

<defun title="host" version="Resin 1.2">
<p>Specifies an interface for the http or srun to listen to.
In cases where the server should not listen at all interfaces on a
multihomed host, the &lt;host> tag will restrict Resin to listen to
one interface.
</p>
<p><b>Default:</b> listen to all interfaces.</p>
</defun>

<defun title="live-time">
<p>For load balancing, how long the server should keep an
idle srun connection open before closing it.  &lt;live-time> must be less
than &lt;request-timeout>.</p>

<p><b>Default:</b> Defaults to 10 sec.</p>
</defun>

<defun title='port' version="Resin 1.2">
<p>Specifies the port the http or srun should listen to.
Most HTTP web servers listen to port 80.
</p>
</defun>

<defun title='request-timeout'>
<p>Time in seconds for a connection to timeout.  An idle client
uses a TCP connection until it quits.  <var/request-timeout/> limits
the time taken up by idle clients.</p>

<p><b>Default:</b> Defaults to 30 sec.</p>
</defun>

<defun title="server" version="Resin 2.0">
<p>Configures a custom protocol server. Some specialized
application may have a custom protocol, like IMAP, which need to
be integrated with the Resin server.  These ports can be configured
with the &lt;server> configuration.</p>

<p>The &lt;request-factory> class implements
<code/com.caucho.server.RequestFactory/> and creates request objects
of type <code/com.caucho.server.Request/>.  Each <code/Request/> will
handle the protocol on the given socket.</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;server id='a' port='9999'>
      &lt;request-factory>com.trecorp.server.MyServer&lt;/request-factory>
      &lt;init-param foo='bar'/>
    &lt;/server>
    ...
  &lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='srun' version='Resin 1.1'>
<p>Defines multiple client machines for load balancing.  This
directive used by the web server (Apache or IIS) and by the Java portion
of Resin.</p>

<p>Each <var/srun/> directive adds a new client to receive load
balanced requests.  With Resin 1.2, the resin.conf must have at least
one &lt;srun> or &lt;http> element.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>srun identifier name.<td>none
<tr><td>host<td>The host name of the client srun.<td>all interfaces
<tr><td>port<td>The port name of the client srun.<td>none
<tr><td>connect-timeout<td>How long to wait for a connection from the
web server to the Resin srun before giving up.<td>30 sec
<tr><td>live-time<td>How long the web-server/srun connection should stay live.<td>10 sec
<tr><td>dead-time<td>How long before checking that a srun has come back up.<td>5 sec
<tr><td>timeout<td>How long the load balancing server should wait for a response.<td>30 sec

<tr><td>thread-max<td>Maximum number of live threads.<td>200
<tr><td>thread-min<td>Minimum number of live threads.<td>5
<tr><td>thread-keepalive<td>Number of keepalive threads<td>100
<tr><td>request-timeout<td>Max time for a request, after this the request
will be interrupted.<td>30 sec
<tr><td>listen<td>Value of the socket listen parameter<td>5
<tr><td>accept-buffer-size<td>Number of sockets in the accept buffer.<td>256
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>

<example title='Load balance over three machines'>
&lt;caucho.com&gt;
  &lt;http-server&gt;
    &lt;srun id='a' host='host1.caucho.com' port='6802'&gt;
    &lt;srun id='b' host='host2.caucho.com' port='6802'&gt;
    &lt;srun id='c' host='host2.caucho.com' port='6803'&gt;
  &lt;/http-server&gt;
&lt;/caucho.com&gt;
</example>

<p>To start srun 'a' use a command line like</p>
<example>
unix> <var/srun.sh -server a/>
Resin 2.1.0
srun listening to host1.caucho.com:6802
</example>

<p>On Unix, when starting a daemon, you'll need to specify a unique pid file.
</p>

<example>
unix> <var/srun.sh -server a -pid a.pid start/>
</example>
</defun>

<defun title='srun-backup' version='Resin 1.1'>
<p>Defines backup client machines for load balancing.  This
directive is only picked up by the load balancer.  The
Java portion of Resin treats a &lt;srun-backup> like any other srun.
Normally, &lt;srun-backup> is only used when each web server has
a primary &lt;srun> in preference to other &lt;srun> JVMs.
See the <a href="balance.xtp">load-balancing</a> section
for more information.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>id<td>srun identifier name<td>none
<tr><td>host<td>The host name of the client srun<td>all interfaces
<tr><td>port<td>The port name of the client srun<td>none
<tr><td>connect-timeout<td>How long to wait for a connection from the
web server to the Resin srun before giving up.<td>30 sec
<tr><td>live-time<td>How long a keepalive connection will remain alive before
closing.<td>5 sec.
<tr><td>dead-time<td>How long to treat a non-responding srun before trying again.<td>5 sec.
<tr><td>shutdown-wait-time<td>How long to wait for connections to
finish before exiting.<td>10 sec.
</deftable>
</defun>

<defun title="ssl" version="Resin 1.2">
<p>Flags a http or srun to use SSL.</p>

<p>Resin supports SSL with either JSSE or OpenSSL on Unix systems.
We generally recommend using OpenSSL since it's faster and more stable.
JSSE will be used when starting Resin with httpd.sh or httpd.exe.  OpenSSL
will be used when Resin starts with bin/resin.
</p>

<p>Resin's OpenSSL uses the same certificates as Apache, so you can
either reuse your Apache certificate or get a new certificate using the
instructions for getting an Apache certificate.
</p>

<p>If you have OpenSSL-engine and Resin 2.0.5, you can enable
SSL engines using the crypto-device tag.  By default, bin/resin will
use OpenSSL's C-based implementation.
</p>

<deftable>
<tr><th>Attribute<th>Meaning
<tr><td>ssl<td>enable ssl
<tr><td>key-store-type<td>JSSE Type of the key store (default jks)
<tr><td>key-store-file<td>JSSE File containing the certificates
<tr><td>key-store-password<td>JSSE Password to read the certificates
<tr><td>certificate-chain-file<td>OpenSSL certificate chain (Resin 2.1.4)
<tr><td>certificate-file<td>OpenSSL certificate (Resin 2.0.5)
<tr><td>certificate-key-file<td>OpenSSL key certificate (Resin 2.0.5)
<tr><td>crypto-device<td>OpenSSL engine (Resin 2.0.5)
</deftable>

<example>
&lt;http-server>
  ...
  &lt;http port='443'>
    &lt;ssl/>
    &lt;certificate-file>/opt/resin/keys/cert.pem&lt;/certificate-file>
    &lt;crypto-device>cswift&lt;/crypto-device>
  &lt;/http>
  ...
&lt;/http-server>
</example>
</defun>

<defun title="sslv2" version="Resin 2.1.1">
<p>Enables or disables SSL v2 for a SSL port.
If sslv2 is false, clients trying
to use SSL v2 will fail.</p>

<p><b>Default:</b> true.</p>
</defun>

<defun title="sslv3" version="Resin 2.1.1">
<p>Enables or disables SSL v3 for a SSL port.
If sslv3 is false, clients trying to use SSL v3 will fail.</p>

<p><b>Default:</b> true.</p>
</defun>

<defun title='tcp-no-delay' version='Resin 2.1.6'>
<p>Sets the tcpNoDelay for received sockets.  In general, this should
remain false except for benchmarking.</p>

<p><b>Default:</b> false.</p>
</defun>

<defun title="tlsv1" version="Resin 2.1.1">
<p>Enables or disables TLS v1 for a SSL port.
If tlsv1 is false, clients trying to use TLS v1 will fail.</p>

<p><b>Default:</b> true.</p>
</defun>

<defun title="verify-client" version="Resin 2.1.2">
<p>Configures how SSL should treat client certificates.</p>

<deftable title="verify-client values">
<tr><th>Value<th>Meaning
<tr><td>none<td>Do not use client certificates
<tr><td>require<td>Require a client certificate
<tr><td>optional<td>Use the client certificate if provided, but require any provided certificate to be signed by a known CA.
<tr><td>optional_no_ca<td>Use the client certificate if provided and accept certificates not signed by known CAs.
</deftable>

<p><b>Default:</b> none.</p>
</defun>

</s2>

</s1>
<s1 title="Miscellaneous Resin Configuration">

<p>This section contains general, i.e. non-HTTP, configuration.
resin.conf is a general configuration file, like NT's registry.
Some Resin modules like logging have their configuration in
resin.conf, but outside the <var/http-server/> block.</p>

<p>Configuration is based on element XML.  The canonical form uses
elements only, like the Servlet 2.2 deployment descriptors.
To make the configuration more readable, you can use an attribute
as syntactic sugar for an element.</p>

<p>The following are equivalent:</p>
<deftable>
<tr><td>&lt;foo>&lt;bar>13&lt;/bar>&lt;/foo><td>canonical representation, but verbose
<tr><td>&lt;foo bar=13/><td>typical configuration
<tr><td>&lt;foo>&lt;bar id=13/>&lt;/foo><td>Useful for a key-based list.
</deftable>

<p>In general, the order is not important, but the nesting depth is.
In this reference guide, <var/caucho.com/http-server/http/port/> refers to
a configuration like:</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;http>
      &lt;port>80&lt;/port>
    &lt;/http>
  &lt;/http-server>
&lt;/caucho.com>
</example>

<p>That example could be rewritten as:</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;http port='80'/>
  &lt;/http-server>
&lt;/caucho.com>
</example>

<objsummary/>

<s2 title='caucho.com'>

<defun title='resin:include'>
<p>Includes another configuration file.</p>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;host id='host1'>
    &lt;resin:include href='host.conf'/>
  &lt;/host>
  &lt;host id='host2'>
    &lt;resin:include href='host.conf'/>
  &lt;/host>
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='resin:include-directory'>
<p>Includes files in a directory.  All the files in the
directory named by the <var/href/> and which have the given extension
will be inserted into the XML document.</p>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;host id='host1'>
    &lt;resin:include-directory sub='host.conf' extension='.xml'/>
  &lt;/host>
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='java'>
<p>Configuration for the Java compiler.  In general, we recommend
using IBM's <var/jikes/> compiler because it's significantly faster than
the "internal" compiler.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>classpath<td>extra classpath (Resin 1.2.3)<td>none
<tr><td>compiler<td>Path to the java compiler or "internal"<td>internal
<tr><td>compiler-args<td>Extra args to pass to the compiler<td>none
<tr><td>encoding<td>Character encoding (Resin 1.2.4)<td>none
<tr><td>max-compile-time<td>Limits the time for a Java compilation (Resin 1.2.3)<td>30 sec
</deftable>

<example>
&lt;caucho.com>
  &lt;java compiler='/usr/local/bin/jikes'
         compiler-args='-g'/>
  ...
&lt;/caucho.com>
</example>

<p>The "internal" compiler is the default only because it's always available
for any JDK.  The external jikes compiler is generally a preferred
configuration.</p>
</defun>

<defun title='log'>
<p>Debug log configuration.  Most of Resin's code has debug logging
built in.  The &lt;log> configuration enables that logging, allowing
users to see what's going on.  The debug logging can be useful when
trying to understand what HTTP requests and headers the browser is sending
or Resin is returning.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>default
<tr><td>id<td>Name of debugging section<td>none
<tr><td>href<td>Destination file<td>none
<tr><td>timestamp<td>timestamp format<td>none
<tr><td>rollover-count<td>how many rotated (<var/href.n/>) logs to keep.<td>2
<tr><td>rollover-period<td>How often to rotate the log.<td>none
</deftable>

<p>For example, to log everything to standard error use:</p>

<example>
&lt;caucho.com&gt;
  &lt;log id='/' href='stderr:' timestamp="[%H:%M:%S.%s]"/>
&lt;/caucho.com&gt;
</example>

<deftable>
<tr><th>log <var/id/> value<th>Meaning
<tr><td>/<td>Debug everything
<tr><td>/caucho.com/jsp<td>Debug jsp
<tr><td>/caucho.com/java<td>See all Java compilation
<tr><td>/caucho.com/xsl<td>XSL debugging
<tr><td>/caucho.com/tcp-server
    <td>See thread creation and deletion
<tr><td>/caucho.com/sql
    <td>See database pooling
<tr><td>/caucho.com/http
    <td>HTTP related information
<tr><td>/caucho.com/http/session
    <td>HTTP sessions
<tr><td>/caucho.com/distribution
    <td>Distributed and persistent sessions
<tr><td>/caucho.com/http/cache
    <td>Resin's proxy cache
</deftable>

<p>The timestamp can include the following patterns:</p>

<deftable>
<tr><th>Pattern<th>Meaning
<tr><td>%a<td>short weekday (mon, tue, ...)
<tr><td>%A<td>long weekday (Monday, Tuesday, ...)
<tr><td>%b<td>short month (Jan, Feb, ...)
<tr><td>%B<td>long month (January, February, ...)
<tr><td>%c<td>locale specific date
<tr><td>%d<td>day of month
<tr><td>%H<td>24-hour
<tr><td>%I<td>12-hour
<tr><td>%j<td>day of year
<tr><td>%m<td>month
<tr><td>%M<td>minute
<tr><td>%p<td>am/pm
<tr><td>%S<td>seconds
<tr><td>%s<td>milliseconds
<tr><td>%W<td>week of year
<tr><td>%w<td>day of week
<tr><td>%y<td>2-digit year
<tr><td>%Y<td>4-digit year
</deftable>

</defun>

<defun title='smtp.vfs'>
<p>VFS mailto: configuration.  The smtp.vfs configuration only
applies to the mailto: scheme in Resin's VFS. See the <a href="../java_tut/mail_form.xtp">form mailing</a> tutorial.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>host<td>SMTP host<td>localhost
<tr><td>port<td>SMTP port<td>25
<tr><td>sender<td>sending mail address<td>The current user and local host
</deftable>

</defun>

<defun title='http-server'>
<p>httpd and srun configuration.</p>

<p>Configures both <a href='http-config.xtp'>http and srun</a>.  The
configuration is identical.</p>

</defun>

<defun name=group-name title='group-name'>
<p>Sets the Unix group.  To listen to port 80, Unix systems require Resin
to start as root.  group-name lets the server change to a safer user after
listening to port 80.</p>

<example>
&lt;caucho.com&gt;
  &lt;user-name>httpd&lt;/user-name>
  &lt;group-name>daemon&lt;/group-name>
&lt;/caucho.com&gt;
</example>
</defun>

<defun title='security-provider'>
<p>Adds a Java security provider without modifying the java.security.</p>

<example>
&lt;caucho.com&gt;
  &lt;security-provider id='com.sun.net.ssl.internal.ssl.Provider'/>
&lt;/caucho.com&gt;
</example>
</defun>

<defun title='security-manager'>
<p>Enables the a Java security manager.  Normal configurations will
not use a security manager, because the security manager slows performance.
ISPs may want to add a security-manager to prevent some actions by
the clients.</p>

<p>By default, all web-apps have read/write/delete access
to the entire web-app.</p>

<example>
&lt;caucho.com&gt;
  &lt;security-manager/>
  ...
&lt;/caucho.com&gt;
</example>
</defun>

<defun title='user-name'>
<p>Sets Unix user.  To listen to port 80, Unix systems require Resin
to start as root.  user-name lets the server change to a safer user after
listening to port 80.</p>

<example>
&lt;caucho.com&gt;
  &lt;user-name>httpd&lt;/user-name>
  &lt;group-name>daemon&lt;/group-name>
&lt;/caucho.com&gt;
</example>

<p>You must use the <var/bin/resin/> launcher to use user-name:</p>

<example>
unix> bin/resin -conf conf/test.conf
</example>

</defun>

</s2>

<s2 title='Formal Description'>

<def>
caucho.com ::= <a href="#java">java</a>,
               <a href="#log">log</a>*,
               <a href="#smtp.vfs">smtp.vfs</a>,
               <a href="#user-name">user-name</a>,
               <a href="#group-name">group-name</a>,
               <a href="#system-property">system-property</a>*,
               <a href="#security-provider">security-provider</a>,
               <a href="#security-manager">security-manager</a>,
               <a href="http-config.xtp">http-server</a>

java ::= <a href="#java">compiler</a>,
         <a href="#java">compiler-args</a>,
         <a href="#java">encoding</a>,
         <a href="#java">classpath</a>
         <a href="#java">max-compile-time</a>

log ::= <a href="#log">href</a>,
        <a href="#log">timestamp</a>,
        <a href="#log">rollover-count</a>,
        <a href="#log">rollover-period</a>

</def>

</s2>
</s1>
<s1 title="Servlet">

<p>Servlets are Java classes which service HTTP requests.  The only
requirement for writing a servlet is that it implements the
javax.servlet.Servlet interface.</p>

<p>Servlets are loaded from the classpath like all Java classes.
Normally, users put servlets in <var/WEB-INF/classes/> so Resin will
automatically reload them when they change.</p>

<p><a href='jsp.xtp'>JSP</a> pages are implemented as
Servlets, and tend to be more efficient for pages with lots of text.</p>

<s2 title='Examples'>

<s3 title='Configuring the web.xml'>

<p>The following is a complete working web.xml to run this example.</p>

<p>The <var/servlet-mapping/> tells Resin that the URL
<var//hello/> should invoke the <var/hello-world/> servlet.</p>

<p>The <var/servlet/> tells Resin that <var/hello-world/> uses the
<var/test.HelloWorld/> class and that the value of the <var/greeting/>
init parameter is <var/Hello World/>.</p>

<example title='WEB-INF/web.xml'>
&lt;web-app>
  &lt;servlet-mapping url-pattern='/hello'
                   servlet-name='hello-world'/>

  &lt;servlet servlet-name='hello-world'
           servlet-class='test.HelloWorld'>
    &lt;init-param greeting='Hello, World'/>
&lt;/web-app>
</example>

<p>The Java code, <var/HelloWorld.java/> belongs in</p>
<def>
$app-dir/WEB-INF/classes/test/HelloWorld.java
</def>

<p>Or, if you're compiling the servlet yourself, the class file belongs in</p>
<def>
$app-dir/WEB-INF/classes/test/HelloWorld.class
</def>

<p>Following is the actual servlet code.  It just prints a trivial
HTML page filled with the greeting specified in the web.xml.</p>

<p><var/init()/> and <var/destroy()/> are included mostly for
illustration.  Resin will call <var/init()/> when it starts the servlet
and <var/destroy/> before Resin destroys it.</p>

<example>
package test;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet {
  private String greeting;

  public void init()
    throws ServletException
  {
    greeting = getInitParameter("greeting");
  }

  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
    throws ServletException, IOException
  {
    PrintWriter out = response.getWriter();

    out.println("&lt;title>" + greeting + "&lt;/title>");
    out.println("&lt;h1>" + greeting + "&lt;/h1>");
  }
  
  public void destroy()
  {
    // nothing to do
  }
}
</example>

</s3>

<s3 title='Servlet Example for JSP Programmers'>

<p>Because Resin compiles JSP pages into servlets, programmers familiar
with JSP can start writing servlets fairly easily.  The following template
can be used to see how to write a servlet for someone familiar with JSP.
</p>

<example>
package test;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet {
  public void service(HttpServletRequest request,
                      HttpServletResponse response)
    throws ServletException, IOException
  {
    PrintWriter out = response.getWriter();
    ServletContext application = getServletContext();
    HttpSession session = request.getSession();

    try {
      // <var/code goes here/>

      // The equivalent of jsp:include:
      // request.getRequestDispatcher("/inc.jsp").include(request, response);
    } catch (ServletException e) {
      throw e;
    } catch (Exception e) {
      throw new ServletException(e);
    }
  }
}
</example>

</s3>

<s3 title='Using Databases from a Servlet'>

<p>The following is a sample design pattern for getting new database
connections.  The <var/try ... finally/> block is very important.  Without
the close in the finally block, Resin's database pool can loose connections.</p>

<p>Configuring the database is described in the
<a href="db-config.xtp">database configuration</a> page.</p>

<example title="TestDatabase.java">
package test;

import java.io.*;

import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import javax.sql.*;

public class TestDatabase extends HttpServlet {
  DataSource pool;

  public void init()
    throws ServletException
  {
    try {
      Context env = (Context) new InitialContext().lookup("java:comp/env");

      pool = (DataSource) env.lookup("jdbc/test");

      if (pool == null)
        throw new ServletException("`jdbc/test' is an unknown DataSource");
    } catch (NamingException e) {
      throw new ServletException(e);
    }
  }

  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
    throws IOException, ServletException
  {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();

    Connection conn = null;
    try {
      conn = pool.getConnection();

      // <var/code for the servlet using the database goes here/>

      rs.close();
      stmt.close();
    } catch (SQLException e) {
      throw new ServletException(e);
    } finally {
      try {
        if (conn != null)
          conn.close();
      } catch (SQLException e) {
      }
    }
  }
}
</example>

</s3>

</s2>

<s2 title="Servlet Configuration">

<defun title="init" version="Resin 2.1.3">
<p>Configures servlets using bean-style initialization.
Each entry in an &lt;init> tag will configure a <code/setFoo/>
method in a Servlet. JSP EL expressions are allowed.</p>

<p>The <code/init(config)/> method is called after
all the bean setters are called.</p>

<example title="Bean-style Configuration">
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;init&gt;
    &lt;greeting&gt;Hello, ${host.url}&lt;/greeting>
  &lt;/init&gt;
&lt;/servlet&gt;
</example>

<example title="HelloWorld bean">
public HelloWorld extends GenericServlet {
  private String _greeting;

  public void setGreeting(String greeting)
  {
    _greeting = greetin;
  }

  public void service(ServletRequest req,
                      ServletResponse res)
    throws IOException, ServletException
  {
    PrintWriter out = res.getWriter();

    out.println("Greeting: " + _greeting);
  }
}
</example>

</defun>

<defun title='init-param'>
<p>Initializes servlet variables. <code/servlet-param/>
defines initial values for <code/getServletConfig().getInitParameter("foo")/>.
</p>

<p>The full servlet 2.2 syntax is supported and allows a simple shortcut.</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;init-param foo='bar'/&gt;

  &lt;init-param&gt;
    &lt;param-name&gt;baz&lt;/param-name&gt;
    &lt;param-value&gt;value&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;

&lt;/web-app>
</example>
</defun>

<defun title="load-on-startup">
<p>If present, starts the servlet when the server starts.</p>
<example>
&lt;web-app id='/'>

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'&gt;
  &lt;load-on-startup/&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</defun>

<defun title='run-at' version='Resin 1.1'>
<p>If present, calls the servlet's <var/service()/> method
at the specified times.
&lt;run-at> lets servlet writers execute periodic tasks without worrying
about creating a new Thread.</p>

<p>The value is a list of 24-hour times when the
servlet should be automatically executed.  To run the servlet every 6
hours, you could use:</p>

<example>
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;run-at&gt;0:00, 6:00, 12:00, 18:00&lt;/run-at&gt;
&lt;/servlet&gt;
</example>

<p>If the hour is omitted, the servlet runs every hour at the
specified minute.  To run the server every 15 minutes, you could use:
</p>

<example>
&lt;servlet servlet-name='test.HelloWorld'&gt;
  &lt;run-at&gt;:00, :15, :30, :45&lt;/run-at&gt;
&lt;/servlet&gt;
</example>
</defun>

<defun title='servlet'>
<p>Defines a servlet alias for later mapping.</p>

<deftable>
<tr><th>Attribute<th>Description
<tr><td>servlet-name<td>The servlet's name (alias)
<tr><td>servlet-class<td>The servlet's class (defaults to servlet-name)
<tr><td>init-param<td>Initialization parameters
<tr><td>load-on-startup<td>Initializes the servlet when the server starts.
<tr><td>run-at<td>Times to execute the servlet automatically
</deftable>

<p>The following example defines a servlet alias 'hello'</p>
<example>
&lt;web-app id='/'&gt;

&lt;servlet-mapping url-pattern='/hello.html'
                 servlet-name='hello'/&gt;

&lt;servlet servlet-name='hello'
         servlet-class='test.HelloWorld'&gt;
  &lt;init-param title='Hello, World'/&gt;
&lt;/servlet&gt;

&lt;servlet servlet-name='cron'
         servlet-class='test.DailyChores'&gt;
  &lt;run-at&gt;3:00&lt;/run-at&gt;
&lt;/servlet&gt;

&lt;/web-app&gt;
</example>
</defun>

<defun title='servlet-class'>
<p>Class of the servlet.  The CLASSPATH for servlets includes
the WEB-INF/classes directory and all jars in the WEB-INF/lib directory.
</p>
</defun>

<defun title="servlet-name">
<p>Alias of the servlet, uniquely naming a servlet configuration.
Several &lt;servlet> configurations might configure the same
servlet class with different &lt;init-param> values.  Each will
have a separate servlet-name.</p>

<example title="Multiple Servlets">
&lt;web-app>
  &lt;servlet servlet-name='foo-a'>
    &lt;servlet-class>test.FooServlet&lt;/servlet-class>
    &lt;init-param name='foo-a sample'/>
  &lt;/servlet>

  &lt;servlet servlet-name='foo-b'>
    &lt;servlet-class>test.FooServlet&lt;/servlet-class>
    &lt;init-param name='foo-b sample'/>
  &lt;/servlet>
&lt;/web-app>
</example>

</defun>

<defun title="servlet-mapping">
<p>Maps from a URL to the servlet to execute.  The servlet-mapping
has a url-pattern to match the URL and a servlet-name to match the
configured servlet.</p>

<example title="typical servlet-mapping">
&lt;servlet>
  &lt;servlet-name>hello&lt;/servlet-name>
  &lt;servlet-class>test.HelloServlet&lt;/servlet-class>
&lt;/servlet>

&lt;servlet-mapping>
  &lt;url-pattern>/hello/*&lt;/url-pattern>
  &lt;servlet-name>hello&lt;/servlet-name>
&lt;/servlet-mapping>
</example>

<p>Resin allows for a shortcut combining the servlet and
the servlet mapping:</p>

<example title="shortcut servlet-mapping">
&lt;servlet-mapping url-pattern="/hello/*"
                 servlet-class="test.HelloServlet"/>
</example>
</defun>

<defun title="url-pattern" version="Servlet 2.2">
<p>Matches a set of URLs for servlet-mapping.</p>

<deftable>
<tr><th width='25%'>Pattern<th>Description
<tr><td>/foo/bar.html<td>Matches exactly the /foo/bar.html URL.
<tr><td>/foo/*<td>Matches /foo and any children
<tr><td>*.foo<td>Matches any URL with a .foo extension
<tr><td>/<td>Replaces the default servlet.
</deftable>

<p><var///> defines a default handler and <var//*/> defines a prefix handler.
<var//*/> will override extension handlers like <var/*.foo/>. <var///>
will only be used if no other pattern matches.</p>

<p>No default.  Either url-pattern or url-regexp is required.</p>
</defun>

</s2>
</s1>

<s1 title="Miscellaneous Resin Configuration">

<p>This section contains general, i.e. non-HTTP, configuration.
resin.conf is a general configuration file, like NT's registry.
Some Resin modules like logging have their configuration in
resin.conf, but outside the <var/http-server/> block.</p>

<p>Configuration is based on element XML.  The canonical form uses
elements only, like the Servlet 2.2 deployment descriptors.
To make the configuration more readable, you can use an attribute
as syntactic sugar for an element.</p>

<p>The following are equivalent:</p>
<deftable>
<tr><td>&lt;foo>&lt;bar>13&lt;/bar>&lt;/foo><td>canonical representation, but verbose
<tr><td>&lt;foo bar=13/><td>typical configuration
<tr><td>&lt;foo>&lt;bar id=13/>&lt;/foo><td>Useful for a key-based list.
</deftable>

<p>In general, the order is not important, but the nesting depth is.
In this reference guide, <var/caucho.com/http-server/http/port/> refers to
a configuration like:</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;http>
      &lt;port>80&lt;/port>
    &lt;/http>
  &lt;/http-server>
&lt;/caucho.com>
</example>

<p>That example could be rewritten as:</p>

<example>
&lt;caucho.com>
  &lt;http-server>
    &lt;http port='80'/>
  &lt;/http-server>
&lt;/caucho.com>
</example>

<objsummary/>

<s2 title='caucho.com'>

<defun title='resin:include'>
<p>Includes another configuration file.</p>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;host id='host1'>
    &lt;resin:include href='host.conf'/>
  &lt;/host>
  &lt;host id='host2'>
    &lt;resin:include href='host.conf'/>
  &lt;/host>
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='resin:include-directory'>
<p>Includes files in a directory.  All the files in the
directory named by the <var/href/> and which have the given extension
will be inserted into the XML document.</p>

<example>
&lt;caucho.com>
&lt;http-server>
  &lt;host id='host1'>
    &lt;resin:include-directory sub='host.conf' extension='.xml'/>
  &lt;/host>
&lt;/http-server>
&lt;/caucho.com>
</example>
</defun>

<defun title='java'>
<p>Configuration for the Java compiler.  In general, we recommend
using IBM's <var/jikes/> compiler because it's significantly faster than
the "internal" compiler.
</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>classpath<td>extra classpath (Resin 1.2.3)<td>none
<tr><td>compiler<td>Path to the java compiler or "internal"<td>internal
<tr><td>compiler-args<td>Extra args to pass to the compiler<td>none
<tr><td>encoding<td>Character encoding (Resin 1.2.4)<td>none
<tr><td>max-compile-time<td>Limits the time for a Java compilation (Resin 1.2.3)<td>30 sec
</deftable>

<example>
&lt;caucho.com>
  &lt;java compiler='/usr/local/bin/jikes'
         compiler-args='-g'/>
  ...
&lt;/caucho.com>
</example>

<p>The "internal" compiler is the default only because it's always available
for any JDK.  The external jikes compiler is generally a preferred
configuration.</p>
</defun>

<defun title='log'>
<p>Debug log configuration.  Most of Resin's code has debug logging
built in.  The &lt;log> configuration enables that logging, allowing
users to see what's going on.  The debug logging can be useful when
trying to understand what HTTP requests and headers the browser is sending
or Resin is returning.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>default
<tr><td>id<td>Name of debugging section<td>none
<tr><td>href<td>Destination file<td>none
<tr><td>timestamp<td>timestamp format<td>none
<tr><td>rollover-count<td>how many rotated (<var/href.n/>) logs to keep.<td>2
<tr><td>rollover-period<td>How often to rotate the log.<td>none
</deftable>

<p>For example, to log everything to standard error use:</p>

<example>
&lt;caucho.com&gt;
  &lt;log id='/' href='stderr:' timestamp="[%H:%M:%S.%s]"/>
&lt;/caucho.com&gt;
</example>

<deftable>
<tr><th>log <var/id/> value<th>Meaning
<tr><td>/<td>Debug everything
<tr><td>/caucho.com/jsp<td>Debug jsp
<tr><td>/caucho.com/java<td>See all Java compilation
<tr><td>/caucho.com/xsl<td>XSL debugging
<tr><td>/caucho.com/tcp-server
    <td>See thread creation and deletion
<tr><td>/caucho.com/sql
    <td>See database pooling
<tr><td>/caucho.com/http
    <td>HTTP related information
<tr><td>/caucho.com/http/session
    <td>HTTP sessions
<tr><td>/caucho.com/distribution
    <td>Distributed and persistent sessions
<tr><td>/caucho.com/http/cache
    <td>Resin's proxy cache
</deftable>

<p>The timestamp can include the following patterns:</p>

<deftable>
<tr><th>Pattern<th>Meaning
<tr><td>%a<td>short weekday (mon, tue, ...)
<tr><td>%A<td>long weekday (Monday, Tuesday, ...)
<tr><td>%b<td>short month (Jan, Feb, ...)
<tr><td>%B<td>long month (January, February, ...)
<tr><td>%c<td>locale specific date
<tr><td>%d<td>day of month
<tr><td>%H<td>24-hour
<tr><td>%I<td>12-hour
<tr><td>%j<td>day of year
<tr><td>%m<td>month
<tr><td>%M<td>minute
<tr><td>%p<td>am/pm
<tr><td>%S<td>seconds
<tr><td>%s<td>milliseconds
<tr><td>%W<td>week of year
<tr><td>%w<td>day of week
<tr><td>%y<td>2-digit year
<tr><td>%Y<td>4-digit year
</deftable>

</defun>

<defun title='smtp.vfs'>
<p>VFS mailto: configuration.  The smtp.vfs configuration only
applies to the mailto: scheme in Resin's VFS. See the <a href="../java_tut/mail_form.xtp">form mailing</a> tutorial.</p>

<deftable>
<tr><th>Attribute<th>Meaning<th>Default
<tr><td>host<td>SMTP host<td>localhost
<tr><td>port<td>SMTP port<td>25
<tr><td>sender<td>sending mail address<td>The current user and local host
</deftable>

</defun>

<defun title='http-server'>
<p>httpd and srun configuration.</p>

<p>Configures both <a href='http-config.xtp'>http and srun</a>.  The
configuration is identical.</p>

</defun>

<defun name=group-name title='group-name'>
<p>Sets the Unix group.  To listen to port 80, Unix systems require Resin
to start as root.  group-name lets the server change to a safer user after
listening to port 80.</p>

<example>
&lt;caucho.com&gt;
  &lt;user-name>httpd&lt;/user-name>
  &lt;group-name>daemon&lt;/group-name>
&lt;/caucho.com&gt;
</example>
</defun>


<defun title='security-provider'>
<p>Adds a Java security provider without modifying the java.security.</p>

<example>
&lt;caucho.com&gt;
  &lt;security-provider id='com.sun.net.ssl.internal.ssl.Provider'/>
&lt;/caucho.com&gt;
</example>
</defun>

<defun title='security-manager'>
<p>Enables the a Java security manager.  Normal configurations will
not use a security manager, because the security manager slows performance.
ISPs may want to add a security-manager to prevent some actions by
the clients.</p>

<p>By default, all web-apps have read/write/delete access
to the entire web-app.</p>

<example>
&lt;caucho.com&gt;
  &lt;security-manager/>
  ...
&lt;/caucho.com&gt;
</example>
</defun>

<defun title='user-name'>
<p>Sets Unix user.  To listen to port 80, Unix systems require Resin
to start as root.  user-name lets the server change to a safer user after
listening to port 80.</p>

<example>
&lt;caucho.com&gt;
  &lt;user-name>httpd&lt;/user-name>
  &lt;group-name>daemon&lt;/group-name>
&lt;/caucho.com&gt;
</example>

<p>You must use the <var/bin/resin/> launcher to use user-name:</p>

<example>
unix> bin/resin -conf conf/test.conf
</example>

</defun>

</s2>

<s2 title='Formal Description'>

<def>
caucho.com ::= <a href="#java">java</a>,
               <a href="#log">log</a>*,
               <a href="#smtp.vfs">smtp.vfs</a>,
               <a href="#user-name">user-name</a>,
               <a href="#group-name">group-name</a>,
               <a href="#system-property">system-property</a>*,
               <a href="#security-provider">security-provider</a>,
               <a href="#security-manager">security-manager</a>,
               <a href="http-config.xtp">http-server</a>

java ::= <a href="#java">compiler</a>,
         <a href="#java">compiler-args</a>,
         <a href="#java">encoding</a>,
         <a href="#java">classpath</a>
         <a href="#java">max-compile-time</a>

log ::= <a href="#log">href</a>,
        <a href="#log">timestamp</a>,
        <a href="#log">rollover-count</a>,
        <a href="#log">rollover-period</a>

</def>

</s2>
</s1>
</body>
</document>

<document>
<header>
  <title>&lt;host>: Virtual Host configuration</title>
  <version>Resin 3.1</version>

  <description>

  <p>Describes the virtual host configuration tags.</p>

  </description>
</header>
<body>

<localtoc/>

<s1 title="See Also">

<ul>
<li>See the <a href="index-tags.xtp">index</a> for a list of all the tags.</li>
<li>See <a href="webapp.xtp">Web Application</a> configuration for web.xml (Servlet) configuration.</li>
<li>See <a href="env-tags.xtp">Environment</a> configuration for resources: classloader, databases, connectors, and resources.</li>
<li>See <a href="log.xtp">Log</a> configuration for access log configuration, java.util.logging, and stdout/stderr logging.</li>
</ul>

</s1>

<defun title="&lt;access-log>" version="Resin 2.1">
<parents>cluster, host, web-app</parents>

<p>&lt;access-log> configures the access log file.</p>

<p>As a child of <a config-tag="web-app"/>, overrides the
definition in the <a config-tag="host"/> that the web-app is
deployed in. As a child of <a config-tag="host"/>, overrides the
definition in the <a config-tag="server"/> that the host is
in.</p>

<deftable-childtags>
<tr><td>path</td>
    <td>Output path for the log entries,
see <a href="log.xtp#path">"Log Paths"</a>.</td>
    <td>required</td></tr>
<tr><td>format</td>
    <td>Access log format.</td>
    <td>see below</td></tr>
<tr><td>rollover-period</td>
     <td>how often to rollover the log.  Specify in days (15D), weeks (2W), 
        months (1M), or hours (1h). See <a href="#rollover">Rollovers</a>. 
    </td>
    <td>none</td></tr>
<tr><td>rollover-size</td>
    <td>maximum size of the file before a rollover occurs, in bytes (50000), 
        kb (128kb), or megabytes (10mb).  
        See <a href="#rollover">Rollovers</a>.
    </td>
    <td>1mb</td></tr>
<tr><td>archive-format</td>
    <td>the format for the archive filename when a rollover occurs,
        see <a href="#rollover">Rollovers</a>.
    </td>
    <td>see below</td></tr>
<tr><td>resin:type</td>
    <td>a class extending <a href="javadoc|com.caucho.server.log.AccessLog|"/>
        for custom logging
    </td>
    <td>com.caucho.server.log.AccessLog</td></tr>
<tr><td>init</td>
    <td>bean-style initialization for the custom class</td>
    <td>n/a</td></tr>
</deftable-childtags>

<p>The default archive format is
</p><pre>
  <var>path</var> + ".%Y%m%d" or
  <var>path</var> + ".%Y%m%d.%H" if rollover-period &lt; 1 day.
</pre>

<example title="&lt;access-log> in host configuration">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">

  &lt;host id=""&gt;
    &lt;access-log path='log/access.log'&gt;
      &lt;rollover-period&gt;2W&lt;/rollover-period&gt;
    &lt;/access-log&gt;
  &lt;/host>
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<p>The access log formatting variables follow the Apache variables:</p>

<deftable>
<tr><td>%b</td><td>result content length
</td></tr><tr><td>%h</td><td>remote IP addr
</td></tr><tr><td>%{<var>xxx</var>}i</td><td>request header <var>xxx</var>
</td></tr><tr><td>%{<var>xxx</var>}o</td><td>response header <var>xxx</var>
</td></tr><tr><td>%{<var>xxx</var>}c</td><td>cookie value <var>xxx</var>
</td></tr><tr><td>%n</td><td>request attribute
</td></tr><tr><td>%r</td><td>request URL
</td></tr><tr><td>%s</td><td>status code
</td></tr><tr><td>%{<var>xxx</var>}t</td><td>request date with optional time format string.
</td></tr><tr><td>%T</td><td>time of request in seconds
</td></tr><tr><td>%D</td><td>time of request in microseconds (3.0.16)
</td></tr><tr><td>%u</td><td>remote user
</td></tr><tr><td>%U</td><td>request URI
</td></tr></deftable>

<p>The default format is:</p>

<def> "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" </def>

<p><var>resin:type</var> allows for custom logging.  Applications can
extend a custom class from <a href="javadoc|com.caucho.http.log.AccessLog|"/>.  
<a href="doc|config|init">Bean-style initialization</a> can be used to set bean
parameters in the custom class.</p>

<example>
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">

  &lt;host id='foo.com'&gt;
    &lt;access-log resin:type='test.MyLog'&gt;
               path='${server.root}/foo/error.log'
               rollover-period='1W'&gt;
      &lt;init&gt;
        &lt;foo&gt;bar&lt;/foo&gt;
      &lt;/init&gt;
    &lt;/access-log&gt;
    ...
  &lt;/host&gt;

&lt;/cluster>
&lt;/resin>
</example>

</defun>

<defun title="Environment" version="Resin 3.1">
<parents>resin, cluster, host, web-app</parents>

<p>All <a href="env-tags.xtp">Environment tags</a> are
available to the &lt;cluster&gt;.  For example,
resources like &lt;database&gt;.</p>

<example title="host environment">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  &lt;cluster id="app-tier"&gt;
     &lt;server id="a" .../>

     &lt;host id="www.foo.com">
        &lt;database jndi-name="jdbc/test"&gt;
            &lt;driver type="org.postgresql.Driver"&gt;
                &lt;url&gt;jdbc:postgresql://localhost/test&lt;/url&gt;
                &lt;user&gt;caucho&lt;/user&gt;
            &lt;/driver&gt;
        &lt;/database&gt;

        &lt;web-app-default path="webapps"/>
    &lt;/host&gt;
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>

</defun>

<defun title="&lt;error-page>" version="Resin 3.1">
<parents>cluster, host, webapp</parents>

<p>&lt;error-page> defines a web page to be displayed when an error occurs
outside of a web-app.
Note, this is not a default error-page, i.e. if
an error occurs inside of a &lt;web-app&gt;, the error-page for
that web-app will be used instead.</p>

<p>See <a href="webapp.xtp#error-page">webapp: error-page</a>.</p>

</defun>

<defun title="&lt;host>" version="Resin 3.0">
<parents>cluster</parents>

<p>&lt;host> configures a virtual host.  Virtual hosts must be
configured explicitly.</p>

<deftable-childtags>
<tr><td>id</td>
    <td>primary host name</td>
    <td>none</td></tr>
<tr><td>regexp</td>
    <td>Regular expression based host matching</td>
    <td>none</td></tr>
<tr><td>host-name</td>
    <td>Canonical host name</td>
    <td>none</td></tr>
<tr><td>host-alias</td>
    <td>Aliases matching the same host</td>
    <td>none</td></tr>
<tr><td>secure-host-name</td>
    <td>Host to use for a redirect to SSL</td>
    <td>none</td></tr>
<tr><td>root-directory</td>
    <td>Root directory for host files</td>
    <td>parent directory</td></tr>
<tr><td>startup-mode</td>
    <td>'automatic', 'lazy', or 'manual', see <a href="doc|config|resin#startup-mode">Startup and Redeploy Mode</a></td>
    <td>automatic</td></tr>
</deftable-childtags>

<example title="explicit host">
&lt;host host-name="www.foo.com"&gt;
  &lt;host-alias&gt;foo.com&lt;/host-alias&gt;
  &lt;host-alias&gt;web.foo.com&lt;/host-alias&gt;

  &lt;root-directory&gt;/opt/www/www.foo.com&lt;/root-directory&gt;

  &lt;web-app id="/" document-directory="webapps/ROOT"&gt;
    
  &lt;/web-app&gt;
  ...
&lt;/host&gt;
</example>

<example title="regexp host">
&lt;host regexp="([^.]+)\.foo\.com"&gt;
  &lt;host-name&gt;${host.regexp[1]}.foo.com&lt;/host-name&gt;

  &lt;root-directory&gt;/var/www/hosts/www.${host.regexp[1]}.com&lt;/root-directory&gt;

  ...
&lt;/host&gt;
</example>

<p>It is recommended that any &lt;host&gt; using a regexp include
a &lt;host-name&gt; to set the canonical name for the host.</p>

</defun>

<defun title="&lt;host-default>" version="Resin 3.0">
<parents>cluster</parents>

<p>&lt;host-default> configures defaults for a virtual host.</p>

<p>The host-default can contain any of the host configuration tags.
It will be used as defaults for any virtual host.</p>

</defun>

<defun title="&lt;host-deploy>" version="Resin 3.0.4">
<parents>cluster</parents>

<p>&lt;host-deploy> configures an automatic deployment directory
for virtual host.</p>

<p>The host-deploy will add an EL variable \${name}, referring to
the name of the host jar file.</p>

<deftable-childtags>
<tr><td>path</td>
    <td>path to the deploy directory</td>
    <td>required</td></tr>
<tr><td>expand-path</td>
    <td>path to the expansion directory</td>
    <td>path</td></tr>
<tr><td>host-default</td>
    <td>defaults for the expanded host</td>
    <td></td></tr>
<tr><td>host-name</td>
    <td>the host name to match</td>
    <td>${name}</td></tr>
</deftable-childtags>

<p>The following example configures <var>/var/www/hosts</var> as
a host deployment directory.  Each virtual host will have a
<var>webapps</var> directory for .war deployment.  So the directory
<var>/var/www/hosts/www.foo.com/webapps/bar/test.jsp</var> would
serve the URL <var>http://www.foo.com/bar/test.jsp</var>.</p>

<example title="&lt;host-deploy>">
&lt;resin xmlns="http://caucho.com/ns/resin">
  &lt;cluster id="app-tier">
    &lt;root-directory>/var/www&lt;/root-directory>

    &lt;host-deploy path="hosts">
      &lt;host-default>
        &lt;web-app-deploy path="webapps"/>
      &lt;/host-default>
    &lt;/host-deploy>
  &lt;/cluster>
&lt;/resin>
</example>

</defun>

<defun title="&lt;rewrite-dispatch>" version="Resin 3.1">
<parents>cluster, host</parents>

<p>&lt;rewrite-dispatch&gt; defines a set of rewriting rules for
dispatching and forwarding URLs.  Applications can use these rules
to redirect old URLs to their new replacements.</p>

<p>See <a href="rewrite-dispatch.xtp">rewrite-dispatch</a> for more
details.</p>

<example title="rewrite-dispatch">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  &lt;cluster id="app-tier"&gt;

    &lt;host host-name="www.foo.com">
      &lt;rewrite-dispatch&gt;
        &lt;redirect regexp="^/foo" target="/index.php?foo="/&gt;
      &lt;/rewrite-dispatch&gt;
    &lt;/host&gt;

  &lt;/cluster&gt;
&lt;/resin&gt;
</example>

</defun>

<defun title="&lt;web-app>">
<parents>host, web-app</parents>

<p>&lt;web-app> configures a web application.</p>

<deftable-childtags>
<tr><td>id</td><td>The url prefix selecting this application.</td><td>n/a
</td></tr><tr><td>url-regexp</td><td>A regexp to select this application.</td><td>n/a
</td></tr><tr><td>document-directory</td><td>The document directory for
the application, corresponding to a url of <var>/<i>id</i>/</var>. A relative path is relative to the <a config-tag="root-directory"/> of the containing <a config-tag="host"/>.  Can use regexp replacement variables.</td><td>A relative path constricted with the id or the regexp match
</td></tr><tr><td>startup-mode</td><td>`automatic', `lazy', or `manual', see <a href="doc|config|resin#startup-mode">Startup and Redeploy Mode</a></td><td>automatic
</td></tr><tr><td>redeploy-mode</td><td>`automatic' or `manual', see <a href="doc|config|resin#startup-mode">Startup and Redeploy Mode</a></td><td>automatic

</td></tr></deftable-childtags>

<p>When specified by <var>id</var>, the application will be initialized on
server start.  When specified by <var>url-regexp</var>, the application
will be initialized at the first request.  This means that
<var>load-on-startup</var> servlets may start later than expected for
<var>url-regexp</var> applications.</p>

<p>The following example creates a web-app for /apache
using the Apache htdocs directory to serve pages.</p>

<example>
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">

&lt;host id=''&gt;
  &lt;web-app id='/apache' document-directory='/usr/local/apache/htdocs'&gt;

  ...

&lt;/host&gt;

&lt;/cluster>
&lt;/resin>
</example>

<p>The following example sets the root web-app to the IIS
root directory. </p>

<example>
  &lt;web-app id='/' document-directory='C:/inetpub/wwwroot'&gt;
</example>

<p>When the <var>web-app</var> is specified with a <var>url-regexp</var>,
<var>document-directory</var> can use replacement variables (<var>$2</var>).</p>

<p>In the following, each user gets his or her own independent
application using <var>~user</var>.</p>

<example>
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">

  &lt;host id=''&gt;

    &lt;web-app url-regexp='/~([^/]*)'
             root-directory='/home/$1/public_html'&gt;

    ...

    &lt;/web-app&gt;

&lt;/host&gt;

&lt;/cluster>
&lt;/resin>
</example>

</defun>

<defun title="&lt;web-app-default>">
<parents>cluster, host, web-app</parents>

<p>&lt;web-app-default> configures common values for all web applications.</p>
</defun>

<defun title="&lt;web-app-deploy>">
<parents>host, web-app</parents>

<p>&lt;web-app-deploy> specifies war expansion.</p>

<p>web-app-deploy can be used in web-apps to define a subdirectory
for war expansion.  The tutorials in the documentation
use web-app-deploy to allow servlet/tutorial/helloworld to be an
independent war file.</p>

<deftable-childtags>
<tr><td>path</td><td>The path to the webapps directory</td><td>required
</td></tr><tr><td>url-prefix</td><td>url-prefix added to all expanded webapps</td><td>""
</td></tr><tr><td>expand-path</td><td>directory where wars should be expanded</td><td>value of path
</td></tr><tr><td>lazy-init</td><td>true if web-apps should only be initialized when first used</td><td>false
</td></tr><tr><td>web-app-default</td><td>defaults to be applied to expaned web-apps</td><td>
</td></tr><tr><td>web-app</td><td>overriding configuration for specific web-apps</td><td>
</td></tr></deftable-childtags>

<p>The web-app-deploy can override configuration for an expanded war with
a matching &lt;web-app&gt; inside the &lt;web-app-deploy&gt;.  The
&lt;document-directory&gt; is used to match web-apps.</p>

<example title="overriding web.xml">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">

&lt;host host-name="www.foo.com">
  &lt;web-app-deploy path="webapps"&gt;
    &lt;web-app context-path="/wiki"
                document-directory="wiki"&gt;
      &lt;context-param database="jdbc/wiki"&gt;
    &lt;/web-app&gt;
  &lt;/web-app-deploy&gt;
&lt;/host>

&lt;/cluster>
&lt;/resin>
</example>

</defun>

</body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>Configuring a Service on the Resin ESB using IoC</title>
    <description>
      <p>A service on the Resin ESB can be configured easily using IoC.
      </p>
    </description>
    <type>tutorial</type>
    <tutorial-startpage>demo.jsp</tutorial-startpage>
  </header>

  <body>
    <summary/>

  <s1>
<p>Services on the Resin ESB can be configured easily using IoC.  
</p>
</s1>

<s1 title="Files in this tutorial">
<deftable>
<tr><td><viewfile-link file="WEB-INF/classes/example/HelloService.java"/>
    </td><td>Interface for the hello service.
</td></tr><tr><td><viewfile-link file="WEB-INF/classes/example/HelloServiceImpl.java"/>
    </td><td>The main service implementation.
</td></tr><tr><td><viewfile-link file="WEB-INF/resin-web.xml"/>
    </td><td>Configures the environment
</td></tr><tr><td><viewfile-link file="demo.jsp"/>
    </td><td>Client JSP
</td></tr></deftable>
</s1>

<s1 title="Service Implementation">

<p>The HelloService implementation for this tutorial still conforms to the
same API as in the 
<a href="../hello-world/index.xtp">Simple Service tutorial</a>, but 
now includes an injection setter method to allow the hello message to be
changed via IoC.
</p>

<example title="HelloServiceImpl.java">
package example;

public class HelloServiceImpl implements HelloService {
  private String _hello;

  /**
   * Injection setter for the _hello field.
   */
  public void setHello(String hello)
  {
    _hello = hello;
  }

  /**
   * Returns "hello, world".
   */
  public String hello()
  {
    return _hello;
  }
}
</example>

</s1>

<s1 title="Remote Interface">

<p>The Java interface describes the remote API.  The API here is the same
as in the <a href="../hello-world/index.xtp">Simple Service tutorial</a>.
</p>

<example title="HelloService.java">
package example;

public interface HelloService {
  /**
   * Returns "hello, world".
   */
  public String hello();
}
</example>

</s1>

<s1 title="Service configuration">

<p>
The configuration of this service is almost identical to 
the <a href="../hello-world/index.xtp">Simple Service tutorial</a>, but now
includes data to be injected into the service.  Specifically, the hello
message is changed in the &lt;init> child tag of &lt;web-service>.
</p>

<example title="<web-service>">
&lt;web-service class="example.HelloServiceImpl">
  &lt;jndi-name>example/HelloService&lt;/jndi-name>

  &lt;init>
    &lt;hello>salut, le monde&lt;/hello>
  &lt;/init>

  &lt;hessian>
    &lt;api-class>example.HelloService&lt;/api-class>
    &lt;http>
      &lt;url-pattern>/hello/&lt;/url-pattern>
    &lt;/http>
  &lt;/hessian>
&lt;/web-service>
</example>

<p>
Since the service API has not changed, the &lt;web-service-client> tag
and its contents remain unchanged from the
<a href="../hello-world/index.xtp">Simple Service tutorial</a>.
</p>

<example title="<web-service-client>">
&lt;web-service-client jndi-name="hessian/HelloService">
  &lt;url>hessian:http://localhost:8080/resin-doc/esb/tutorial/hello-world/hello/&lt;/url>
  &lt;interface>example.HelloService&lt;/interface>
&lt;/web-service-client>
</example>

</s1>

<s1 title="Java Client">

<p>The client can now connect to the HelloService using any supported
encoding simply by doing a lookup in JNDI.  The message returned now 
is the one injected via IoC.</p>

<example title="demo.jsp">
&lt;%@ page import="com.caucho.naming.Jndi" %>
&lt;%@ page import="example.HelloService" %>
&lt;%
HelloService hessianHello = (HelloService) Jndi.lookup("hessian/HelloService");
HelloService vmHello = (HelloService) Jndi.lookup("service/HelloService");
%>
&lt;pre>
From Hessian: &lt;%= hessianHello.hello() %>
From VM: &lt;%= vmHello.hello() %>
&lt;/pre>
</example>
<results>
From Hessian: salut, le monde
From VM: salut, le monde
</results>

</s1>

  </body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>A Simple Service on the Resin ESB</title>
    <description>
      <p>Writing a service for the Resin ESB as a plain-old Java object (POJO)
      eliminates protocol dependencies and simplifies service testing.
      </p>
    </description>
    <type>tutorial</type>
    <tutorial-startpage>demo.jsp</tutorial-startpage>
  </header>

  <body>
    <summary/>

  <s1>
<p>With the Resin Enterprise Service Bus (ESB), services can be written as 
plain-old Java objects (POJOs) and made available to many different protocols.
</p>
</s1>

<s1 title="Files in this tutorial">
<deftable>
<tr><td><viewfile-link file="WEB-INF/classes/example/HelloService.java"/>
    </td><td>Interface for the hello service.
</td></tr><tr><td><viewfile-link file="WEB-INF/classes/example/HelloServiceImpl.java"/>
    </td><td>The main service implementation.
</td></tr><tr><td><viewfile-link file="WEB-INF/classes/example/HelloResult.java"/>
    </td><td>The result object
</td></tr><tr><td><viewfile-link file="WEB-INF/resin-web.xml"/>
    </td><td>Configures the environment
</td></tr><tr><td><viewfile-link file="demo.jsp"/>
    </td><td>Client JSP
</td></tr></deftable>
</s1>

<s1 title="Service Implementation">

<p>The HelloService implementation is just a Java class that implements
the HelloService API.  For Java Web Service compatibility, the class also
has @WebService and @WebMethod annotations.</p>

<example title="HelloServiceImpl.java">
package example;

import javax.jws.WebMethod;
import javax.jws.WebService;

@WebService(endpointInterface="example.HelloService")
public class HelloServiceImpl implements HelloService {
  /**
   * Returns "hello, world".
   */
  @WebMethod
  public HelloResult hello()
  {
    return new HelloResult();
  }
}
</example>

<p>In this case the result object, of type HelloResult, is simply a wrapper
around a String.  In more complex cases, the JAXB annotations make it possible
to return complex objects as XML.</p>

<example title="HelloResult.java">
package example;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement(name="hello")
public class HelloResult {

  @XmlElement
  public String value = "hello, world";

  public String toString()
  {
    return value;
  }
}
</example>

</s1>

<s1 title="Remote Interface">

<p>The Java interface describes the remote API.  This example has a
single method, <code>hello()</code>.</p>

<example title="HelloService.java">
package example;

public interface HelloService {
  /**
   * Returns "hello, world".
   */
  public HelloResult hello();
}
</example>

</s1>

<s1 title="Service configuration">

<p>Services on the Resin ESB are configured with the &lt;web-service>
tag.  The implementation class is given as the <code>class</code> attribute.
To register the service in JNDI, use a &lt;jndi-name> child tag.
</p>

<p>
To expose the service as a Hessian service, use the &lt;hessian> tag.
Hessian is one of the <em>service encodings</em> available for web services.
SOAP is also available. <!-- TODO: add this to this example -->
</p>

<p>
Here a REST interface is also exposed.  In this example, the REST interface
allows two <em>REST bindings</em>, a path-based binding and a query-based
binding.  A path-based binding interprets URLs of the form 
<i>http://www.foo.com/myMethod/foo/bar</i> to be a call to the method
"myMethod" with two arguments, "foo" and "bar".  A query-based binding
interprets URLs of the form 
<i>http://www.foo.com/?method=myMethod&amp;arg1=foo&amp;arg2=bar</i>
in the same way.
</p>

<p>
<a href="hello/rest/hello/">Path binding</a><br/>
<a href="hello/rest/?method=hello">Query binding</a>
</p>

<p>
Each service encoding must also have a <em>transport</em>.  By default, 
services use HTTP as a transport and thus must specify a &lt;url-pattern>     
to indicate the location of the service.
</p>

<example title="<web-service>">
&lt;web-service class="example.HelloServiceImpl">
  &lt;jndi-name>service/HelloService&lt;/jndi-name>

  &lt;hessian>
    &lt;url-pattern>/hello/hessian/&lt;/url-pattern>
  &lt;/hessian>

  &lt;rest>
    &lt;query-binding/>
    &lt;path-binding/>
    &lt;url-pattern>/hello/rest/*&lt;/url-pattern>
  &lt;/rest>
&lt;/web-service>
</example>

<p>
Resin's ESB also makes it easy to access services using the 
&lt;web-service-client> tag.  This tag connects to a service
using a URL of the form <i>&lt;encoding>:&lt;protocol>:&lt;location></i>.
The example below shows just such a URL.  The interface of the service
and a JNDI name must also be given.  The &lt;web-service-client> tag
creates a proxy client instance for the service and registers the
proxy with the given JNDI name.</p>

<example title="<web-service-client>">
&lt;web-service-client jndi-name="hessian/HelloService">
  &lt;url>hessian:${webApp.url}/hello/&lt;/url>
  &lt;interface>example.HelloService&lt;/interface>
&lt;/web-service-client>
</example>

</s1>

<s1 title="Java Client">

<p>The client can now connect to the HelloService using any supported
encoding simply by doing a lookup in JNDI.</p>

<example title="demo.jsp">
&lt;%@ page import="com.caucho.naming.Jndi" %>
&lt;%@ page import="example.HelloService" %>
&lt;%
HelloService hessianHello = (HelloService) Jndi.lookup("hessian/HelloService");
HelloService vmHello = (HelloService) Jndi.lookup("service/HelloService");
%>
&lt;pre>
From Hessian: &lt;%= hessianHello.hello() %>
From VM: &lt;%= vmHello.hello() %>
&lt;/pre>
</example>
<results>
From Hessian: hello, world
From VM: hello, world
</results>

</s1>

  </body>
</document>

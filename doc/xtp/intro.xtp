<document>
  <header>
    <product>resin</product>
    <resin-2.0>$resin/ref/xtp.xtp</resin-2.0>
    <title>XTP (XML Template Pages) Introduction</title>
    <description>
      <p>XTP (XML Template Pages) enhances JSP pages with stylesheets.
        Sophisticated projects can split page formatting from the
        JSP-generated content.  Splitting the graphic design from the
        JSP programming helps a web site in several ways:
      </p>

        <ul>
          <li>Stylesheets automatically reformat the entire site, so the
            web site becomes more flexible.
          </li><li>Repetitive HTML formatting patterns are defined once, reducing
            formatting errors.
          </li><li>Multiple stylesheets can reformat the same content, displaying
            views for browsers, handheld devices, and syndication.
          </li><li>XTP pages are compiled to JSP, so they have the same performance
            as JSP.
        </li></ul>

      <p>XTP uses XSLT to transform HTML into new
        HTML.  XTP treats unknown tags as raw text.  Pure XML requires XSLT
        stylesheets to be valid XML.  XTP can be configured to follow strict
        XSLT syntax, by setting the servlet init-param 'xsl-strict' to true.</p>


      <p>Since XTP is standards-based, developers benefit from widely-available
        public documentation, tutorials and support.  Stylesheets are written
        in the W3C standard <a href="xslt|index">XSLT</a> (XML Stylesheet
        Language) and produce <a href="jsp|index">JSP</a> (Java Server Pages).</p>
    </description>
  </header>

  <body>
    <summary/>

<s1 name="blank" title="Style Example">

<p>The following shows a simple example of formatting JSP using
stylesheets.  The stylesheet formats a custom tag,
<var>&lt;exclamation&gt;</var>.  The exclamation translates
into the HTML <var>&lt;h1&gt;</var> and can be easily changed
to any desired format.</p>

<p>Except for the formatting tags, the *.xtp file is a normal *.jsp
file describing an HTML page.  Unlike JSP which copies its content as
raw text, XTP parses the HTML contents into an internal tree (the XML
DOM).  A more aggressive *.xtp could use XML but most will
use XML only where useful.  Expressions, scriptlets, and
declarations work just as JSP pages.</p>

<example title="hello.xtp">
&lt;?xml-stylesheet href="hello.xsl"?&gt;
&lt;head&gt;
&lt;title&gt;Hello, world&lt;/title&gt;

&lt;% int count; %&gt;
&lt;/head&gt;

&lt;exclamation&gt;Hi, World!&lt;/exclamation&gt;

Count: &lt;%= count++ %&gt;
</example>

<p>For everything but <var>exclamation</var>, the stylesheet copies its
input directly to the output.  Using this technique, you can add tags
as you develop them.  So a project can incrementally benefit from
XTP; you don't need to entirely redesign your site.</p>

<example title="hello.xsl">
&lt;xsl:output disable-output-escaping="true"/&gt;

&lt;!-- copy everything not matching to the output --&gt;
&lt;xsl:template match="*|@*"&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:apply-templates select="node()|@*"/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;!-- format the exclamation --&gt;
&lt;xsl:template match="exclamation"&gt;
  &lt;h1&gt;
    &lt;xsl:apply-templates select="node()|@*"/&gt;
  &lt;/h1&gt;
&lt;/xsl:template&gt;
</example>

<p>The XTP engine produces a standard JSP file as an
intermediate form.  The generated JSP will process the request.
Since it's standard JSP, you can use any JSP or Servlet feature,
including using custom JSP tags (although XSL tags are generally
more efficient.)</p>

<p>Unless the XTP source or the stylesheet changes, the XTP engine
will continue to use the compiled JSP page without additional
stylesheet processing.  So the XTP has the same performance of a JSP
page, with the flexibility of the stylesheet.</p>

<example title="_jsp/_hello.jsp">
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello, world&lt;/title&gt;

    &lt;% int count; %&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;h1&gt;Hi, World!&lt;/h1&gt;

    Count: &lt;%= count++ %&gt;
  &lt;/body&gt;
&lt;/html&gt;
</example>

</s1>

<s1 title="XTP Syntax">

<p>By default, XTP pages are read in as HTML.  Non-HTML tags are treated
as XML, i.e. they're expected to have an end tag for every begin tag.
By allowing HTML as a primary input format, XTP pages provide a smooth
transition path.  Sites don't need to transform every page to XML to
take advantage of XTP's formatting.</p>

<p>Pages can also be written in strict XML.   If the page begins
with <var>&lt;?xml ... ?&gt;</var>, it will be read as strict XML.  New sites
may choose to design using a strict XML base.</p>

</s1>

<s1 title="Stylesheets">

<p>XTP Stylesheets can either use the XSLT or <a href="doc|xtp|stylescript">XSLT-lite</a> syntax.  Both have the same
capabilities.  XSLT-lite is more maintainable and readable, but XSLT
is a W3C standard.</p>

<s2 title="Selecting in the XTP file">

<p>XTP pages generally select their stylesheet using the standard
<var>xml-stylesheet</var> processing instruction.  If no stylesheet is
selected, the XTP page will use <var>default.xsl</var>.</p>

<example>
&lt;?xml version="1.0"&gt;
&lt;?xml-stylesheet href="sample.xsl"?&gt;
&lt;top&gt;
  &lt;a/&gt;
  &lt;b/&gt;
&lt;/top&gt;
</example>

</s2>

<s2 title="Stylesheet Search Path">

<ol>
<li>The directory of the XTP file.
</li><li>The application root.
</li><li>WEB-INF/xsl.
</li><li>The Java classpath.
</li></ol>

<p>When building libraries of stylesheets, using the Java classpath
has several advantages.  It's naturally arranged in a path, it's familiar,
and it is well supported by the servlet engines.</p>

</s2>

<s2 title="Dynamic Stylesheets">

<p>The request parameter <var>caucho.xsl.stylesheet</var> selects the
stylesheet for the XTP page.  If set, it overrides the value specified
in the XTP page.  A filter servlet can set <var>caucho.xsl.stylesheet</var>
to process the same page with different styles.  For example, a User-Agent
filter could select a different stylesheet for a Palm client or for a
printable version of the page.</p>

<example>
public void service(HttpServletRequest req,
                    HttpServletResponse res)
  throws IOException, ServletException
{
  String style = req.getParameter("style");

  if (style != null &amp;&amp; style.equals("print"))
    request.setAttribute("caucho.xsl.stylesheet", "print.xsl");

  RequestDispatcher disp;
  disp = getServletContext().getNamedDispatcher("xtp");

  disp.forward(req, res);
}
</example>

</s2>

</s1>

<s1 title="Servlet Parameters">

<p>The XTP engine can set <var>xsl:param</var> variables taken from the
servlet request.  Stylesheets can use these variables,
like <var>xtp:path_info</var>, to create several web pages out of a single
source XTP.  A section, for example, might only be displayed if it
matches the <var>request.getPathInfo()</var>.</p>

<p>Stylesheets must use <var>xsl:param</var> to use servlet parameters.
Unless the stylesheet declares its parameters, XTP will not pass the
values to the stylesheet.</p>

<deftable>
<tr><th>xsl:param</th><th>Servlet Value
</th></tr><tr><td>xtp:context_path</td><td>request.getContextPath()
</td></tr><tr><td>xtp:servlet_path</td><td>request.getServletPath()
</td></tr><tr><td>xtp:path_info</td><td>request.getPathInfo()
</td></tr><tr><td><var>name</var></td><td>request.getParameter("<var>name</var>")
</td></tr></deftable>

<example>
&lt;xsl:param name="xtp:path_info"/&gt;

&lt;!-- by default, section is not displayed --&gt;
&lt;xsl:template match="section"/&gt;

&lt;xsl:template match="section[$xtp:path_info=@name]"&gt;
  &lt;h1&gt;&lt;xsl:value-of select="@title"&gt;&lt;/h1&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;
</example>

<p>A sample XTP file might look like:</p>

<example>
&lt;body&gt;
&lt;section title="Introduction"&gt;

This is the introduction.

&lt;/section&gt;
&lt;section title="Conclusion"&gt;

This is the conclusion.

&lt;/section&gt;
&lt;/body&gt;
</example>

</s1>
  </body>
</document>
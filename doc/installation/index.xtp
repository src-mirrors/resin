<document>
  <header>
    <product>resin</product>
    <version>Resin 4.0</version>
    <title>Resin Installation</title>

    <description>
      <p><b><em>Resin Step-by-Step Installation Guide</em></b>  
      If you've decided that you're ready to deploy Resin for 
      production, this page will guide you through the steps
      to install this powerful application server system-wide.
      You'll see where we recommend installing the various components
      of Resin as well as some basic production tuning tips.
      </p>
    </description>
  </header>

  <body>

    <localtoc/>
<s1 title="Resin Server Installation">
<p><b>This page is for you if you: </b></p>
<ul>
  <li>Are evaluating Resin</li>
  <li>Want to do local application development with Resin</li>
  <li>Have evaluated Resin and are ready to install system-wide</li>
</ul>
<p>
This page leads you step-by-step through the installation of Resin.  
After going through these steps, you'll have a full Java and PHP 
Application Server able to serve even the most demanding web sites.
</p>

<p><b>You'll learn:</b></p>
<ul>
  <li>How to install Resin system-wide</li>
  <li>The recommended installation locations for Resin</li>
  <li>How to run the Resin administration application</li>
</ul>

<s2 title="Preparing for installation">
<ol>
<li>Install JDK 1.5 or later.  You'll need to set the JAVA_HOME
variable in your shell or link /usr/java to the Java home
directory.</li>
<li>Download the latest version of Resin 4 from the <a
href="http://www.caucho.com/download">Resin download page</a>.
Grab the Professional version if:
<ul>
  <li>You have purchased a Resin Professional license.</li>
  <li>You have obtained an evaluation Resin Professional license.</li>
  <li>
    You are considering purchasing Resin Professional (without
    a license, Resin Professional simply downgrades to the open 
    source functionality).  This will make it easier to upgrade in the 
    future.
  </li>
</ul>
</li>
<li>Unzip or untar the Resin download.  If you downloaded Resin
Professional, it will unzip into resin-pro-4.x.x/, otherwise it
will download into resin-4.x.x/.</li>
</ol>
</s2>

<s2 title="Installing Resin on Unix or Mac OS X">
<p>
If you're installing Resin on Windows, you can skip to the next section.
If you're installing Resin on Ubuntu or Debian and want to use the .deb
packaged version of Resin, skip to the end of this section.
</p>

<s3 title="Configuring the build process for Resin">
<p>
Next we'll change into the Resin directory we just unpacked to
configure and build the server.  The Java portions of Resin are
already compiled, but this step will build additional C-based
components of Resin that provide additional functionality such as:
</p>
<ul>
  <li>A faster IO library, including massive keepalive support *</li>
  <li>Support for OpenSSL *</li>
  <li>The ability to run as a non-priviledged user for security</li>
  <li>Connector modules for Apache</li>
</ul>
<p>
(* only available in Resin Professional)
</p>
<p>
The following command installs Resin and its files into the recommended
locations on the file system:
</p>
<example>
./configure --prefix=/usr/local/resin \
            --with-resin-root=/var/www \
            --with-resin-log=/var/log/resin \
            --with-resin-conf=/etc/resin
</example>

<p>
This will configure Resin to install in <var>/usr/local/resin</var>,
with support for OpenSSL if it was detected, but without support
for Apache.  If you want to use Apache or another 3rd party HTTP
server in front of Resin (unrecommended), please take a look
at our <a href="install-3rd-party.xtp">third-party HTTP server
setup documentation</a>.  If you need to configure other options
with Resin, now is the time to do it.  Please consult the <a
href="configure.xtp">reference to all the configuration options</a>.
</p>

<p>
Once you've run the configuration successfully, the configure script
will display a summary like the following:
</p>
<example>
Resin Configuration summary:

  RESIN_HOME: /usr/local/resin
      root: /var/www
      conf: /etc/resin/conf
      log : /var/log/resin
      init: /etc/init.d/resin

  + epoll() for keepalives
  + OpenSSL 0.9.8g 19 Oct 2007
      OpenSSL include: /usr/include
      OpenSSL lib: /usr/lib
      OpenSSL libraries:  -lssl -lcrypto

  JAVA_HOME: /usr/lib/jvm/java-6-sun
    + 32-bit JNI in -I/usr/lib/jvm/java-6-sun/include \
                    -I/usr/lib/jvm/java-6-sun/include/linux
      JNI CFLAGS: -g -O2 -DPOLL -DEPOLL -D_POSIX_PTHREAD_SEMANTICS \
                  -DHAS_SOCK_TIMEOUT -DHAS_JVMTI
</example>
</s3>

<s3 title="Building and Installing Resin">
<p>Now that you've configured the Resin build process, all you need to
do is build and install! To build, just run</p>
<example>
make
</example>
<p>If this step went well, you'll now need to install the Resin files as
the root user:</p>
<example>
sudo make install
</example>
<p>Where ever you install Resin to, we'll refer to that directory as
<b>resin.home</b>.</p>
<p>
If you have a license file for Resin, save it in <var>/usr/local/resin/licenses</var>
</p>
</s3>

<s3 title="Installing Resin using the .deb package on Ubuntu and Debian">
<p>
We provide a Debian packaged version of Resin that Debian and Ubuntu
users can take advantage of.  It performs all of the installation
steps above for you and creates all the recommended server and
content directories.  Simply download from the <a
href="http://caucho.com/download">Resin download page</a> and install
using dpkg.
</p>
<p>
Alternatively, you can add Caucho's Debian repository to your system's
repositories to use automated update tools like Synaptic and apt-get.
To do this, add the following line to your <var>/etc/apt/sources.list</var>
</p>
<example>
deb http://caucho.com/download/debian/ unstable universe
deb http://caucho.com/download/debian/ unstable multiverse 
</example>
<p>
After adding this line, update your local repository cache by running:
</p>
<example>
apt-get update
</example>
<p>
Finally, install Resin Professional using the following:
</p>
<example>
apt-get install resin-pro
</example>
<p>
If you have a license file for Resin, save it in <var>/usr/local/resin/licenses</var>
</p>
<p>
Or install Resin Open Source with this command:
</p>
<example>
apt-get install resin
</example>
</s3>
</s2>

<s2 title="Installing Resin on Windows">
<p>
The native libraries that are included with Resin are precompiled
for Windows in both 32-bit and 64-bit mode.  These libraries provide:
</p>
<ul>
  <li>A faster IO library, including massive keepalive support *</li>
  <li>Support for OpenSSL *</li>
  <li>Connector modules for Apache/IIS</li>
</ul>
<p>
(* only available in Resin Professional)
</p>

<ol>
<li>Download the latest version of Resin 4 from the <a
href="http://www.caucho.com/download">Resin download page</a>.
Grab the Professional version if:
<ul>
  <li>You have purchased a Resin Professional license.</li>
  <li>You have obtained an evaluation Resin Professional license.</li>
  <li>
    You are considering purchasing Resin Professional (without
    a license, Resin Professional simply downgrades to the open 
    source functionality).  This will make it easier to upgrade in the 
    future.
  </li>
</ul>
</li>
<li>Unzip or untar the Resin download.  If you downloaded Resin
Professional, it will unzip into resin-pro-4.x.x\, otherwise it
will download into resin-4.x.x\.
</li>
<li>Move the directory from the previous step to <var>C:\Resin</var>
</li>
<li>Run <var>C:\Resin\setup.exe</var></li>
<li>If you have a license file for Resin, save it in <var>C:\Resin\licenses</var></li>
</ol>
</s2>
</s1>

<s1 title="Resin Content Installation">
<p>Once your have the Resin server installed, you can start installing your
content.</p>

<s2 title="Content from the top down">
<p>Resin and JavaEE organize content into "web applications" or
webapps. As an administrator, your developers have probably provided
you with a webapp in the form of a .war file or a webapp directory.
In the Resin root directory is a special subdirectory named
<code>webapps</code> which is a <b>webapp deploy directory</b>.
Deploying applications in Resin is as easy as copying a .war
file or web application directory to one of these webapp deploy
directories. Resin detects the applications and deploys them
automatically.</p>

<figure src="content-directories.png"/>

<p>
In the directory structure above, notice the special webapp
directories named "ROOT".  These will map to the "/" (root)
application.  Other webapps will map to their name.  For example,
"wordpress" will map to "http://www.example.com/wordpress".
</p>
</s2>

<s2 title="Permanent content locations">

<p>Resin is configured to use the content directory structure show above
by default.  In the examples, the Resin <b>root directory</b> is 
<var>/var/www</var>.  This directory is also the recommended content root
for Unix.  For Windows, the recommended content root is <var>C:\www</var>.
To specify the root directory to Resin, you pass it on the
command line when starting the server.  For example:
</p>

<example>
java -jar ${resin.home}/lib/resin.jar --root-directory /var/www start
</example>

<p>
If you use the Unix startup scripts mentioned in the next section, they
automatically specify the root and log directories.
</p>

</s2>
</s1>

<s1 title="Starting Resin">
<s2 title="Creating Unix startup scripts for Resin">
<p>When you installed using the .deb package or when you ran "make install"
earlier, the installer created a file named <var>/etc/init.d/resin</var>
which contains a standard Unix init.d startup file.  This file will start
Resin when invoked as:
</p>
<example>
/etc/init.d/resin start
</example>
<p>Use the tools that came with your system to execute the script
on startup.  
</p>
</s2>
<s2 title="Installing Resin as a Windows Service">
<p>
Resin can be installed as a Windows Service from a setup.exe utility supplied with
  the distribution. The setup.exe utility requires administrative privileges and will
  upon start-up ask for administrative privileges.
</p>
<figure src="setup-exe.png"/>
</s2>
</s1>

<s1 title="Creating a password for the Resin Administration Console">
<p>
One of the most useful tools provided with Resin is the built-in,
web-based administration console.  This tool provides detailed
information about the operation of the server, a feature that is 
very useful to administrators, but one which must be kept secure from
unauthorized users.  </p>
<p>
If you are deploying Resin to a production machine, it's likely
that you won't be running your browser on the same system as the
server. In this case, you'll need to configure Resin to allow
you to access the server remotely.
</p>
<ol>
  <li>Edit <var>/etc/resin/resin.xml</var></li>
  <li>Change the line:
    <example>
&lt;resin:set var="resin_admin_external" value="false"/>
    </example>
    <p>to</p> 
    <example>
&lt;resin:set var="resin_admin_external" value="true"/>
    </example>
  </li>
  <li>Save <var>/etc/resin/resin.xml</var> and restart the server.</li>
  <li>Replace "localhost" with the name of your host in the URLs below.</li> 
</ol>
<p>
Now that you're able to access the administration application,
you have to set up a password and install it.  In order to prove
that you have access to the machine on which Resin is running,
the only way to change the password is to create a file with the
authentication information on that machine.  
</p>
<ol>
<li>Browse to <var>http://localhost:8080/resin-admin/</var><br/><br/>
</li>
<li>Enter a username and password in the lower half of the page, then 
click "Create Configuration File".  The recommended username is "admin".

<figure src="admin-password-create.png"/>

</li>
<li>After going to the next page, a new "admin-users.xml.generated"
file has been created for you in the same directory as your
resin.xml file is located.  (If you followed the directions above,
this should be in /etc/resin for Unix and C:\Resin\conf for Windows.)
Just rename this file to admin-users.xml and Resin will use it to
<figure src="admin-password-save.png"/>
</li>
<li>Browse back to <var>http://localhost:8080/resin-admin/</var>.  The
change you made should force Resin to restart and return a 503 error. 
Just hit refresh in a few moments to bring up the page again.</li>
<li>You should now be able to login using the username and password
that you gave above.</li> 
</ol>
</s1>

<s1 title="Troubleshooting">
<p>If something went wrong above, the first place to check for problems is
the log.</p>
<ul>
  <li>If you are using Unix, look in <var>/var/log/resin/jvm_default.log</var></li>
  <li>If you are using Windows, look in <var>C:\Resin\log\jvm_default.log</var></li>
</ul>
<p>Hopefully, the log message will be clear enough for you to figure out the
problem.  If not, you have a number of resources available to you to help
you figure out what's going wrong:</p>
<ul>
  <li>The <a href="http://maillist.caucho.com/">Resin mailing list</a>.</li>
  <li>The <a href="http://forum.caucho.com/">Resin Forums</a>.</li>
  <li><a href="mailto:presales@caucho.com">Presales technical support</a> for 
      those considering purchasing Resin Professional.</li>
  <li><a href="http://store.caucho.com/">Paid technical support</a> directly
  from the Resin developers.</li>
</ul>
</s1>

</body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>Resin with Apache and IIS</title>
    <description>
      <p>Resin provides a fast servlet runner for Apache 2.2, and IIS
         allowing these HTTP servers to dispatch requests to Resin.
      </p>

    </description>
  </header>

<body>

<localtoc/>

<s1 name="standalone" title="Before you integrate Resin with Apache or IIS">
<p>
Before integrating Resin with Apache, it is valuable to configure Resin as a
<a href="install.xtp">standalone server</a>, especially with more
complicated setups such as those involving virtual hosts.  Doing so isolates
the steps and makes troubleshooting easier.
</p>
 
<p>
Many users find that the performance, flexibility, and features of
Resin make it a desirable replacement for Apache and IIS.  These
3rd party HTTP servers add overhead to Resin's operation, therefore
you should have a specific reason to run one of them with Resin.
</p>
</s1>

<s1 name="apache" title="Using Resin with Apache">
<s2 name="dispatch" title="How Resin integrates with Apache">

<p>When used with Apache, Resin serves JSPs and Servlets and Apache serves
static content like html and images.  Apache is a frontend server, it handles
the request from the browser. Resin's <code>mod_caucho</code> plugin integrates
with Apache, it dispatches requests for JSPs and Servlets to one or more
backend Resin servers.</p>

<figure src="apache_srun.gif"/>

<p>
mod_caucho queries the backend server to distinguish the URLs going to Resin
from the URLs handled by Apache.  The backend server uses the
&lt;servlet-mapping&gt; directives to decide which URLs to send.  Also, any *.war
file automatically gets all its URLs.  Other URLs stay with Apache.
</p>

<p>
There's a more complete discussion of the URL dispatching in the
<a href="../doc/plugin-dispatch.xtp">How the Plugins Dispatch to Resin</a> page.
</p>

</s2> <!-- dispatch -->

<s2 name="unix" title="Unix Installation">

<p>Resin needs Apache 2.x or greater and DSO support.  You probably have DSO
support, but if you're not sure, you can check for <var>mod_so.c</var> when
running <code>httpd -l</code>:
</p>

<example title="checking apache httpd for mod_so.c">
unix&gt; /usr/local/apache/bin/httpd -l
Compiled-in modules:
  ...
  mod_so.c
  ...
</example>

<p>If you don't have DSO support, you can recompile Apache or install another
package from your operating system vendor.  Check their documentation for
more details.</p>

<s3 title="Compiling mod_caucho.so">

<p>
Compiling <var>mod_caucho</var> on Unix is usually as easy as changing the way that
you configure Resin during installation:
</p>

<ol>
  <li>Locate the <var>apxs</var> program that is included with Apache.</li>
  <li> Follow the <a href="install.xtp">Resin installation instructions</a>.
  In addition to any other configure script options, add the 
  <code>--with-apxs</code> option.  Assuming that your apxs program is in
  /usr/sbin/apxs, you might run configure in the following way:
<example>
unix&gt; ./configure --with-apxs=/usr/sbin/apxs --prefix=/usr/local/resin
</example>
  </li>
  <li>Run <code>make</code> and <code>make install</code> as specified in the
  installation instructions.  In addition to building the normal Resin native 
  libraries, these steps will also build mod_caucho, install it, and add some
  directives to the end of your httpd.conf file configuring mod_caucho.
  </li>
</ol>
</s3>


</s2> <!-- unix -->

<s2 name="windows" title="Windows Installation">
<p>
The <code>setup.exe</code> program installs the mod_caucho.dll
plugin for any Apache it finds, and modifies the Apache httpd.conf file.
</p>

<p>
The httpd.conf file is also easily modified manually:
</p>

<example title="httpd.conf">
LoadModule caucho_module \
    &lt;resin.home&gt;/win32/apache-2.0/mod_caucho.dll

ResinConfigServer localhost 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

<p>
Replace <var>win32</var> with <var>win64</var> above if you're using a 64-bit
version of Apache.
</p>

</s2> <!-- windows -->


<s2 title="Configuring resin.xml">

<p>
The communication between <code>mod_caucho</code> and the backend Resin
server takes place using a <var>server</var> port.
</p>

<p>
The <code>resin.xml</code> for the backend server contains
a <code>server</code> to enable the port.  The default <code>resin.xml</code>
has an server listener on port 6800.
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;cluster id="app-tier"&gt;
    ...
    <b>&lt;server id="" address="127.0.0.1" port="6800"/&gt;</b>
    ...
</example>


<p>
The resin.xml and the layout of your webapps should match the
layout that Apache expects.  The mapping of urls to filesystem locations
should be consistent between Apache and the backend Resin server.
</p>


<p>The default resin.xml looks in
<code>&lt;resin.root&gt;/webapps/ROOT</code> 
for JSP files and <code>&lt;resin.root&gt;/webapps/ROOT/WEB-INF/classes</code>
for servlets and java source files.  To tell Resin
to use Apache's document area, you configure an explicit 
<var>web-app</var> with the appropriate document-directory:
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;cluster id=""&gt;
    ...
    &lt;host id=""&gt;
      &lt;web-app id='/' document-directory="/usr/local/apache/htdocs"/&gt;
    &lt;/host&gt;
    ...
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>

</s2>

<s2 name="httpd.conf" title="Configuring Apache httpd.conf">

<p>
The <code>ResinConfigServer</code> is used to tell mod_caucho how to contact
the backend Resin server.  The backend Resin server tell's mod_caucho which urls
should be dispatched.
</p>

<deftable>
<tr><th>Apache Command</th><th>Meaning
</th></tr><tr><td>ResinConfigServer <var>host</var> <var>port</var></td><td>Specifies the Resin JVM at <var>host:port</var> as a configuration server.
</td></tr></deftable>

<p>
The <code>caucho-status</code> handler is optional and probably
should be avoided in a production site.  It lets you ask the
Caucho Apache module about it's configuration, and the status of
the backend server(s), valuable for debugging.
</p>

<p>After any change to httpd.conf, restart Apache.  Now browse
http://localhost/caucho-status.</p>

<s3 name="manual-dispatch" title="Manual configuration of dispatching">

<p>
You can also dispatch to Resin directly from the httpd.conf.  Instead of
relying on the ResinConfigServer directive to determine which url's to dispatch
to the backend server, Apache handler's are used to specify the url's to
dispatch.
</p>

<example>
CauchoHost 127.0.0.1 6800

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

<deftable>
<tr>
  <th width="30%">Apache Command</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>CauchoHost <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with an server port at host:port as a backend server.</td>
</tr>
<tr>
  <td>CauchoBackup <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with
  a server port at host:port as a backup backend server.
</td>
</tr>
</deftable>

<deftable>
<tr>
  <th width="30%">Apache Handler</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>caucho-status</td>
  <td>Handler to display /caucho-status</td>
</tr>
<tr>
  <td>caucho-request</td>
  <td>Dispatch a request to Resin</td>
</tr>
</deftable>

<p>
Requests dispatched directly from the Apache httpd.conf will not
appear in /caucho-status.
</p>

</s3>  <!-- manual-dispatch -->

</s2>  <!-- httpd.conf -->


<s2 name="balance" title="Load Balancing">

<p>The <a href="../admin/load-balancing.xtp">Load Balancing</a>
section provides an introduction to the concepts of load balancing.</p>

<p>mod_caucho recognizes cluster configurations for load balancing. 
Requests are distributed to all machines in the cluster, all
requests in a session will go to the same host, and if one host goes down,
Resin will send the request to the next available machine.
Optional backup machines only receive requests if all of the primaries are
down.</p>

<p>
mod_caucho only needs to know about one of the backend servers. It will query
that backend server, and learn about all of the other members of the cluster.
mod_caucho keeps a local cache of the configuration information, so if the
backend server becomes unavailable then the cached configuration will be used
until the backend server becomes available again.
</p>

<p>
The httpd.conf file can also specify more than one backend server, when
mod_caucho checks for configuration updates, it will check each in turn, and
only if none of them are available will it use the local cached copy.
</p>

<example>
ResinConfigServer 192.168.0.11 6800
ResinConfigServer 192.168.0.12 6801
</example>

<s3 name="manual-dispatch-balance" title="Manual configuration of load balanced dispatching">
<p>
Manual dispatching in httpd.conf can also specify the backend hosts and the backend backup hosts, as an alternative to using <code>ResinConfigServer</code>.
</p>

<example>
CauchoHost 192.168.0.11 6800
CauchoBackup 192.168.0.11 6801
CauchoHost 192.168.0.12 6800
CauchoBackup 192.168.0.12 6801

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

</s3> <!-- manual-dispatch-balance -->

<s3 name="manual-dispatch-location" title="Manual configuration of location based dispatching">

<example>
&lt;Location /applicationA/*&gt;
  ResinConfigServer 192.168.0.11 6800
&lt;/Location&gt;

&lt;Location /applicationB/*&gt;
  ResinConfigServer 192.168.0.12 6800
&lt;/Location&gt;
</example>

</s3> <!-- manual-dispatch-location -->

</s2> <!-- balance -->

<s2 title="Troubleshooting">

<ol>
<li>Check your configuration with Resin standalone.
In other words, add a &lt;http port='8080'/&gt; and check port 8080.</li>
<li>Check http://localhost/caucho-status.  That will tell if
mod_caucho has properly connected to the backend Resin server.
Each server should be green and the mappings should
match your resin.xml.
</li>
<li>If caucho-status fails entirely, the problem is in the mod_caucho
installation and the Apache httpd.conf.
</li>
<li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml or the pointer to the backend server in httpd.conf.
</li>
<li>If caucho-status shows a red servlet runner, then Resin hasn't
properly started.
</li>
<li>If you get a "cannot connect to servlet engine", caucho-status
will show red, then Resin hasn't started properly.
</li>
<li>If Resin doesn't start properly, you should look at the logs
in &lt;resin.log&gt;/log.  You should start 
<var>java -jar &lt;resin.home>/lib/resin.jar -verbose</var> or
<var>resin.exe -verbose</var> to get more information.
</li>
<li>If Resin never logs a "hmux listening to *:6800" line,
it's not listening for connections from mod_caucho.
 You'll need to add a &lt;server&gt; line.
</li>
<li>If you get Resin's "file not found", the Apache configuration
is functional but the resin.xml probably points to the wrong directories.
</li>
</ol>

</s2>
</s1>

<s1 title="IIS">
      <figure src="iis_srun.gif"/>

<s2 title="Environment Variables">

<p>Configure the following two environment variables in the Control Panel:</p>
<example>
JAVA_HOME=C:\jdk1.5.0
RESIN_HOME=C:\Resin
</example>
<p>Of course, adjust these to the correct directories for Java and Resin if
they differ from your own.</p>
</s2>

<s2 title="Configuring IIS/PWS">

<p>To configure Resin with IIS, you must follow the following steps:</p>
<ol>
<li>Configure IIS/PWS
</li><li>Configure resin.xml
</li><li>Start resin.exe
</li></ol>


<s3 title="ISAPI Filter">

<p>You should run <code>RESIN_HOME/setup.exe</code> to setup your
configuration.  If setup.exe is not used, or it fails, the steps in
  <a href="#Manual-Configuration">Manual Configuration</a> are necessary.
</p>

</s3>

<s3 title="ISAPI Filter Priority">

<p>isapi_srun.dll installs itself as the default priority.  Some users may need
to set the priority to a higher level, e.g. to override IIS's DAV support.
</p>

<example title="resin.ini">
ResinConfigServer localhost 6802
CauchoStatus yes
IISPriority high
</example>

</s3>

<s3 title="Configuring resin.xml">

<p>resin.xml should mirror the configuration of IIS.  In other words, you 
need to configure the document root and any directory aliases.</p>

<p>For many users, the only need to change needed in Resin is to change the
<a config-tag="document-directory"/> attribute from 'webapps/ROOT' to something
like 'C:/inetpub/wwwroot'.  The mapping of url paths from the browser to real
files on the disk must be the same for Resin as they are for IIS. For more
complicated configurations that use mappings in IIS, you'll need to add <a href="webapp-tags.xtp">path-mapping</a> attributes
to match.</p>

<example title="Example: resin.xml" language="xml">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="">

  &lt;!-- configures the default host, matching any host name --&gt;
  &lt;host id=""&gt;

  &lt;!-- configures the root web-app --&gt;
  &lt;web-app id='/'&gt;
    &lt;root-directory&gt;C:/inetpub/wwwroot&lt;/root-directory&gt;
    &lt;!-- adds xsl to the search path --&gt;
    &lt;class-loader&gt;
      &lt;simple-loader path="$host-root/xsl"/&gt;
    &lt;/class-loader&gt;
  &lt;/web-app&gt;
&lt;/host&gt;

&lt;/cluster&gt;
&lt;/cluster&gt;
</example>

</s3>

</s2>

<s2 name="iis-balance" title="Load Balancing">

<p>Resin's IIS plugin supports load balancing in much the same way as
mod_caucho does for Apache. Consult the <a href="#balance">mod_caucho
load balancing section</a> for more details.</p>
</s2>

<s2 title="Manual Configuration">

<p>Experts may want to configure Resin/IIS by hand instead
of using the setup program.  The steps involved are:</p>

<ol>
<li>Make sure resin.exe works
</li><li>Copy isapi_srun.dll to the IIS scripts directory, <var>d:\inetpub\scripts</var>.
You may need to run <var>net stop w3svc</var> to get permission to overwrite the file.
</li><li>If you have a virtual site (virtual hosts), you must configure IIS to have
the virtual directory <var>/scripts</var> point to <var>d:\inetpub\scripts</var> for
each virtual site.

</li><li>(optional) Create a resin.ini in <var>d:\inetpub\scripts</var> pointing to the ResinConfigServer
</li><li>(optional) Add a "CauchoStatus yes" line to the resin.ini for debugging
</li><li>Configure IIS to load isapi_srun.dll as an ISAPI filter.
</li><li>Restart IIS (control panel/services) or <var>net stop w3svc</var> followed
by <var>net start w3svc</var>.
</li><li>Browse /servlet/Hello and /foo.jsp.
You should see a "cannot connect" error.
</li><li>Start resin.exe
</li><li>Browse /servlet/Hello and /foo.jsp.  You should now see the servlet.
</li></ol>

<p>Copying isapi_srun.dll to <var>inetpub/scripts</var> directory is relatively
straightforward.  If you're upgrading to a new version of Resin, you
may need to stop IIS (control panel/services) to get permission to
overwrite isapi_srun.dll.</p>

<p>The resin.ini is an optional file in <var>inetpub/scripts</var> to
override the automatic registry $RESIN_HOME/conf/resin.xml configuration
file.  If you only have one Resin server, you should not create a resin.ini
and let isapi_srun.dll use the registry value set by the setup.exe program.</p>

<p>resin.ini is only needed if you have multiple Resin configuration
files for different IIS virtual hosts.</p>

<p>The resin.ini should contain the following line:</p>
<example>
ResinConfigServer localhost 6802
</example>

<p>You can change the host from <var>localhost</var> to a backend server.
You can also add multiple <var>ResinConfigServer</var> items to cluster the
configuration.</p>

<p>For debugging, you can add a "CauchoStatus yes" line to the resin.ini:</p>

<example>
ResinConfigServer localhost 6802
CauchoStatus yes
</example>

<p>For security purposes, the default value of CauchoStatus is "no" when
you have a resin.ini.</p>

<p>Adding an ISAPI filter is accomplished in the IIS manager.</p>

<s3 title="IIS and Resin on different machines">

<p>When Resin and IIS are on different machines, you'll change
the ResinConfigServer from "localhost" to the IP address of the
Resin server.</p>

<example>
ResinConfigServer 192.168.0.10 6802
CauchoStatus yes
</example>

</s3>

</s2>

<s2 title="Virtual Sites (Virtual Hosts)">

<p>If IIS is managing multiple virtual sites (better known as virtual
hosts), then you need to configure IIS to use the isapi_srun.dll filter for
each virtual site.  Configure IIS to have the virtual directory <var>/scripts</var>
for each virtual site point to <var>d:\inetpub\scripts</var>, so that each virtual site uses the isapiu_srun.dll.</p>

</s2>

<s2 title="Troubleshooting">

<ol>
<li>Check your configuration with the standalone web server.
In other words, add a &lt;http port='8080'/&gt; block and
browse http://localhost:8080.
</li><li>Check <var>http://localhost/caucho-status</var>.  That will tell if
the ISAPI filter/extension is properly installed. 
</li><li>Each server should be green and the mappings should
match your resin.xml.
</li><li>If caucho-status fails entirely, the problem is in the <var>isapi_srun</var>
installation.  Try
<var>http://localhost/scripts/isapi_srun.dll/caucho-status</var> directly
(bypassing the filter).  If this fails, IIS can't find isapi_srun.dll.
<ul>
<li>Check that isapi_srun.dll is in <var>c:\inetpub\scripts.</var>
</li><li>Make sure that both IIS and the underlying NTFS file system have permissions set appropriately for isapi_srun.dll.
</li><li>Make sure that your IIS host has a mapping from <var>/scripts</var>
to <var>c:\inetpub\scripts</var> and that the <var>/scripts</var> has execute
permissions.
</li><li>IIS 6 users may need to take <a href="#iis6">additional steps</a>.
</li></ul>
</li><li>If you've created a new
IIS web site, you need to create a virtual directory <var>/scripts</var> pointing
to the <var>d:\inetpub\scripts</var> directory.
</li><li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml.
</li><li>If caucho-status shows a red servlet runner, then resin.exe hasn't
properly started.
</li><li>If you get a "cannot connect to servlet engine", caucho-status
will show red, and resin.exe hasn't started properly.
</li><li>If resin.exe doesn't start properly, you should look at the logs
in resin3.2/log.  You should start <var>resin.exe -verbose</var> to get
more information.
</li><li>If you get Resin's file not found, the IIS configuration
is good but the resin.xml probably points to the wrong directories.
</li></ol>

<s3 name="iis6" title="Troubleshooting IIS 6">
<p>
IIS 6/Windows 2003 users may need to perform additional steps.
</p>

<ul>

<li>Make sure that the System account has suffiicient privleges to
read the <code>C:\InetPub</code> and <code>C:\InetPub\Scripts</code> directory
and the <code>isapi_srun.dll</code>.

</li><li>Check the `Web Service Extensions' listed in the `Internet Service Manager'
to make sure that Resin is listed as a Web Service Extension and has a status
of "enabled". You may need to click "add a new web service extension...", 
under Extension name add .jsp or whatever your file extension is, 
click Add and browse to the isapi_srun.dll, check the "Set extension status
to allowed box", click OK.


</li><li>Check that the user specified as the
"application pool identity" for Resin has read/write
permission to the Resin installation directory.
In the Internet Service Manager, open the Properties dialog for
"Application Pools".  Find the User on the "Identity" tab, it may
be the user named "Network Service" in the drop-down list associated
with the radio button labeled "predefined".
Then check physical file permissions on the Resin installation
directory and all its subdirectories and subfiles, to ensure that
that user has read/write permission status is "Enabled".

</li></ul>

</s3>
</s2>
</s1>

<s1 name="plugins" title="Configuring resin.xml to work with Apache and IIS">
<p>The previous sections show how to configure Apache and IIS to work with
Resin.  This section shows how the plugins for these servers interpret the
Resin's configuration and how to change that configuration for your deployment.
</p>

<p>The web server plugins (mod_caucho and isapi_srun) have two main tasks:</p>
<ol>
  <li>Select urls to dispatch to the Java process
  </li><li>Pass the request and retrieve the response from the Java process.
</li></ol>

<s2 title="ResinConfigServer">

<p>mod_caucho discovers its configuration by contacting
the ResinConfigServer specified in the httpd.conf or resin.ini.
The ResinConfigServer can be any Resin server.  When a user requests a URL,
mod_caucho uses the configuration it has determined from the ResinConfigServer
to determine whether Resin or Apache should handle the request. That decision
is based on the configuration in the ResinConfigServer's resin.xml.</p>

</s2>

<s2 title="servlet-mapping selects URLs">

<p>The <a href="webapp-tags.xtp#servlet-mapping">servlet-mapping</a>
tag selects the URLs to send to Resin.
<a href="host-tags.xtp#host">&lt;host&gt;</a> and 
<a href="webapp-tags.xtp">&lt;web-app&gt;</a> group the
servlet-mapping tags.</p>

<s3 title="url-pattern">

<p>servlet-mapping's <a href="webapp-tags.xtp#url-pattern">url-pattern</a>
selects the URLs to pass to Resin.  servlet-mapping and url-pattern
are part of the Servlet 2.3 standard, so there are many references explaining
how it works.</p>

<p>url-pattern can take one of four forms:</p>
<ul>
<li>"<var>/</var>" matches all URLs.  Use this to pass all requests to Resin.
</li><li>"<var>/prefix/url/*</var>" matches any URL starting with <var>/prefix/url</var>,
including <var>prefix/url</var> itself.  It does not match <var>/prefix/urlfoo</var>
because any slash must immediately follow <var>url</var>
</li><li>"<var>/exact/path</var>" matches only the exact path.  In other words, it
will not match <var>/exact/path/bogus</var>.
</li><li>"<var>*.ext</var>" matches any URL with the extension <var>ext</var>.  Resin
allows path-infos, so <var>/foo/bar.ext/path/info</var> will also match.
</li></ul>

</s3>

<s3 title="url-regexp">

<note>mod_caucho does not understand regular expressions.  If you
put regular expressions in your resin.xml, mod_caucho will not send
the request to Resin.  Apache will handle the request itself.</note>

<p>If you want to use regular expressions in servlet-mapping, web-app, or
hosts, you must use Apache-specific configuration to send the request
to Resin.  You can see this by looking at /caucho-status.  /caucho-status
will not display any regular expressions.</p>

</s3>

<s3 title="special servlet-mappings">

<p>There are two special servlet-names which only affect the plugins:
<var>plugin_match</var> and <var>plugin_ignore</var>.</p>

<p><var>plugin_match</var> will direct a request to Resin.
The servlet engine itself
will ignore the plugin_match directive.  You can use plugin_match to
direct an entire subtree to Resin, e.g. to workaround the
regexp limitation, but allow Resin's other servlet-mapping directives
to control which servlets are used.</p>

<p><var>plugin_ignore</var> keeps the request at on the web server.  So you
could create a directory <var>/static</var> where all documents, including JSPs are
served by the web server.</p>

<example>
&lt;!-- send everything under /resin to Resin --&gt;
&lt;servlet-mapping url-pattern='/resin/*'
                 servlet-name='plugin_match'/&gt;

&lt;!-- keep everything under /static at the web server --&gt;
&lt;servlet-mapping url-pattern='/static/*'
                 servlet-name='plugin_ignore'/&gt;
</example>

</s3>

<s3 title="&lt;web-app&gt;">

<p><a href="webapp-tags.xtp">web-apps</a> collect servlets and
JSP files into separate applications.  All the servlet-mappings in a
web-app apply only to the URL suffix.</p>

<p>In the following example, every URL starting with /prefix/url maps to
the web-app.  The servlet-mapping only applies to URLs matching the prefix.
</p>

<example>
...
&lt;web-app id='/prefix/url'&gt;
  &lt;servlet-mapping url-pattern='*.foo' .../&gt;
&lt;/web-app&gt;
..
</example>

<p>In the exaple, mod_caucho will match any URL matching /prefix/url/*.foo.
/prefix/url/bar.foo will match, but /test/bar.foo will not match.</p>

<note>Resin standalone allows a <var>regexp</var> attribute instead of an
id.  Because mod_caucho does not understand regexps, it will ignore any
web-app with a <var>regexp</var> attribute.</note>

<note>web.xml files and war files are treated exactly the same as web-apps
in the resin.xml.</note>

</s3>

<s3 title="&lt;host&gt;">

<p><a href="cluster-tags.xtp#host">host</a> blocks configure
<a href="virtual-host.xtp">virtual hosts</a>.  There's a bit of
extra work for virtual hosts that we'll ignore here.  (Basically, you
need to add Apache <var>ServerName</var> directives so Resin knows the name
of the virtual host.)</p>

<p>For dispatching, a host block gathers a set of web-apps.  Each host
will match a different set of URLs, depending on the web-app configuration.
The default host matches any host not matched by a specific rule.</p>

<p>As usual, /caucho-status will show the URLs matched for each host.</p>

<note>mod_caucho does not understand the host <var>regexp</var> attribute.
It will ignore all hosts using <var>regexp</var>.  To get around this, you can
either configure Apache directly (see below), or configure the default host
with the same set of servlet-mappings.  Since mod_caucho will use the
default host if no others match, it will send the right requests to
Resin.</note>

</s3>

</s2>

</s1>


</body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>Resin with Apache</title>
    <description>
      <p>Resin provides a fast servlet runner for Apache 1.3 or greater,
         allowing Apache to run servlets and JSP files.
      </p>

    </description>
  </header>

<body>

<s1>
<p>If you have not yet done so, we suggest you use the <a href="resin-web-server.xtp">Resin standalone web server</a> option
      first.</p>
</s1>

<localtoc/>

<s1 name="standalone" title="Before you integrate Resin with Apache">
<p>
Before integrating Resin with Apache, it is valuable to configure Resin as a
<a href="resin-web-server.xtp">standalone server</a>, especially with more
complicated setups such as those involving virtual hosts.  Doing so isolates
the steps and makes troubleshooting easier.
</p>
 
<p>
Many users find that the performance, flexibility, and features of Resin
make Resin a desirable replacement for Apache.
</p>
</s1>

<s1 name="dispatch" title="How Resin integrates with Apache">

<p>When used with Apache, Resin serves JSPs and Servlets and Apache serves
static content like html and images.  Apache is a frontend server, it handles
the request from the browser. Resin's <code>mod_caucho</code> plugin integrates
with Apache, it dispatches requests for JSPs and Servlets to one or more
backend Resin servers.</p>

<figure src="apache_srun.gif"/>

<p>
mod_caucho queries the backend server to distinguish the URLs going to Resin
from the URLs handled by Apache.  The backend server uses the
&lt;servlet-mapping&gt; directives to decide which URLs to send.  Also, any *.war
file automatically gets all its URLs.  Other URLs stay with Apache.
</p>

<p>
There's a more complete discussion of the URL dispatching in the
<a href="plugin-dispatch.xtp">How the Plugins Dispatch to Resin</a> page.
</p>

</s1> <!-- dispatch -->

<s1 name="unix" title="Unix Installation">

<p>Resin needs Apache 1.3.x or greater and DSO support.</p>

<p>To configure Resin with Apache, you must follow the following steps:</p>
<ol>
<li>Compile Apache
</li><li>Compile mod_caucho.so
</li><li>Configure Apache
</li><li>Set up environment
</li><li>Configure resin.xml
</li><li>Restart Apache and start the backend Resin server
</li></ol>

<s2 title="Compiling Apache">

<p>You need a version of Apache with DSO support enabled. Apache has
full documentation at <a href="http://httpd.apache.org/docs/dso.html">their website</a>.
To check if your apache has DSO support, you can check for
<var>mod_so.c</var> in your your httpd

<example title="checking apache httpd for mod_so.c">
unix&gt; /usr/local/apache/bin/httpd -l
Compiled-in modules:
  ...
  mod_so.c
  ...
 </example>

</p><p>Many distributions, e.g. Red Hat Linux, will have Apache preinstalled.
However, because the standard distribution has files all over the
place, some people prefer to recompile Apache from scratch.</p>

<p>Once you untar Apache, build it like:</p>

<example>
unix&gt; ./configure --prefix=/usr/local/apache --enable-module=so
unix&gt; make
unix&gt; make install
</example>

<p>Solaris versions of Apache may need additional flags, otherwise
you'll get some linking errors when trying to load Resin.  You may need
to refer to the Apache documentation if you get linking errors.  Here's an
example configuration on Solaris:</p>

<example>
unix&gt; ./configure --prefix=/usr/local/apache \
                  --enable-rule=SHARED_CORE \
                  --enable-rule=SHARED_CHAIN \
                  --enable-module=so \
                  --enable-module=most \
                  --enable-shared=max
</example>

</s2>

<s2 title="Compiling mod_caucho.so">

<p>To compile and install <var>mod_caucho</var> on Unix, you'll need to run
Resin's <code>configure</code> and then make.  This step will create 
mod_caucho.so and put it in the Apache module directory.  Usually,
mod_caucho.so will end up in /usr/local/apache/libexec/mod_caucho.so.</p>

<p>If you know where your <var>apxs</var> executable is, you can use --with-apxs.
<var>apxs</var> is a little Perl script that the Apache configuration
makes.  It lets modules like Resin know how all the Apache directories
are configured.  It is generally in /usr/local/apache/bin/apxs or
/usr/sbin/apxs.  It's usually easiest to use --with-apxs so you don't
need to worry where all the Apache directories are.</p>

<example>
unix&gt; ./configure --with-apxs=/usr/local/apache/bin/apxs
unix&gt; make
</example>

<p>Even if you don't know where <var>apxs</var> is, the configure script
can often find it:</p>

<example>
unix&gt; ./configure --with-apxs
unix&gt; make
</example>

<p>As an alternative to --with-apxs, if you've compiled Apache yourself,
or if you have a simple configuration, you can generally just point to
the Apache directory:</p>

<example>
unix&gt; ./configure --with-apache=/usr/local/apache
unix&gt; make
unix&gt; make install
</example>

<p>The previous --with-apxs or --with-apache should cover most
configurations.  For some unusual configurations, you can have finer control
over each directory with the following arguments to ./configure.
In general, you should use --with-apache or --with-apxs, but the other
variables are there if you know what you're doing.</p>

<deftable>
<tr><td>--with-apache=dir</td><td>The Apache root directory.
</td></tr><tr><td>--with-apxs=apxs</td><td>Pointer to the Apache extension script
</td></tr><tr><td>--with-apache-include=dir</td><td>The Apache include directory
</td></tr><tr><td>--with-apache-libexec=dir</td><td>The Apache module directory
</td></tr><tr><td>--with-apache-conf=httpd.conf</td><td>The Apache config file
</td></tr></deftable>

</s2>

<s2 title="Configure the Environment">

<p>If you don't already have Java installed, you'll need to download a
JDK and set some environment variables.</p>

<p>Here's a typical environment that you might put in ~/.profile or
/etc/profile</p>

<example>
# Java Location
JAVA_HOME=/&lt;installdir&gt;/jdk1.4
export JAVA_HOME

# Resin location (optional).  Usually Resin can figure this out.
RESIN_HOME=/&lt;installdir&gt;/resin-3.2.2
export RESIN_HOME

# If you're using additional class libraries, you'll need to put them
# in the classpath.
CLASSPATH=
</example>

</s2>

</s1> <!-- unix -->

<s1 name="windows" title="Windows Installation">
<p>
The <code>setup.exe</code> program installs the mod_caucho.dll
plugin for any Apache it finds, and modifies the Apache httpd.conf file.
</p>

<p>
The httpd.conf file is also easily modified manually:
</p>

<example title="httpd.conf">
LoadModule caucho_module \
    &lt;installdir&gt;/resin-3.2.x/win32/apache-2.0/mod_caucho.dll

ResinConfigServer localhost 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

</s1> <!-- windows -->


<s1 title="Configuring resin.xml">

<p>
The communication between <code>mod_caucho</code> and the backend Resin
server takes place using a <var>server</var> port.
</p>

<p>
The <code>resin.xml</code> for the backend server contains
a <code>server</code> to enable the port.  The default <code>resin.xml</code>
has an server listener on port 6800.
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="http://caucho.com/ns/resin/core"&gt;

  ...


  &lt;cluster id="app-tier"&gt;

    ...

    <b>&lt;server id="" address="127.0.0.1" port="6800"/&gt;</b>

    ...

</example>


<p>
The resin.xml and the layout of your webapps should match the
layout that Apache expects.  The mapping of urls to filesystem locations
should be consistent between Apache and the backend Resin server.
</p>


<p>The default resin.xml looks in
<code>resin-3.2.x/webapps/ROOT</code> 
for JSP files and
<code>resin-3.2.x/webapps/ROOT/WEB-INF/classes</code>
for servlets and java source files.  To tell Resin
to use Apache's document area, you configure an explicit 
<var>web-app</var> with the appropriate document-directory:
</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="http://caucho.com/ns/resin/core"&gt;

  ...

  &lt;server&gt;

    ...

    &lt;host id=""&gt;
 
      &lt;web-app id='/' document-directory="/usr/local/apache/htdocs"/&gt;

    &lt;/host&gt;

    ...

  &lt;/server&gt;
&lt;/resin&gt;
</example>

</s1>

<s1 title="Starting the app-tier Resin server">

<p>Now you need to start the app-tier Resin server.  Starting Resin is the same
with Apache or standalone.  See the <a href="resin-web-server.xtp#deploy">Resin Web Server</a> page
for a detailed description.</p>

<example>
unix&gt; java -jar $RESIN_HOME/lib/resin.jar

unix&gt; bin/resin.sh

win&gt; resin.exe
</example>

<results>
Resin 3.2.2 (built Mon Aug  4 09:26:44 PDT 2006)
Copyright(c) 1998-2006 Caucho Technology.  All rights reserved.
 
Starting Resin on Mon, 04 Aug 2006 09:43:39 -0700 (PDT)
[09:43:40.664] Loaded Socket JNI library.
[09:43:40.664] http listening to *:8080
[09:43:40.664] ServletServer[] starting
[09:43:40.879] hmux listening to *:6800
[09:43:41.073] Host[] starting
[09:43:41.446] Application[http://localhost:8080/resin-doc] starting
[09:43:41.496] Application[http://localhost:8080] starting
</results>

<p>
Resin will print every port it's listening to.  In the above example,
Resin has an http listener on port 8080 and an server listener on port 6800
(using its custom 'hmux' protocol).  mod_caucho establishes connections  to
Resin using port 6800, and a web browser can connect using port 8080.   Usually
the 8080 port will be unused, because web browsers will make requests to Apache,
these requests get dispatched to Resin as needed by mod_caucho.  A Resin
configured http listener on port 8080 is a useful debugging tool, it allows you
to bypass Apache and make a request straight to Resin.
</p>

<p>The following snippet shows the
&lt;<a href="port-tags.xtp#http">http</a>&gt;
and &lt;<a href="server-tags.xtp#server">server</a>&gt;
configuration for the above example.</p>

<example>
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  &lt;cluster id="app-tier"&gt;
    &lt;server-default&gt;
      &lt;http address="*" port="8080"/&gt;
    &lt;/server-default&gt;

    &lt;server id="" address="192.168.2.10" port="6800"/&gt;

    ...
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>

</s1>

<s1 title="Testing the servlet engine">

<p>Create a test file '/usr/local/apache/htdocs/test.jsp'</p>

<example>
2 + 2 = &lt;%= 2 + 2 %&gt;
</example>

<p>Browse http://localhost/test.jsp again.  You should now get</p>

<results>
2 + 2 = 4
</results>

</s1>

<s1 name="httpd.conf" title="Configuring Apache httpd.conf">

<p>
The installation process above automatically changes the httpd.conf file.
You can also configure the httpd.conf file manually, or modify the
default configuration created by the installation process.
</p>

<example title="Unix - httpd.conf">
LoadModule caucho_module libexec/mod_caucho.so

ResinConfigServer localhost 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

<example title="Windows - httpd.conf">
LoadModule caucho_module \
    &lt;installdir&gt;/resin-3.2.x/libexec/apache-2.0/mod_caucho.dll

ResinConfigServer localhost 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

<p>
The <code>ResinConfigServer</code> is used to tell mod_caucho how to contact
the backend Resin server.  The backend Resin server tell's mod_caucho which urls
should be dispatched.
</p>

<deftable>
<tr><th>Apache Command</th><th>Meaning
</th></tr><tr><td>ResinConfigServer <var>host</var> <var>port</var></td><td>Specifies the Resin JVM at <var>host:port</var> as a configuration server.
</td></tr></deftable>

<s2 name="caucho-status" title="caucho-status">

<p>
<code>caucho-status</code> is optional and probably should be avoided in
a production site.  It lets you ask the Caucho Apache module about it's
configuration, and the status of the backend server(s), valuable for
debugging.
</p>

<p>After any change to httpd.conf, restart Apache.  Now browse
http://localhost/caucho-status.</p>

</s2>

<s2 name="manual-dispatch" title="Manual configuration of dispatching">

<p>
You can also dispatch to Resin directly from the httpd.conf.  Instead of
relying on the ResinConfigServer directive to determine which url's to dispatch
to the backend server, Apache handler's are used to specify the url's to
dispatch.
</p>

<example>
CauchoHost 127.0.0.1 6800

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

<deftable>
<tr>
  <th width="30%">Apache Command</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>CauchoHost <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with an server port at host:port as a backend server.</td>
</tr>
<tr>
  <td>CauchoBackup <var>host</var> <var>port</var></td>
  <td>Alternative to <var>ResinConfigServer</var>, adds the Resin JVM with
  a server port at host:port as a backup backend server.
</td>
</tr>
</deftable>

<deftable>
<tr>
  <th width="30%">Apache Handler</th>
  <th>Meaning</th>
</tr>
<tr>
  <td>caucho-status</td>
  <td>Handler to display /caucho-status</td>
</tr>
<tr>
  <td>caucho-request</td>
  <td>Dispatch a request to Resin</td>
</tr>
</deftable>

<p>
Requests dispatched directly from the Apache httpd.conf will not
appear in /caucho-status.
</p>

</s2>  <!-- manual-dispatch -->

</s1>  <!-- httpd.conf -->


<s1 name="vhosts" title="Virtual Hosts">

<p>
The <a href="virtual-host.xtp">virtual host</a> topic describes virtual
hosts in detail.  If you're using a single JVM, you only need to configure
the resin.xml.
</p>

<example title="httpd.conf">
LoadModule caucho_module libexec/mod_caucho.so

ResinConfigServer 192.168.0.1 6800
&lt;Location /caucho-status&gt;
  SetHandler caucho-status
&lt;/Location&gt;
</example>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster id="app-tier"&gt;

  &lt;server id="" address="192.168.0.1" port="6800"/&gt;

  &lt;host id='www.gryffindor.com'&gt;
    &lt;host-alias&gt;gryffindor.com&lt;/host-alias&gt;
     ...
  &lt;/host&gt;

  &lt;host id='www.slytherin.com'&gt;
    &lt;host-alias&gt;slytherin.com&lt;/host-alias&gt;
     ...
  &lt;/host&gt;
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<s2 name="vhostperjvm" title="Virtual Host per JVM">

<p>
If you want a different JVM for each virtual host, your
httpd.conf can specify a different server port for each host.
</p>

<example title="httpd.conf">
&lt;VirtualHost gryffindor.com&gt;
ServerName gryffindor.com
ServerAlias www.gryffindor.com
ResinConfigServer 192.168.0.1 6800
&lt;/VirtualHost&gt;

&lt;VirtualHost slytherin.com&gt;
ServerName slytherin.com
ServerAlias www.slytherin.com
ResinConfigServer 192.168.0.1 6801
&lt;/VirtualHost&gt;
</example>

<example title="gryffindor.conf">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster id=""&gt;

  &lt;server id="" address="192.168.0.1" port="6800"/&gt;

  &lt;host id=""&gt;
     ...
  &lt;/host&gt;
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<example title="slytherin.conf">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster&gt;

  &lt;server id="" address="192.168.0.1" port="6801"/&gt;

  &lt;host id=""&gt;
     ...
  &lt;/host&gt;
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<example>
$ bin/resin.sh -pid gryffindor.pid -conf conf/gryffindor.conf start
$ bin/resin.sh -pid slytherin.pid -conf conf/slytherin.conf start

...

$ bin/resin.sh -pid gryffindor.pid stop

</example>

</s2> <!-- vhostperjvm -->

</s1>  <!-- vhosts -->


<s1 name="balance" title="Load Balancing">

<p>The <a href="resin-clustering.xtp">Reliability and Load Balancing</a>
section provides an introduction to the concepts of load balancing.</p>

<p>mod_caucho recognizes cluster configurations for load balancing. 
Requests are distributed to all machines in the cluster, all
requests in a session will go to the same host, and if one host goes down,
Resin will send the request to the next available machine.
Optional backup machines only receive requests if all of the primaries are
down.</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  &lt;cluster id="app-tier"&gt;
    &lt;server id="a" address="192.168.0.11" port="6800" index="1"/&gt;
    &lt;server id="b" address="192.168.0.11" port="6801" index="2" 
             backup="true"/&gt;
    &lt;server id="c" address="192.168.0.12" port="6800" index="3"/&gt;
    &lt;server id="d" address="192.168.0.12" port="6801" index="4" 
             backup="true"/&gt;
    ...
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>

<p>
mod_caucho only needs to know about one of the backend servers. It will query
that backend server, and learn about all of the other members of the cluster.
</p>

<example>
ResinConfigServer 192.168.0.11 6800
</example>

<p>
mod_caucho keeps a local cache of the configuration information, so if the
backend server becomes unavailable then the cached configuration will be used
until the backend server becomes available again.
</p>

<p>
The httpd.conf file can also specify more than one backend server, when
mod_caucho checks for configuration updates, it will check each in turn, and
only if none of them are available will it use the local cached copy.
</p>

<example>
ResinConfigServer 192.168.0.11 6800
ResinConfigServer 192.168.0.12 6801
</example>

<s2 name="manual-dispatch-balance" title="Manual configuration of load balanced dispatching">
<p>
Manual dispatching in httpd.conf can also specify the backend hosts and the backend backup hosts, as an alternative to using <code>ResinConfigServer</code>.
</p>

<example>
CauchoHost 192.168.0.11 6800
CauchoBackup 192.168.0.11 6801
CauchoHost 192.168.0.12 6800
CauchoBackup 192.168.0.12 6801

&lt;Location /foo/*&gt;
  SetHandler caucho-request
&lt;/Location&gt;
</example>

</s2> <!-- manual-dispatch-balance -->

<s2 name="manual-dispatch-location" title="Manual configuration of location based dispatching">

<example>
&lt;Location /applicationA/*&gt;
  ResinConfigServer 192.168.0.11 6800
&lt;/Location&gt;

&lt;Location /applicationB/*&gt;
  ResinConfigServer 192.168.0.12 6800
&lt;/Location&gt;
</example>

</s2> <!-- manual-dispatch-location -->

</s1> <!-- balance -->

<s1 title="Troubleshooting">

<ol>
<li>First, check your configuration with Resin standalone.sh.
In other words, add a &lt;http port='8080'/&gt; and check port 8080.</li>
<li>Check http://localhost/caucho-status.  That will tell if
mod_caucho has properly connected to the backend Resin server.
</li>
<li>Each server should be green and the mappings should
match your resin.xml.
</li>
<li>If caucho-status fails entirely, the problem is in the mod_caucho
installation and the Apache httpd.conf.
</li>
<li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml or the pointer to the backend server in httpd.conf.
</li>
<li>If caucho-status shows a red servlet runner, then Resin hasn't
properly started.
</li>
<li>If you get a "cannot connect to servlet engine", caucho-status
will show red, and Resin hasn't started properly.
</li>
<li>If Resin doesn't start properly, you should look at the logs
in resin-3.2.x/log.  You should start <var>resin.sh -verbose</var> or
<var>resin.exe -verbose</var> to get more information.
</li>
<li>If Resin never shows a "hmux listening to *:6800" line,
it's not listening for connections from mod_caucho.
 You'll need to add a &lt;server&gt; line.
</li>
<li>If you get Resin's "file not found", the Apache configuration
is good but the resin.xml probably points to the wrong directories.
</li>
</ol>

</s1>
  </body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>Resin with IIS</title>

    <description>
      <p>For sites requiring the use of IIS, Resin provides a fast servlet
runner, allowing IIS to run servlets and JSP files.</p>

    </description>
  </header>

  <body>

<s1>
      <figure src="iis_srun.gif"/>

      <p>If you have not yet done so, we suggest you
consider the <a href="resin-web-server.xtp">Resin
web server</a> option first, either as a standalone web server or as
a web-tier server load-balancing to Resin app-tier servers.
Resin's Java web server provides management, clustering,
and load-balancing with failover.
</p>
</s1>

    <localtoc/>

<s1 title="Prerequisites and Environment Variables">

<p>Resin requires a 1.5 JDK.  You can download one from Sun and install it.</p>
 
<p>The Control Panel is used to configure two environment variables:</p>
<example>
JAVA_HOME=C:\jdk1.5.0
RESIN_HOME=C:\resin-4.0
</example>
</s1>

<s1 title="Configuring IIS/PWS">

<p>To configure Resin with IIS, you must follow the following steps:</p>
<ol>
<li>Configure IIS/PWS
</li><li>Configure resin.xml
</li><li>Start resin.exe
</li></ol>


<s2 title="ISAPI Filter">

<p>You should run <code>RESIN_HOME/setup.exe</code> to setup your
configuration.  If setup.exe is not used, or it fails, the steps in <a href="#Manual-Configuration">Manual Configuration</a> are necessary.</p>

</s2>

<s2 title="ISAPI Filter Priority">

<p>isapi_srun.dll installs itself as the default priority.  Some users may need
to set the priority to a higher level, e.g. to override IIS's DAV support.
</p>

<example title="resin.ini">
ResinConfigServer localhost 6802
CauchoStatus yes
IISPriority high
</example>

</s2>

<s2 title="Configuring resin.xml">

<p>resin.xml should mirror the configuration of IIS.  In other words, you 
need to configure the document root and any directory aliases.</p>

<p>For many users, the only need to change needed in Resin is to change the
<a config-tag="document-directory"/> attribute from 'webapps/ROOT' to something
like 'C:/inetpub/wwwroot'.  The mapping of url paths from the browser to real
files on the disk must be the same for Resin as they are for IIS. For more
complicated configurations that use mappings in IIS, you'll need to add <a href="webapp-tags.xtp">path-mapping</a> attributes
to match.</p>

<example title="Example: resin.xml" language="xml">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="">

  &lt;!-- configures the default host, matching any host name --&gt;
  &lt;host id=""&gt;

  &lt;!-- configures the root web-app --&gt;
  &lt;web-app id='/'&gt;
    &lt;root-directory&gt;C:/inetpub/wwwroot&lt;/root-directory&gt;
    &lt;!-- adds xsl to the search path --&gt;
    &lt;class-loader&gt;
      &lt;simple-loader path="$host-root/xsl"/&gt;
    &lt;/class-loader&gt;
  &lt;/web-app&gt;
&lt;/host&gt;

&lt;/cluster&gt;
&lt;/cluster&gt;
</example>

</s2>

<s2 title="Testing the servlet engine">

<p>From a <code>cmd</code> shell run <code>RESIN_HOME/resin.exe</code> to start the
servlet runner.</p>

<example title="Run resin.exe">
C:\&gt; cd %RESIN_HOME%
C:\resin-3.2&gt; resin.exe
</example>

<p>Now browse http://localhost/test.jsp.  You should get a 'file not
found' message.</p>

<p>Create a test file 'd:\inetpub\wwwroot\test.jsp'</p>

<example>
2 + 2 = &lt;%= 2 + 2 %&gt;
</example>

<p>Browse http://localhost/test.jsp again.  You should now get</p>

<results>
2 + 2 = 4
</results>
</s2>

</s1>

<s1 title="Command line arguments">

<p>The following configuration line arguments are recognized by resin.exe.
When command line arguments are used along with <code>-install</code> to
install as a service, the arguments are used each time the service starts.</p>

<deftable>
<tr><th>Argument</th><th>Meaning
</th></tr><tr><td>-verbose</td><td>Write more verbose information to the log file
</td></tr><tr><td>-resin_home &lt;path&gt;</td><td>Sets the location of Resin
</td></tr><tr><td>-java_home &lt;path&gt;</td><td>Specify the JDK location
</td></tr><tr><td>-msjava</td><td>Use Microsoft's JVM
</td></tr><tr><td>-nojit</td><td>Disable JIT compilation to help debugging
</td></tr><tr><td>-classpath &lt;cp&gt;</td><td>Add to the classpath
</td></tr><tr><td>-J&lt;arg&gt;</td><td>Set a Java command line argument, e.g. -J-nojit.
</td></tr><tr><td>-X&lt;arg&gt;</td><td>Set a Java -X command line argument, e.g. -Xms128m.
</td></tr><tr><td>-D&lt;foo=bar&gt;</td><td>Set a Java variable, e.g. -Dresin.home=here.
</td></tr></deftable>

<s2 title="Memory Configuration">

<p>Memory configuration is part of the JVM's arguments.  For most JVMs,
you can find the full list by starting "java -X".</p>

<deftable title="Memory Configuration">
<tr><th>Argument</th><th>Meaning
</th></tr><tr><td>-Xms&lt;size&gt;</td><td>Initial Java heap size, e.g. -Xms32m
</td></tr><tr><td>-Xmx&lt;size&gt;</td><td>Maximum Java heap size, e.g. -Xmx128m
</td></tr><tr><td>-Xms&lt;size&gt;</td><td>the size of the heap for the young generation
</td></tr></deftable>

<p>See <a href="jvm-tuning.xtp#memory">Performance : JVM Tuning : Memory</a> for more information on JVM memory usage.</p>

</s2>

</s1>

<s1 title="Deploying as an NT Service">

<p>Once you're comfortable with using Resin with IIS, you can install it
as an NT service.  As a service, Resin will automatically start when
NT reboots.  The service will also automatically restart Resin if it
unexpectedly exits.</p>

<p>To install or remove a service run setup.exe. Setup.exe provides a set of
configuration options to use with a service. Most option have a
corresponding resin argument.
<deftable>
  <tr>
    <th>Setup Field</th>
    <th>Resin option</th>
    <th>Meaning</th>
  </tr>
  <tr>
    <td>Java Home</td>
    <td></td>
    <td>JDK to use with this Resin Service</td>
  </tr>
  <tr>
    <td>Resin Root</td>
    <td>-root-directory</td>
    <td>Resin root directory</td>
  </tr>
  <tr>
    <td>Resin Conf</td>
    <td>-conf</td>
    <td>Configuration file to use with the instance of Resin Service</td>
  </tr>
  <tr>
    <td>Log Directory</td>
    <td>-log-directory</td>
    <td>Directory where the log files for this Resin Service instance will be located</td>
  </tr>
  <tr>
    <td>Service Name</td>
    <td></td>
    <td>Unique service name</td>
  </tr>
  <tr>
    <td>Service User</td>
    <td></td>
    <td>User name used to run the service. (defaulted to "Local Service")</td>
  </tr>
  <tr>
    <td>Password</td>
    <td></td>
    <td>Password to use with the Service User (defaulted to an empty string)</td>
  </tr>
  <tr>
    <td>Preview</td>
    <td>-preview</td>
    <td>Specifies if the Resin Service is a staging service</td>
  </tr>
  <tr>
    <td>Watchdog Port</td>
    <td>-watchdog-port</td>
    <td>Specifies port for communicating with Resin Watchdog</td>
  </tr>
  <tr>
    <td>JMX Port</td>
    <td>-jmx-port</td>
    <td>Specifies port for java JMX connections (JConsole, etc.)</td>
  </tr>
  <tr>
    <td>Debug Port</td>
    <td>-debug-port</td>
    <td>Specifies port for remove java debugging</td>
  </tr>
</deftable>

Note: The service is installed with a manual start-up mode.
</p><p/>

</s1>

<s1 name="balance" title="Load Balancing">

<p>With Resin, you can distribute requests to multiple machines.  All
requests with the same session will go to the same host.  In addition, if one
host goes down, the IIS filter will send the request to the next
available machine.</p>

<p>In addition, you can specify backup machines.  The backup only will serve
requests if all primaries are down.</p>

<p>See the <a href="cluster.xtp">Resin config</a> section for more
details.</p>

<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster id="app-tier"&gt;

    &lt;server id="a" address="host1" port="6802" index="1"/&gt;
    &lt;server id="b" address="host2" port="6802" index="2"/&gt;
    &lt;server id="c" address="backup" port="6802" index="3" backup="true"/&gt;
  ...
&lt;/cluster&gt;
&lt;/resin&gt;
</example>
</s1>

<s1 title="Manual Configuration">

<p>Experts may want to configure Resin/IIS by hand instead
of using the setup program.  The steps involved are:</p>

<ol>
<li>Make sure resin.exe works
</li><li>Copy isapi_srun.dll to the IIS scripts directory, <var>d:\inetpub\scripts</var>.
You may need to run <var>net stop w3svc</var> to get permission to overwrite the file.
</li><li>If you have a virtual site (virtual hosts), you must configure IIS to have
the virtual directory <var>/scripts</var> point to <var>d:\inetpub\scripts</var> for
each virtual site.

</li><li>(optional) Create a resin.ini in <var>d:\inetpub\scripts</var> pointing to the ResinConfigServer
</li><li>(optional) Add a "CauchoStatus yes" line to the resin.ini for debugging
</li><li>Configure IIS to load isapi_srun.dll as an ISAPI filter.
</li><li>Restart IIS (control panel/services) or <var>net stop w3svc</var> followed
by <var>net start w3svc</var>.
</li><li>Browse /servlet/Hello and /foo.jsp.
You should see a "cannot connect" error.
</li><li>Start resin.exe
</li><li>Browse /servlet/Hello and /foo.jsp.  You should now see the servlet.
</li></ol>

<p>Copying isapi_srun.dll to <var>inetpub/scripts</var> directory is relatively
straightforward.  If you're upgrading to a new version of Resin, you
may need to stop IIS (control panel/services) to get permission to
overwrite isapi_srun.dll.</p>

<p>The resin.ini is an optional file in <var>inetpub/scripts</var> to
override the automatic registry $RESIN_HOME/conf/resin.xml configuration
file.  If you only have one Resin server, you should not create a resin.ini
and let isapi_srun.dll use the registry value set by the setup.exe program.</p>

<p>resin.ini is only needed if you have multiple Resin configuration
files for different IIS virtual hosts.</p>

<p>The resin.ini should contain the following line:</p>
<example>
ResinConfigServer localhost 6802
</example>

<p>You can change the host from <var>localhost</var> to a backend server.
You can also add multiple <var>ResinConfigServer</var> items to cluster the
configuration.</p>

<p>For debugging, you can add a "CauchoStatus yes" line to the resin.ini:</p>

<example>
ResinConfigServer localhost 6802
CauchoStatus yes
</example>

<p>For security purposes, the default value of CauchoStatus is "no" when
you have a resin.ini.</p>

<p>Adding an ISAPI filter is accomplished in the IIS manager.</p>

<s2 title="IIS and Resin on different machines">

<p>When Resin and IIS are on different machines, you'll change
the ResinConfigServer from "localhost" to the IP address of the
Resin server.</p>

<example>
ResinConfigServer 192.168.0.10 6802
CauchoStatus yes
</example>

</s2>

</s1>

<s1 title="Virtual Sites (Virtual Hosts)">

<p>If IIS is managing multiple virtual sites (everyone else calls them virtual
hosts), then you need to configure IIS to use the isapi_srun.dll filter for
each virtual site.  Configure IIS to have the virtual directory <var>/scripts</var>
for each virtual site point to <var>d:\inetpub\scripts</var>, so that each virtual site uses the isapiu_srun.dll.</p>

<p>Resin is configured to recognize virtual hosts with the <var>id</var> attribute
of <a config-tag="host"/>. </p>

<example title="resin.xml with virtual hosts">
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
  ...
  &lt;server&gt;
    ...

    &lt;host id="foo.com"&gt;
      ...
    &lt;/host&gt;

    &lt;host id="bar.com"&gt;
      ...
    &lt;/host&gt;

    &lt;host id="baz.com"&gt;
      ...
    &lt;/host&gt;

  &lt;/server&gt;
&lt;/resin&gt;
</example>

<p>Resin recognizes which host to use by examing the url.  With the above
example, a url of <code>http://foo.com/some/path</code> will use host
<code>id="foo.com"</code> and a url of <code>http://bar.com/some/path</code>
will use host <code>id="bar.com"</code>.</p>

</s1>

<s1 title="Virtual Sites with different JVM's">

<p>If a seperate JVM for each virtual site is desired, a seperate
<code>resin.ini</code> is used for each virtual site.  The resin.ini file is placed
in the <code>scripts</code> directory.</p>

<example title="resin-foo.xml">
<!-- for foo.com jvm -->
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster id=""&gt;

  &lt;server port="6800"/&gt;

  ...
  &lt;host id="*"&gt;
    ...
  &lt;/host&gt;
  
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<example title="resin-bar.xml">
<!-- for bar.com jvm -->
&lt;resin xmlns="http://caucho.com/ns/resin"&gt;
&lt;cluster id=""&gt;

  &lt;server port="6801"/&gt;

  ...
  &lt;host id="*"&gt;
    ...
  &lt;/host&gt;
&lt;/cluster&gt;
&lt;/resin&gt;
</example>

<p>
 Each virtual site can have its own resin service configured to run it. In order
  to do so with the example given above two services should be configured using the following options:
 
</p>
<example title="installing a servlet runner for each virtual site">
win&gt; resin-3.2.x/resin.exe -install-as "Resin-foo" \
    -conf resin-foo.xml -Xrs
win&gt; resin-3.2.x/resin.exe -install-as "Resin-bar" \
    -conf resin-bar.xml -Xrs
</example>

<example title="resin.ini for IIS virtual site foo.com">
ResinConfigServer localhost 6802
</example>

<example title="resin.ini for IIS virtual site bar.com">
ResinConfigServer localhost 6803
</example>

<p>The ResinConfigServer tells the isapi_srun.dll the port number to use to
connect to the Resin instance.  You can change the host from <var>localhost</var>
to a backend server.  You can also add multiple <var>ResinConfigServer</var> items
to cluster the configuration.</p>

<p>resin-foo.xml and resin-bar.xml contain a &lt;host id="*"&gt;, you do not
need to specify the host name because each conf/JVM is only going to
receive requests from a particular virtual site (because of the unique
resin.ini files).</p>

</s1>

<s1 title="Troubleshooting">

<ol>
<li>Check your configuration with the standalone web server.
In other words, add a &lt;http port='8080'/&gt; block and
browse http://localhost:8080.
</li><li>Check <var>http://localhost/caucho-status</var>.  That will tell if
the ISAPI filter/extension is properly installed. 
</li><li>Each server should be green and the mappings should
match your resin.xml.
</li><li>If caucho-status fails entirely, the problem is in the <var>isapi_srun</var>
installation.  Try
<var>http://localhost/scripts/isapi_srun.dll/caucho-status</var> directly
(bypassing the filter).  If this fails, IIS can't find isapi_srun.dll.
<ul>
<li>Check that isapi_srun.dll is in <var>c:\inetpub\scripts.</var>
</li><li>Make sure that both IIS and the underlying NTFS file system have permissions set appropriately for isapi_srun.dll.
</li><li>Make sure that your IIS host has a mapping from <var>/scripts</var>
to <var>c:\inetpub\scripts</var> and that the <var>/scripts</var> has execute
permissions.
</li><li>IIS 6 users may need to take <a href="#iis6">additional steps</a>.
</li></ul>
</li><li>If you've created a new
IIS web site, you need to create a virtual directory <var>/scripts</var> pointing
to the <var>d:\inetpub\scripts</var> directory.
</li><li>If caucho-status shows the wrong mappings, there's something wrong
with the resin.xml.
</li><li>If caucho-status shows a red servlet runner, then resin.exe hasn't
properly started.
</li><li>If you get a "cannot connect to servlet engine", caucho-status
will show red, and resin.exe hasn't started properly.
</li><li>If resin.exe doesn't start properly, you should look at the logs
in resin3.2/log.  You should start <var>resin.exe -verbose</var> to get
more information.
</li><li>If you get Resin's file not found, the IIS configuration
is good but the resin.xml probably points to the wrong directories.
</li></ol>

<s2 name="iis6" title="Troubleshooting IIS 6">
<p>
IIS 6/Windows 2003 users may need to perform additional steps.
</p>

<ul>

<li>Make sure that the System account has suffiicient privleges to
read the <code>C:\InetPub</code> and <code>C:\InetPub\Scripts</code> directory
and the <code>isapi_srun.dll</code>.

</li><li>Check the `Web Service Extensions' listed in the `Internet Service Manager'
to make sure that Resin is listed as a Web Service Extension and has a status
of "enabled". You may need to click "add a new web service extension...", 
under Extension name add .jsp or whatever your file extension is, 
click Add and browse to the isapi_srun.dll, check the "Set extension status
to allowed box", click OK.


</li><li>Check that the user specified as the
"application pool identity" for Resin has read/write
permission to the Resin installation directory.
In the Internet Service Manager, open the Properties dialog for
"Application Pools".  Find the User on the "Identity" tab, it may
be the user named "Network Service" in the drop-down list associated
with the radio button labeled "predefined".
Then check physical file permissions on the Resin installation
directory and all its subdirectories and subfiles, to ensure that
that user has read/write permission status is "Enabled".

</li></ul>

</s2>
</s1>
</body>
</document>

<document>
  <header>
    <product>resin</product>
    <version>Resin 3.2</version>
    <title>Resin Web Server</title>
    <description>
      <p>This document describes how to install and run Resin
        "standalone" (without Apache or IIS).</p>
      <p>Resin provides a reliable, fast Web server which can also
        be used as a load balancer. In our 
        <a href="performance.xtp">benchmarks</a>, it serves static
        pages faster than Apache. For most sites, Resin is ideal 
        because of its performance, security and reliability.</p>
    </description>
  </header>
  <body>
    <localtoc/>

<s1><figure src="httpd.gif"/></s1>

<s1 title="Unix (including Linux and MacOS-X)">

<s2 title="Getting Started">

<p>The following steps will start Resin for development:</p>

<ol>
<li>Install JDK 1.5 or later and link <var>/usr/java</var> to your Java home or
set environment variable <var>JAVA_HOME</var>.</li>
<li><code>tar -vzxf resin-3.2.0.tar.gz</code> in <var>/usr/local/share</var></li>
<li>(Optional) Link <var>/usr/local/share/resin</var> to the <var>resin-3.2.0</var> directory.</li>
<li>./configure; make; make install
  <ul><li>some <a href="config-cmdline.xtp">./configure options</a> are available</li></ul>
  </li>
<li>Run <code>java -jar resin/lib/resin.jar</code>
<ul><li>Or run <code>resin/bin/resin.sh</code></li></ul>
</li>
<li>Browse <var>http://localhost:8080</var></li>
</ol>

<example title="Successful Foreground Startup Output">
unix&gt; java -jar resin/lib/resin.jar
Resin Professional 3.2.0 (built Wed, 06 Aug 2008 12:49:30 PDT)
Copyright(c) 1998-2008 Caucho Technology.  All rights reserved.

  001111.license - 1 Resin server Hogwarts School

Starting Resin on Thu, 07 Aug 2008 19:11:52 -0700 (PDT)

[21:22:21.282] Proxy Cache disk-size=1024M memory-size=8M
[21:22:21.477] Server[id=,cluster=app-tier] starting
[21:22:21.477] 
[21:22:21.477] Mac OS X 10.4.7 ppc
[21:22:21.477] Java 1.5.0_06-64, 32, mixed mode, sharing, MacRoman, en, "Apple Computer, Inc."
[21:22:21.477] resin.home = /usr/local/share/resin
[21:22:21.478] resin.root = /var/www
[21:22:21.478] 
[21:22:21.492] Loaded Socket JNI library.
[21:22:21.595] hmux listening to localhost:6800
[21:22:21.696] http listening to *:8080
[21:22:21.842] Host[] starting
[21:22:22.089] WebApp[] starting
</example>

</s2>

<s2 name="deploy" title="Deployment Directories">

<p>When deploying, it's a good idea to create a bit of structure to
make Resin and website upgrades easier and more maintainable.</p>

<ol>
<li>Create a user to run Resin (e.g. <var>resin</var> or another non-root user)</li>
<li>Link <var>/usr/local/share/resin</var> to the current Resin directory. This is <var>$RESIN_HOME</var>.</li>
<li>Create a deployment root, e.g. <var>/var/www</var>, owned by
the resin user. This is <var>$RESIN_ROOT</var>.</li>
<li>Put the modified <var>resin.xml</var> in <var>/etc/resin/resin.conf</var></li>
<li>Put the site documents in <var>/var/www/hosts/default/webapps/ROOT</var>.</li>
<li>Put any .war files in <var>/var/www/hosts/default/webapps</var>.</li>
<li>Put any virtual hosts in <var>/var/www/hosts/www.foo.com</var>.</li>
<li>Output logs will appear in <var>/var/www/log</var>.</li>
<li>Create a startup script and configure the server to start it
when the machine reboots.</li>
</ol>

</s2>

<s2 name="script" title="Startup Script">

<p>You can create your own startup script which will start and stop
the <a href="#Running Resin">ResinWatchdog</a>, and will pass any <a href="#command-line">command-line arguments</a>.  The script
might typically do a number of things:</p>

<ol>
<li>Configure the location of Java in <var>JAVA_HOME</var></li>
<li>Configure the location of Resin in <var>RESIN_HOME</var></li>
<li>Configure your web site directory in <var>RESIN_ROOT</var></li>
<li>Select a server and pid file if you have multiple Resin servers.</li>
<li>Start and stop the <a href="#Running Resin">ResinWatchdog</a>.</li>
</ol>

<p>The start script might look like:</p>

<example title="Example start.sh script">
#!/bin/sh

JAVA_HOME=/usr/java
RESIN_HOME=/usr/local/share/resin
RESIN_ROOT=/var/www

java=$JAVA_HOME/bin/java

export JAVA_HOME
export RESIN_HOME
export RESIN_ROOT

$java -jar $RESIN_HOME/lib/resin.jar \
      -root-directory $RESIN_ROOT \
      -conf /etc/resin/resin.xml \
      -server a \
       $*
</example>

<p>This script would be called as <code>./start.sh start</code> to start
and <code>./start.sh stop</code> to stop.</p>

<p>The <code>-server</code> argument is only
necessary if you have multiple servers (JVM instances) either
on different machines or the same machine.
The <a href="resin-clustering.xtp">load balancing</a> and
<a href="config-sessions.xtp">distributed sessions</a> pages describe when
you might use <code>-server</code>.</p>

<p>More information on deploying on Unix is available on the
<a href="linux-boot.xtp">Linux boot</a> documentation.</p>

</s2>

</s1>

<s1 title="Windows">

<s2 title="Getting Started">

<ol>
<li>Install JDK 1.5 or later.</li>
<li>Make sure the JDK installation set the environment variable <var>JAVA_HOME</var> correctly</li>
<li>Unzip resin-3.2.0.zip</li>
<li>Run <code>java -jar resin-3.2.0/lib/resin.jar</code></li>
<li>Or execute <var>resin-3.2.0/resin.exe</var></li>
<li>Browse <var>http://localhost:8080</var></li>
</ol>

<example title="Starting on Win32">
C:\win32&gt; resin-3.2.0\bin\resin.exe
Resin 3.2.0 (built Wed Aug 06 18:21:13 PST 2008)
Copyright(c) 1998-2008 Caucho Technology.  All rights reserved.

Starting Resin on Thu, 07 Aug 2008 19:11:52 -0500 (EST)
[19:11:56.479] ServletServer[] starting
[19:11:57.000] Host[] starting
[19:11:58.312] Application[http://localhost:8380/doc] starting
[19:12:11.872] Application[http://localhost:8380/quercus] starting

...

[19:12:12.803]http listening to *:8380
[19:12:12.933]hmux listening to *:6802
</example>

</s2>

<s2 title="Deploying as a Windows Service">

<p>The Resin Web Server can be installed as an Windows service.</p>

<p>To install or remove the service, use setup.exe</p>

<example>
C:\&gt; resin-3.2.x\resin.exe -install -conf conf/myconf.xml \
                              -user MyResinUser -password mypassword
</example>

<p>To remove the service, use</p>

<p>You will either need to reboot the machine or start the service
from the Control&#160;Panel/Services panel to start the server.  On a
machine reboot, Windows will automatically start the web server.</p>

<p>You can also start and stop the service from the command-line:</p>

<example>
C:\&gt; net start resin
...
C:\&gt; net stop resin
</example>

<p>Resin's <var>-install</var> saves the command-line arguments and starts the service
with those arguments. You can look view them in the control panel, under
the executable string.</p>

<p>With multiple named servers, you can use different names to specify
the service name. The names must be supplied in Service Name field of setup.exe</p>

<p>
  Starting a service from command line.
</p>
<example>
C:\&gt; net start Resin
</example>

</s2>
</s1>

<s1 title="Running Resin">
<s2 title="Processes Overview">
<p>Resin runs as multiple processes that begin with the following JVM command:</p>

<example>
unix> java -jar /usr/local/share/resin/lib/resin.jar \
           -conf /etc/resin/resin.xml \
           start
</example>

<p>The <var>-jar</var> argument tells java to run the Main-Class defined
in resin.jar's manifest. The <var>-conf</var> argument specifies the 
path to your Resin configuration file. Lastly, Resin accepts <var>start</var>,
<var>stop</var>, and <var>restart</var> arguments which are passed to the <a href="#The Watchdog Process">watchdog
process</a>. An additional command-line option, <var>-server</var> is used
in <a href="resin-clustering.xtp">load-balanced deployments</a>.</p>

<p>JDK 1.5 includes a
<a href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/share/jps.html">jps</a>
command which will show the pids of any java processes.</p>

<example title="Example jps Process List">
unix&gt; jps
2098 Jps
2064 ResinWatchdogManager
2097 Resin
</example>

<p>When running as a daemon (eg, <code>resin.sh start</code>)
<var>ResinWatchdogManager</var> is the watchdog and <var>Resin</var>
is the actual Resin instance. When running Resin as a foreground process,
the process list displays <var>resin.jar</var>, which acts as the watchdog.</p>

<p>The first process that starts is the actual startup program,
<code>java -jar resin.jar</code>. It passes command-line arguments to
the second process, the ResinWatchdogManager. This watchdog process takes care of
starting the actual Resin process(es). ResinWatchdogManager monitors the state
of Resin and restarts it if necessary, improving reliability.</p>

<figure src="startup-watchdog.png"/>

</s2>

<s2 title="The Watchdog Process">
<p>The ResinWatchdogManager is the parent process, providing automatic restarting
Resin in cases of failure, and providing a single point of control for
the <var>start</var>, <var>stop</var> and <var>restart</var> of all Resin
processes. It is responsible for launching
Resin with the correct JVM arguments and environment options such as starting
Resin as the specified user, e.g. for <a href="server-tags.xtp#user-name">&lt;user-name&gt;</a> on unix.</p>

<p>ResinWatchdogManager watches Resin via a Socket connection. When
the watchdog socket closes, Resin shuts itself down gracefully. The 
watchdog closes the socket on a <var>stop</var> or <var>restart</var>
or if the watchdog itself is killed. If Resin exits for any reason,
the watchdog will automatically start a new Resin process. This socket connection
approach avoids the need for any signals or actual killing of Resin from the watchdog,
and also makes it easy to stop all the Resins if necessary by just killing
the watchdog.</p>

<p>The ResinWatchdogManager doesn't actually kill Resin or even check Resin's status,
it just checks to see if Resin is alive or not. So if the JVM were to completely
lock up, the watchdog would still think Resin was okay and would take no action.</p>
</s2>

<s2 title="Resin Processes">
<p>If Resin detects a major error (like running out of memory) or if the resin.xml changes,
it will exit and the watchdog would start a new Resin instance. Reasons a Resin instance
might exit include:</p>

<ul>
  <li>resin.xml changes</li>
  <li>out of memory error</li>
  <li>detected deadlocks</li>
  <li>segv and other severe errors</li>
</ul>

<p>Because the watchdog is always managing Resin processes, if you ever
need to stop Resin with <var>kill</var>, you must kill the watchdog. Just killing
the Resin process results in the watchdog restarting it automatically.</p>
</s2>

<s2 title="Logging">

<p>The watchdog will log to <var>log/watchdog-manager.log</var>.
The Resin standard out/err is <var>log/jvm-servername.log</var>.
ResinWatchdogManager is responsible for creating both of these log files,
so <var>jvm-servername.log</var> is not really under the control of the Resin instance.
This makes it somewhat more reliable in case of JVM deadlocks, etc.</p>
</s2>

</s1>

  </body>

</document>

<document>
  <header>
    <product>resin</product>
    <version>Resin 3.0</version>
    <title>Resin Installation Quick Start</title>

    <description>
<p>You can start using Resin by simply expanding the archive, and
starting Resin with a Java command line.</p>
    </description>
  </header>

  <body>
    <localtoc/>

<s1 name="quickstart" title="Quick Start for the Impatient">

<p>The Resin web server starts  listening to HTTP requests on
port 8080 and listens on port 6800
for <a href="resin-clustering.xtp">load balancer</a>
or cluster messages.  Resin can then be
used for development or evaluation.  The steps are:</p>

<ol>
<li>Install JDK 1.5 or later.

<ul>
  <li>On Unix, set the JAVA_HOME variable or
      link /usr/java to the java home.</li>
  <li>On Windows, check to make sure the JDK
      installation sets JAVA_HOME correctly.</li>
</ul></li>

<li>unzip/untar the Resin download.  It will unzip into resin-3.2.x/.

<ul>
  <li>resin-3.2.x is resin.home, the location of the Resin distribution.</li>
  <li>For now, it is also ${resin.root}, the location of your content.
Soon, you will want to move ${resin.root} to
something like <var>/var/www</var>.</li>
</ul></li>

<li>On Unix, execute use ./configure; make; make install</li>

<li>Start in development mode <var>java -jar resin-3.2.x/lib/resin.jar</var></li>

<li>Browse <code>http://localhost:8080</code></li>
</ol>

<s2 title="Adding Content">

<p>Once you've made sure Resin is working, you'll want to add some content
to the default web site:</p>

<ol>
<li>Add PHP files like <var>resin-3.2.0/hosts/default/webapps/ROOT/hello.php</var>.

<ul><li>The URL in your browser will
  be <code>http://localhost:8080/hello.php</code></li></ul></li>

<li>Add JSP files like <var>resin-3.2.0/hosts/default/webapps/ROOT/hello.jsp</var>.

<ul><li>The URL in your browser will
  be <code>http://localhost:8080/hello.jsp</code></li></ul></li>

<li>Add servlets like <var>resin-3.2.0/hosts/default/webapps/ROOT/WEB-INF/classes/test/HelloServlet.java</var>
<ul><li>
Create a file <var>resin-3.2.0/hosts/default/webapps/hello/WEB-INF/resin-web.xml</var> to
configure the servlet.</li>
</ul></li>

<li>Add .war files like <var>resin-3.2.0/hosts/default/webapps/hello.war</var>.

<ul><li>The URL in your browser is
<code>http://localhost:8080/hello</code></li></ul></li>

<li>Create web-apps directly like
<var>resin-3.2.0/hosts/default/webapps/hello/index.php</var>

The URL in your browser is <code>http://localhost:8080/hello</code>.
<ul><li>
Create a file <var>resin-3.2.0/hosts/default/webapps/hello/WEB-INF/resin-web.xml</var> to
configure the 'hello' web application.</li>
</ul></li>
</ol>

</s2>

<s2 title="Virtual Hosts">

<p>You can easily create <a href="virtual-host.xtp">virtual hosts</a>
by creating content in the <var>resin.root/hosts</var> directory:</p>

<ol>

<li>Add a hello.php to <var>resin-3.2.0/hosts/localhost/webapps/ROOT/hello.php</var>
</li>

</ol>

</s2>

<s2 title="Permanent content locations">

<p>Eventually, you'll want to move your content and configuration
into a more permanent location:</p>

<ol>

<li>Create a permanent resin.root:

<ul>
<li>Virtual hosts go in <var>/var/www/hosts/www.foo.com/webapps/ROOT</var></li>
<li>Run <var>java -jar resin-3.2.0/lib/resin.jar --root-directory /var/www</var></li>
<li>You can also set &lt;root-directory> in the &lt;<a href="cluster-tags.xtp#root-directory">cluster</a>> to configure the resin root.</li>
</ul>
</li>

<li>If needed, modify the Resin configuration in <var>resin-3.2.0/conf/resin.xml</var>

<ul>
<li>You can copy resin.xml to somewhere like <var>/etc/resin/resin.xml</var></li>
<li>Run <var>java -jar resin-3.2.0/lib/resin.jar --conf /etc/resin/resin.xml</var></li>
</ul>
</li>

</ol>

</s2>

<s2 title="Running Resin as a daemon">

<p>In a deployment environment, Resin will run as a background daemon.
The previous steps ran Resin in the foreground, which is convenient
for development since the logging output goes to the console.
When running as a daemon, Resin detaches from the console and continues
running until told to stop.</p>

<ol>
<li>Start resin with <var>java -jar resin-3.2.0/lib/resin.jar start</var></li>
<li>Stop resin with <var>java -jar resin-3.2.0/lib/resin.jar stop</var></li>
<li>Restart resin with <var>java -jar resin-3.2.0/lib/resin.jar restart</var></li>
</ol>

</s2>

<p>Until you're ready to deploy the server, those are all the
steps needed to get started with Resin.</p>

</s1>

<s1 title="Preconditions">

<p>Resin 3.2 needs Java before it can run.  It needs JDK 1.5 or a later JDK.</p>

<p>Sun's JDK for Windows, Solaris, and Linux can be found at
<a href="http://java.sun.com">http://java.sun.com</a>.  Sun also has
links to some other ports of the JDK.</p>

</s1>

<s1 title="Resin Web Server">

<p>The easiest and fastest Resin configuration uses the Resin as the primary or
only web server.  This configuration provides a Java HTTP server. We recommend
you start with this before trying any other configuration.</p>

<figure src="httpd.gif"/>

<p>The server listens at port 8080 in the default configuration and
can be changed to the HTTP port 80 during deployment.</p>

<s2 title="Windows">

<ol>
<li>Install JDK 1.5 or later.</li>
<li>Check that the environemnt variable JAVA_HOME is set to the JDK location, e.g. "c:\j2sdk1.5.0_01"</li>
<li>Unzip resin-3.2.0.zip</li>
<li>Define the environment variable RESIN_HOME to the location of
Resin, for example "c:\resin-3.2.0"</li>
<li>Execute <var>java -jar resin-3.2.0/lib/resin.jar</var></li>
<li>Browse http://localhost:8080</li>
</ol>
</s2>

<s2 title="Unix (including MacOS-X)">

<ol>
<li>Install JDK 1.5 or later and link /usr/java to the Java home or define the environment variable JAVA_HOME.</li>
<li>tar -vzxf resin-3.2.0.tar.gz</li>
<li>cd resin-3.2.0</li>
<li>./configure</li>
<li>make</li>
<li>make install</li>
<li>Execute <var>java -jar resin-3.2.0/lib/resin.jar</var></li>
<li>Browse http://localhost:8080</li>
</ol>

</s2>

<p>For more details, see the <a href="resin-web-server.xtp">Resin Web Server</a>
configuration page.</p>

</s1>

<s1 title="Resin with Apache">

<p>If you are already using Apache for your web server, you can use Resin with
Apache.  This configuration uses Apache to serve html, images, PHP, or Perl,
and Resin to serve JSPs and Servlets.</p>

<p>The Apache configuration uses two pieces: a C program extending
Apache (<var>mod_caucho</var>) and Java program supporting servlets and
JSP (<var>srun</var>.)  The two pieces communicate with a special high-speed
protocol.</p>

<figure src="apache_srun.gif"/>

<p>To configure Apache with Resin, you must
configure both Apache and Resin.  The Resin
configuration is identical to Resin's httpd configuration.  The Apache
configuration tells Apache how to find Resin.</p>

<ol>
<li>On Unix only, compile mod_caucho.so using <code>./configure --with-apache; make</code></li>
<li>Make any needed Apache httpd.conf changes</li>
<li>Make any needed Resin resin.xml changes</li>
<li>Restart Apache</li>
<li>Start Resin with <code>resin-3.2.0/bin/resin.sh</code> on Unix or
<code>resin-3.2.0/resin.exe</code> on Windows.</li>
</ol>

<p>On Unix, you'll run configure using <code>--with-apache</code> and then <code>make</code>:
</p>

<example>
unix&gt; ./configure --with-apache=/usr/local/apache
unix&gt; make
unix&gt; make install
</example>

<p>For more details, see the <a href="install-apache.xtp">Resin with Apache</a>
configuration page.</p>

</s1>

<s1 title="Resin with IIS">

<p>You can also combine IIS and Resin.  IIS
serves static content like html and images and Resin serves JSPs and
Servlets.   The IIS configuration requires two pieces:
<var>isapi_srun.dll</var>, an ISAPI extension which lets IIS talk to
Resin, and <var>srun</var>, Resin's Java support.</p>

<figure src="iis_srun.gif"/>

<p>For this setup you must configure both IIS and Resin.  The Resin
configuration to run with IIS is identical to Resin's standalone
configuration.  The IIS configuration tells IIS how to find Resin.
</p>

<ol>
<li>Setup the registry and IIS using resin-3.2.0/setup.exe</li>
<li>Any needed Resin resin.xml changes</li>
<li>Restart IIS</li>
<li>Start Resin with resin-3.2.0/resin.exe.</li>
</ol>

<p>For more details and troubleshooting steps, see the
<a href="install-iis.xtp">Resin with IIS</a> configuration page.</p>

</s1>

</body>
</document>

<document>
  <header>
    <product>resin</product>
    <title>Documentation Reorg Notes</title>
    <author>sam@caucho.com</author>
    <brief>
      Notes on reorganization for 3.0
    </brief>
  </header>

  <body>
  <summary/>

<s1 title="priorities">
<ul>
<li>rock bottom basics, like put your classes here, make sure servlets
  are in a class, etc.

</li><li>jstl/jsp el, mostly because it is new

</li><li>need for clear examples of using ejb as a client, setting up server

</li><li>servlets serving binary files

</li><li>servlets serving binary files from database

</li><li>databases, specifically an example of jndi config with
  transaction/without transaction for the major vendors (Oracle, SQL
  Server, DB2, etc) would be good.

  I was thinking of posting to resin-interest and soliciting some  
  working examples from people for the various databases.
  Good idea?

</li><li>SSL Hardware

</li><li>Caching.  It's not that people have problems with it, I think it's
  more they look at it, don't really understand it, and then just
  forget about it.

</li><li>multiple jvm, i.e. jvm per host, jvm per web-app etc.
  I've got some stuff that I have sent to people, I just need to
  update it for 3.0 and integrate it into the docs.

</li><li>an XSL "quick start" guide.  i.e. quick pointer on how to get Resin
  filtering jsp/servlet output with xsl
</li></ul>
</s1>

<s1 title="webapps outline">
<ul>
<li>core concepts
  <ul>
  <li>web application defined
  </li><li>brief blurb on what a servlet is
  </li><li>brief blurb on what JSP is
  </li><li>application (ServletContext)
  </li><li>request/response
  </li><li>session 
  </li></ul>

</li><li>file's in a web application (.war)
  <ul>
  <li>WEB-INF/web.xml
  </li><li>WEB-INF/lib
  </li><li>WEB-INF/classes
  </li><li>WEB-INF/resin-web.xml
  </li></ul>

</li><li>architecture
  <ul>
  <li>model 1 - model 1 1/2 - model 2 (or whatever they are called now)
  </li><li>JSF (once it exists)
  </li><li>XTP mentioned
  </li><li>caching mentioned (details on caching are in performance section)
  </li></ul>

</li><li>common tasks
  <ul>
  <li>using a database (brief, link to databases section, also mention
    CMP)
  </li><li>reading/writing configuration files
  </li></ul>

</li><li>make system
  <ul>
  <li>automatic compilation explained
  </li><li>seperating the java source from compiled classes
  </li></ul>
</li></ul>

</s1>

<s1 title="and the winner is ....">
<p>places to update/send announcements to when 3.1 is released:</p>
<ul>
<li>http://www.jaagle.com/cat.php?id=124
</li><li>http://www.theserverside.com/reviews/matrix.jsp 
</li><li>http://www.techmetrix.com/trendmarkers/techmetrixasd.php?file=prof_resin
</li></ul>
</s1>

<s1 title="TODO">
<dl>
<dt>'href' in section title
<dd>does it work&gt;
</dd></dt><dt>XSLT not XSL
<dd>
</dd></dt><dt>javadoc in tutorials
<dd>need to build javadoc, include
link in index.xtp for each tutorial
</dd></dt><dt>ref/servlet-library.xtp, ref/filter-library.xtp
<dd>(admin servlet now in admin)
</dd></dt><dt>installation
<dd>make more like new layout (no single page with install
summaries)
</dd></dt><dt>ref/taglib.xtp
<dd>hrm, jsp or config?
</dd></dt><dt>faq
<dd>no integration into toc yet, but <a href="faq|index">available</a>
</dd></dt><dt>navigation
<dd>on local deploy, FAQ|ERRATA|CAUCHO|DOWNLOAD in top right
</dd></dt></dl>
</s1>

<s1 title="href-map.xml" product="resin">
<pre>
The form of an href is 
"root|topic|page"

Here are some examples:

"doc|jsp|index" becomes "/jsp/index.xtp"
"doc|xpath|index" becomes "/xml/xpath.xtp"

So the first example doesn't even have an entry in href-map.xml.
The second one does because 'xpath' is actually currently in the
"xml/" directory.

And there are some conventions:

"doc|topic|index" or "|topic|"
    ('doc' and 'index' are defaults)

  - always gives a good starting point for the topic

"doc|topic|fun" 
  - always a reference like description of function. i.e
  "doc|xpath|fun" 
  "doc|xpath|fun#count" 
  "doc|xslt|fun"  (reference for xslt tags)

"doc|topic|java"
  - using from java. i.e
  "doc|xpath|fun"
  "doc|xml|fun"

"javadoc|packagename|"
"javadoc|classname|member"

The idea of "root" is that you might need to map a root to different
places.  So on a local deploy without the javadoc included "javadoc"
goes to the caucho site, with local deploy it stays local.
</pre>
</s1>

<s1 title="Format of all documents">
No more s1,s2,s3 etc. (still supported)

All documents look like:
<example>
&lt;document&gt;
  &lt;header&gt;
    &lt;product&gt;resin|resin-ee&lt;/product&gt;
    &lt;resin-2.0&gt;path/of/old/file/if/applicable&lt;/resin-2.0&gt;  -- optional
    &lt;type&gt;article | contents | tutorial&lt;/type&gt;             -- optional
    &lt;level&gt;toplevel | toplevel-topic&lt;/level&gt;                 -- optional
    &lt;title&gt;title of this document&lt;/title&gt;
    &lt;subtitle&gt;subtitle of this document&lt;/subtitle&gt;         -- optional
    &lt;date&gt;Aug 31, 1999&lt;/date&gt;                              -- optional
    &lt;authors&gt;                                              -- optional
      &lt;person&gt;&lt;/person&gt;
    &lt;/authors&gt;                                             -- optional
    &lt;brief&gt;                                                -- optional
      A brief (one sentence) description
    &lt;/brief&gt;
    &lt;description&gt;                                          -- optional
      &lt;p&gt;A longer description.  The first sentence should stand on
      it's own, it may be used if no brief description is provided. If
      it contains multiple paragraphs like this one&lt;/p&gt;
      &lt;p&gt;The first paragraph should make sense on it's own, as it will
      be used in annotated tabled of contents. All paragraphs are
      shown when this page is shown&lt;/p&gt;
      &lt;p&gt;If no &amp;lto&gt;&lt;/p&gt; are included, then it is as if it was one
      paragraph.&lt;/p&gt;
    &lt;/description&gt;
  &lt;/header&gt;

  
  &lt;summary/&gt;
  
  <i>
  Summary causes the display of:
    1) header/description (or header/brief if no description)

    And if this is the topmost section for a displaying page:
    2) if header.type = 'contents', an
       annotated table of contents
    3) not a contents type page, a toclocal (aka summarylist) if there
       a child sections
    4) if this page contains &lt;defun/&gt;, an objsummary 

   So for any kind of documentation you can use &lt;summary/&gt; and
   get something appropriate.

   And for different formatting (i.e. printed docs), the
   &lt;summary/&gt; can do different things.

   There are also attributes to override the default behaviour.
  </i>

  &lt;section title='Introduction'&gt;
    &lt;header&gt;
      &lt;description&gt;
        Welcome to the example blah blah blah.
      &lt;/description&gt;
    &lt;/header&gt;

    &lt;summary/&gt;

    &lt;section title='Subsection'&gt;
      this some thing or something
    &lt;/section&gt;
  &lt;/section&gt;

  <i>
  Section: a new section, can be nested.  Can contain a header
  child or can specify title as an attribute.  Can also contain @href
  which causes the section header to be a link to some other place

  This use of only &lt;section&gt; allows for extremely flexible
  rearranging of documents and formatting for different outputs.
    </i>

&lt;/document&gt;
</example>
</s1>

<s1 title="config docs">
<pre>
Scott&gt; For example, the &lt;http&gt; description in port-config.xtp would have at the 
Scott&gt; bottom of the &lt;defun&gt;
Scott&gt; 
Scott&gt; &lt;def&gt;
Scott&gt; http = element http {
Scott&gt;   (attribute id { string }
Scott&gt;    | attribute server-id { string }
Scott&gt;    | element server-id { string })?
Scott&gt; 
Scott&gt;   &amp; (attribute port { string } | element port { string })
Scott&gt; 
Scott&gt;   &amp; (attribute host { string } | element host { string })?
Scott&gt; 
Scott&gt;   &amp; (attribute tcp-no-delay { string } | element tcp-no-delay { string })?
Scott&gt; 
Scott&gt;   &amp; (openssl | jsse-ssl)?
Scott&gt; }
Scott&gt; &lt;/def&gt;
Scott&gt; 
</pre>
</s1>
      
<s1 title="sections in top-level topics">
<dl>
<dt>overview
</dt><dt>configuration
</dt><dt>users guide
</dt><dt>reference
</dt><dt>articles

</dt><dt>code library
<dd>snippets of useful code, like current Servlet Filter's

</dd></dt><dt>recommended resources
<dd>non caucho resources, like specifications
</dd></dt></dl>
</s1>

<s1 title="Things that don't fit">
<ul>
<li>CGI</li>
</ul>
</s1>
</body>
</document>
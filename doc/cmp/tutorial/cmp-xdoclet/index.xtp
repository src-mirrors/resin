<document>
  <header>
    <product>resin-ee</product>
    <resin-2.0>$ee/ejb-tut/cmp-xdoclet.xtp</resin-2.0>
    <title>XDoclet</title>
    <description>
      <p><a href="http://xdoclet.sourceforge.net">XDoclet</a> is a
      freely-available tool that lets you specify all of the
      information needed for your entity bean in just one place. You
      specify all the remote/local home/component interface and
      deployment details as Javadoc @tags in your bean implementation
      class and run Ant tasks to generate the relevant files.</p>
      
      <p>Suppose you want to add a new business method to an entity
      bean. First you add it to your bean implementation. Then you add
      it to its local component interface. Then maybe you add it to
      its remote component interface. Then you update the deployment
      descriptor. Kind of a pain. Wouldn't it be nice if you could
      keep all that information in one place?</p>
      
      <p>This example illustrates developing and deploying a pair of
      CMP entities in an n-m relationship using XDoclet. XDoclet tasks
      are run via <a href="http://jakarta.apache.org/ant/index.html">Ant</a> and this
      example assumes that you are familiar with the tool.</p>
      
    </description>
  </header>

  <body>
    <summary/>


<s1 title="Database Schema">

<p>The example has 3 tables: courses, students, and a link table storing the relationship between them. A student can be enrolled in several courses and a course has many students (n-m relationship).</p>

<example title="xdoclet.sql">
CREATE TABLE xdoclet_courses (
  id VARCHAR(250) NOT NULL,
  instructor VARCHAR(250),

  PRIMARY KEY(id)
);

CREATE TABLE xdoclet_students (
  name VARCHAR(250) NOT NULL,

  PRIMARY KEY(name)
);

CREATE TABLE xdoclet_enrollment (
  student VARCHAR(250) NOT NULL,
  course VARCHAR(250) NOT NULL
);

INSERT INTO xdoclet_courses VALUES('Defense Against the Dark Arts', 'Remus Lupin');
INSERT INTO xdoclet_courses VALUES('Divination', 'Sybil Trelawney');

INSERT INTO xdoclet_students VALUES('Harry Potter');
INSERT INTO xdoclet_students VALUES('Ron Weasley');
INSERT INTO xdoclet_students VALUES('Hermione Granger');

INSERT INTO xdoclet_enrollment VALUES('Hermione Granger', 'Defense Against the Dark Arts');
INSERT INTO xdoclet_enrollment VALUES('Harry Potter', 'Defense Against the Dark Arts');
INSERT INTO xdoclet_enrollment VALUES('Ron Weasley', 'Defense Against the Dark Arts');

INSERT INTO xdoclet_enrollment VALUES('Harry Potter', 'Divination');
INSERT INTO xdoclet_enrollment VALUES('Ron Weasley', 'Divination');
</example>

</s1>


<s1 title="Client Servlet">

<p>The example client loops through all courses and prints each enrolled student, then prints the set of all teachers in the <var>xdoclet_courses</var> table. It then adds a student to a course and prints the new student list.</p>

<p>As in previous tutorials, Resin-EJB stores the home interfaces
in a JNDI context.  The student home is stored in
<var>java:comp/env/cmp/xdoclet_StudentBean</var>
and the course home is stored at <var>java:comp/env/cmp/xdoclet_CourseBean</var>.
The <var>ejb-local</var> is used since these are the local interfaces for the
beans.</p>

<s2 title="Servlet">

<example title="Servlet Fragment">
...

/**
 * A client to illustrate EJB managed relations in a many-to-many context.
 *
 * @web:servlet name="findServlet"
 * @web:servlet-mapping url-pattern="/find"
 */
public class FindServlet extends HttpServlet
{
  StudentHome studentHome;
  CourseHome courseHome;

...

  Course divination = courseHome.findByPrimaryKey("Divination");
  Student hermione = studentHome.findByPrimaryKey("Hermione Granger");
  Iterator i;
  
  out.println("&lt;h3&gt;Students By Class&lt;/h3&gt;");
  // iterate over all courses
  i = courseHome.findAll().iterator();
  out.println("&lt;ul&gt;");
  while (i.hasNext()) {
    Course course = (Course) i.next();
    out.println("&lt;li&gt;&lt;b&gt;" + course.getName() + ":&lt;/b&gt;");
    
    out.println("&lt;ul&gt;");
    // Students in the Course
    Iterator students = course.getStudentList().iterator();
    if (! students.hasNext())
      out.println("&lt;li&gt;No students&lt;/li&gt;");
    while (students.hasNext())
      out.println("&lt;li&gt;" + ((Student) students.next()).getName() + "&lt;/li&gt;");
    out.println("&lt;/ul&gt;&lt;/li&gt;");
  }
  out.println("&lt;/ul&gt;");
  
  // add a student to Divination
  out.println("Enrolling Hermione in Divination&lt;br&gt;");
  divination.addStudent(hermione);
  out.println("&lt;h4&gt;Divination's new student list:&lt;/h4&gt;");
  out.println("&lt;ul&gt;");
  i = divination.getStudentList().iterator();
  while (i.hasNext())
      out.println("&lt;li&gt;" + ((Student) i.next()).getName() + "&lt;/li&gt;");
  out.println("&lt;/ul&gt;");
  divination.removeStudent(hermione);
  
  // list all instructors
  i = courseHome.listAllInstructors().iterator();
  out.println("&lt;h3&gt;Teachers&lt;/h3&gt;");
  if (! i.hasNext())
    out.println("No teachers&lt;br&gt;");
  while (i.hasNext())
    out.println(((String) i.next()) + "&lt;br&gt;");

...
</example>

<results>
&lt;h3&gt;Students By Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Defense Against the Dark Arts:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Hermione Granger&lt;/li&gt;
&lt;li&gt;Harry Potter&lt;/li&gt;
&lt;li&gt;Ron Weasley&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Divination:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Harry Potter&lt;/li&gt;
&lt;li&gt;Ron Weasley&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

Enrolling Hermione in Divination&lt;br&gt;
&lt;h4&gt;Divination's new student list:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Harry Potter&lt;/li&gt;
&lt;li&gt;Ron Weasley&lt;/li&gt;
&lt;li&gt;Hermione Granger&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Teachers&lt;/h3&gt;
Remus Lupin&lt;br&gt;
Sybil Trelawney&lt;br&gt;

...
</results>

</s2>

<s2 title="Servlet Javadoc Tags">

<p>The class-level tags are used in web-app deployment descriptor (web.xml) generation.</p>

<p><var>@web:servlet</var> declares a named servlet and <var>@web:servlet-mapping</var> declares its mappings.</p>

<results title="Sample Generated web.xml">
&lt;web-app&gt;
...

  &lt;servlet&gt;
    &lt;servlet-name&gt;findServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;example.cmp.xdoclet.FindServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;findServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/find&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

...

&lt;/web-app&gt;
</results>

</s2>

</s1>


<s1 title="Bean Implementations">

<s2 title="Course Bean">

<p>A Course is identified by name and is taught by an instructor (name). Courses can also list their Students, add a new Student, or drop an enrolled Student.</p>

<p>A list of all Course instructor names will also be made available via its Home interface.</p>

<example title="CourseBean.java">
package example.cmp.xdoclet;

import java.util.*;

/**
 * Implementation class for the Course bean.
 *
 * @ejb:bean name="xdoclet_CourseBean" view-type="local" type="CMP"
 *  reentrant="False" schema="courses" primkey-field="name"
 * @ejb:pk class="java.lang.String"
 * @ejb:home generate="local" local-class="example.cmp.xdoclet.CourseHome"
 * @ejb:interface generate="local" local-class="example.cmp.xdoclet.Course"
 *
 * @ejb:finder signature="java.util.Collection findByStudent(java.lang.String student)"
 *  query="SELECT c FROM students student, IN(student.courseList) c WHERE student.name = ?1"
 *
 * @ejb:finder signature="java.util.Collection findAll()"
 *  query="SELECT c FROM courses c ORDER BY c.name"
 *
 * @ejb:select signature="java.util.Collection ejbSelectAllInstructors()"
 *  query="SELECT c.instructor FROM courses c 
 *    WHERE c.instructor IS NOT NULL 
 *    ORDER BY c.instructor"
 *
 * @resin-ejb:entity-bean sql-table="xdoclet_courses"
 */
abstract public class CourseBean extends com.caucho.ejb.AbstractEntityBean
{
  /**
   * A Course is identified by its name.
   *
   * @ejb:interface-method
   * @ejb:persistent-field
   * @ejb:pk-field
   *
   * @resin-ejb:cmp-field sql-column="id"
   */
  abstract public String getName();

  /**
   * Returns the name of this Course's instructor.
   *
   * @ejb:interface-method
   * @ejb:persistent-field
   */
  abstract public String getInstructor();

  /**
   * Returns a Collection of Students enrolled in this Course.
   *
   * @ejb:interface-method
   * @ejb:relation name="xdoclet_enrollment" role-name="course"
   *
   * @resin-ejb:relation sql-table="xdoclet_enrollment" sql-column="course"
   */
  abstract public Collection getStudentList();

  /**
   * Enrolls a Student is this Course.
   *
   * @ejb:interface-method
   */
  public void addStudent( Student student )
  {
    getStudentList().add( student );
  }

  /**
   * Drops a Student from this Course.
   *
   * @ejb:interface-method
   */
  public void removeStudent( Student student )
  {
    getStudentList().remove( student );
  }
  
  /**
   * Returns the names of all instructors in alphabetical order.
   */
  abstract public Collection ejbSelectAllInstructors()
  throws javax.ejb.FinderException;
  
  /**
   * Returns the names of all instructors in alphabetical order.
   *
   * @ejb:home-method view-type="local"
   */
  public Collection ejbHomeListAllInstructors()
  throws javax.ejb.FinderException
  {
    return ejbSelectAllInstructors();
  }
}
</example>

</s2>

<s2 title="Student Bean">

<p>A Student is also identified by name and is enrolled in a number of Courses.</p>

<example title="StudentBean.java">
package example.cmp.xdoclet;

import java.util.*;

/**
 * Implementation class for the Student bean.
 *
 * @ejb:bean name="xdoclet_StudentBean" view-type="local" type="CMP"
 *  reentrant="False" schema="students" primkey-field="name"
 * @ejb:pk class="java.lang.String"
 * @ejb:home generate="local" local-class="example.cmp.xdoclet.StudentHome"
 * @ejb:interface generate="local" local-class="example.cmp.xdoclet.Student"
 *
 * @ejb:finder signature="java.util.Collection findAll()"
 *  query="SELECT s FROM students s ORDER BY s.name"
 * @ejb:finder signature="java.util.Collection findByCourse(java.lang.String course)"
 *  query="SELECT s FROM courses course, IN(course.studentList) s WHERE course.name = ?1"
 *
 * @resin-ejb:entity-bean sql-table="xdoclet_students"
 */
abstract public class StudentBean extends com.caucho.ejb.AbstractEntityBean
{
  /**
   * A Student is identified by name.
   *
   * @ejb:interface-method
   * @ejb:persistent-field
   * @ejb:pk-field
   */
  abstract public String getName();

  /**
   * Returns a Collection of Courses which this Student is taking.
   *
   * @ejb:interface-method
   * @ejb:relation name="xdoclet_enrollment" role-name="student"
   *
   * @resin-ejb:relation sql-column="student"
   */
  abstract public Collection getCourseList();
  
  /**
   * Enrolls this Student in a Course.
   *
   * @ejb:interface-method
   */
  public void addCourse(Course course)
  {
    getCourseList().add(course);
  }
  
  /**
   * Drops this Student from a Course.
   *
   * @ejb:interface-method
   */
  public void removeCourse(Course course)
  {
    getCourseList().remove(course);
  }
}
</example>

</s2>

<s2 title="Bean Javadoc Tags">

<p>Entity find and select methods are declared via the class-level <var>@ejb:finder</var> and <var>@ejb:select</var> tags. <var>CourseBean</var> exposes its <var>ejbSelectAllInstructors</var> method to its Home interface via the <var>@ejb:home-method</var> tag on its <var>ejbHomeListAllInstructors</var> method.

</p><p>The <var>sql-table</var> parameter is used to specify the database table of a bean when different from its abstract schema name (ie: <var>courses</var> vs. <var>xdoclet_courses</var>) or the name of a link table in a n-m relationship. Likewise, the <var>sql-column</var> maps persistent fields to database columns.</p>

<p>The following table briefly explains the javadoc tags used. For a complete reference, consult the XDoclet <a href="http://xdoclet.sourceforge.net">documentation</a> and the Resin-specifc extension docs included in <var>resin-xdoclet.jar</var>.</p>

<deftable>
<tr><th>Class Tag</th><th>Attribute</th><th>Meaning
</th></tr><tr><td>@ejb:bean</td><td>&#160;</td><td>Bean definition for class and deployment descriptor generation
</td></tr><tr><td>&#160;</td><td>name</td><td>Bean name in deployment descriptor
</td></tr><tr><td>&#160;</td><td>view-type</td><td>Local, remote, or both
</td></tr><tr><td>&#160;</td><td>reentrant</td><td>Entity reentrancy: True or False
</td></tr><tr><td>&#160;</td><td>type</td><td>CMP or BMP
</td></tr><tr><td>&#160;</td><td>schema</td><td>Abstract schema name used in EJB-QL
</td></tr><tr><td>&#160;</td><td>primkey-field</td><td>Primary key field name
</td></tr><tr><td>@ejb:pk</td><td>&#160;</td><td>Entity primary key definition
</td></tr><tr><td>&#160;</td><td>class</td><td>Primary key class name
</td></tr><tr><td>@ejb:home</td><td>&#160;</td><td>Home interface definition
</td></tr><tr><td>&#160;</td><td>generate</td><td>Generate remote home, local home, or both
</td></tr><tr><td>&#160;</td><td>local-class</td><td>Local home class name
</td></tr><tr><td>@ejb:interface</td><td>&#160;</td><td>Component interface definition
</td></tr><tr><td>&#160;</td><td>generate</td><td>Generate remote interface, local interface, or both
</td></tr><tr><td>&#160;</td><td>local-class</td><td>Local interface class name
</td></tr><tr><td>@ejb:finder</td><td>&#160;</td><td>Defines a (home) finder method
</td></tr><tr><td>&#160;</td><td>signature</td><td>Finder method signature, including return type
</td></tr><tr><td>&#160;</td><td>query</td><td>Finder EJB-QL
</td></tr><tr><td>@ejb:select</td><td>&#160;</td><td>Select method declaration
</td></tr><tr><td>&#160;</td><td>signature</td><td>Select method signature, including return type
</td></tr><tr><td>&#160;</td><td>query</td><td>Select EJB-QL

</td></tr><tr><td>@resin-ejb:entity-bean</td><td>&#160;</td><td>Resin-specific entity information
</td></tr><tr><td>&#160;</td><td>sql-table</td><td>Physical SQL table name corresponding to this entity's schema

</td></tr><tr><th>Method Tag</th><th>Attribute</th><th>Meaning
</th></tr><tr><td>@ejb:interface-method</td><td>&#160;</td><td>Declares this method a part of the bean's component interface
</td></tr><tr><td>@ejb:persistent-field</td><td>&#160;</td><td>Declares this method a CMP field
</td></tr><tr><td>@ejb:pk-field</td><td>&#160;</td><td>Declares this method a primary key field
</td></tr><tr><td>@ejb:relation</td><td>&#160;</td><td>Define a persistent relation
</td></tr><tr><td>&#160;</td><td>name</td><td>Relation name (must be the same on both sides for bi-directional)
</td></tr><tr><td>&#160;</td><td>role-name</td><td>Relationship role name
</td></tr><tr><td>@ejb:home-method</td><td>&#160;</td><td>Declares a Home method
</td></tr><tr><td>&#160;</td><td>view-type</td><td>Local or remote

</td></tr><tr><td>@resin-ejb:cmp-field</td><td>&#160;</td><td>Resin-specific CMP field definition
</td></tr><tr><td>&#160;</td><td>sql-column</td><td>Physical column name
</td></tr><tr><td>@resin-ejb:relation</td><td>&#160;</td><td>Resin-specific extension to @ejb:relation
</td></tr><tr><td>&#160;</td><td>sql-table</td><td>Physical link table name for n-m relations
</td></tr><tr><td>&#160;</td><td>sql-column</td><td>SQL column name of this CMR field
</td></tr></deftable>

</s2>

</s1>


<s1 title="Ant Setup">

<p>Download <a href="http://prdownloads.sourceforge.net/xdoclet/xdoclet-1.1.2.zip?download">XDoclet 1.1.2</a> and the Resin-XDoclet <a href="http://caucho.com/projects/xdoclet/resin-xdoclet.jar">mods</a>.</p>

<s2 title="Classpath">

<p>Copy xdoclet.jar, resin-xdoclet.jar, and <var>xdoclet-home/samples/lib</var>/log4j.jar into <var>ant-home/lib</var>.</p>

<ul>
  <li>
    <var>ant-home/lib</var>:
    <ul>
      <li>ant.jar</li>
      <li>crimson.jar</li>
      <li>jaxp.jar</li>
      <li>log4j.jar</li>
      <li>resin-xdoclet.jar</li>
      <li>xdoclet.jar</li>
    </ul>
  </li>
  <li>
    <var>resin-home/lib</var>:
    <ul>
      <li>ejb.jar</li>
      <li>jsdk24.jar</li>
      <li>resin-ejb.jar</li>
    </ul>
  </li>
</ul>
</s2>

<s2 title="Sample Buildfile">

<p>The buildfile used in this example create a web-app directory structure with the appropriate classes and deployment descriptors. build.xml and build.properties and can be found with the example sources and is meant meant to be run from the package directory where they are located. Just set <var>resin.dir</var>, <var>ant.lib</var>, and <var>dest.dir</var> in build.properties and the sample should be ready to run.</p>

<example title="build.xml Shell">
&lt;project default="dist"&gt;
  &lt;property file="build.properties"/&gt;
  
  &lt;taskdef name="ejb-doclet" classname="com.caucho.xdoclet.ResinEjbDocletTask"/&gt;
  &lt;taskdef name="resin-web-doclet" classname="com.caucho.xdoclet.ResinWebDocletTask"/&gt;
  
  &lt;target name="init"&gt;
    &lt;tstamp/&gt;
    &lt;property name="classes" value="${dest.dir}/WEB-INF/classes"/&gt;
    &lt;property name="src" value="../../../"/&gt;
    &lt;property name="ejb-jar.xml" value="cmp-xdoclet.ejb"/&gt;
    &lt;property name="resin-ejb-jar.xml" value="resin.ejb"/&gt;
    &lt;property name="web.xml" value="web.xml"/&gt;
  &lt;/target&gt;
  
  &lt;target name="prepare" depends="init"&gt;
    &lt;mkdir dir="${classes}"/&gt;
  &lt;/target&gt;
  
...
  
  &lt;!-- Copy example sources to WEB-INF/classes --&gt;
  &lt;target name="copy" depends="prepare"&gt;
    &lt;copy todir="${classes}"&gt;
      &lt;fileset dir="${src}"&gt;
        &lt;include name="example/cmp/xdoclet/*.java"/&gt;
      &lt;/fileset&gt;
    &lt;/copy&gt;
  &lt;/target&gt;
  
  &lt;!--
    ejbgen: Generate home/remote interfaces
    ejbdd: Generate EJB deployment descriptor(s)
    webdd: Generate web.xml
    copy: Copy example sources to destination WEB-INF/classes
  --&gt;
  &lt;target name="dist" depends="ejbgen,ejbdd,webdd,copy"/&gt;
  
  &lt;target name="clean" depends="init"&gt;
    &lt;delete dir="${dest.dir}"/&gt;
  &lt;/target&gt;
&lt;/project&gt;
</example>

<note>The class names in the two task definitions are likely to change in the future (around XDoclet 1.2).</note>

</s2>

<s2 title="Generate Home/Component Interfaces">

<p>The first interesting target in the build file generates the home and local interfaces.</p>

<example title="build.xml Class Generation Target">
...

  &lt;target name="ejbgen" depends="prepare"&gt;
    &lt;ejbdoclet ejbspec="2.0" ejbClassNameSuffix="Bean"
      destdir="${classes}" sourcePath="${src}" mergedir="${src}"
      classpath="${classpath}"&gt;
      &lt;fileset dir="."&gt;
        &lt;include name="*Bean.java"/&gt;
      &lt;/fileset&gt;
      &lt;localinterface/&gt;
      &lt;localhomeinterface/&gt;
    &lt;/ejbdoclet&gt;
  &lt;/target&gt;

...
</example>

<p>The <var>localinterface</var> subtask generates the local component sources <var>Course.java</var> and <var>Student.java</var> and the <var>localhomeinterface</var> subtask generates the Home sources <var>CourseHome.java</var> and <var>StudentHome.java</var>.</p>

</s2>

<s2 title="Generate EJB Deployment Descriptors">

<example title="build.xml EJB Deployment Descriptor Target">
...

  &lt;target name="ejbdd" depends="prepare"&gt;
    &lt;ejbdoclet ejbspec="2.0" ejbClassNameSuffix="Bean"
      destdir="${dest.dir}/WEB-INF" sourcePath="${src}" mergedir="${src}"
      classpath="${classpath}"&gt;
      &lt;fileset dir="."&gt;
        &lt;include name="*Bean.java"/&gt;
      &lt;/fileset&gt;
      &lt;deploymentdescriptor destinationFile="${ejb-jar.xml}"/&gt;
      &lt;resinejb destinationFile="${resin-ejb-jar.xml}"/&gt;
    &lt;/ejbdoclet&gt;
  &lt;/target&gt;

...
</example>

<p>The <var>deploymentdescriptor</var> subtask generates a standard EJB 2.0 deployment descriptor, in this case named <var>cmp-xdoclet.ejb</var>. The <var>resinejb</var> subtask puts additional Resin CMP-specific information in <var>resin.ejb</var>, as defined <a href="http://caucho.com/products/resin-ejb/ejb-ref/resin-ejb-config.xtp#Formal-Definition">here</a>.</p>

</s2>

<s2 title="Generate Web App Deployment Descriptors">

<example title="build.xml Web Deployment Descriptor Target">
...

  &lt;target name="webdd"&gt;
    &lt;resinwebdoclet destdir="${dest.dir}/WEB-INF" sourcePath="${src}" mergedir="${src}"
      classpath="${classpath}"
      &gt;
      &lt;fileset dir="."&gt;
        &lt;include name="*.java"/&gt;
      &lt;/fileset&gt;
      &lt;resinwebxml generateSourceComments="true" destinationFile="${web.xml}"/&gt;
    &lt;/resinwebdoclet&gt;
  &lt;/target&gt;

...
</example>

<p>Unlike the EJB case, the <var>resinwebxml</var> task generates a single web.xml, including Resin-specific information such as the <var>&lt;classpath&gt;</var> element defined in the client servlet <var>@resin:classpath</var> tag.</p>

<p>The <var>generateSourceComments</var> property generates debug comments in the web.xml which point back to the class containing the javadoc tags which generated a particular entry.</p>

<results>
...

	&lt;!-- generated from example.cmp.xdoclet.FindServlet --&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;findServlet&lt;/servlet-name&gt;
		&lt;servlet-class&gt;example.cmp.xdoclet.FindServlet&lt;/servlet-class&gt;
	&lt;/servlet&gt;

...
</results>

</s2>

</s1>


<s1 title="Conclusion">

<p>XDoclet helps take some of the hassle out of bean development by letting you centralize information which would otherwise be scattered over several different files and removing some of the redundancy which could lead to mistakes (ie: typo in a peristent field name in the deployment descriptor).</p>

<p>Some other XDoclet capabilities not covered here include taglib deployment descriptor generation, Entity primary key class generation, and more. For more information, check out the XDoclet <a href="http://xdoclet.sourceforge.net/">documentation</a> and mailing lists.</p>

</s1>
  </body>
</document>
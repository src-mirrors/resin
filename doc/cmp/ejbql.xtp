<document>
  <header>
    <product>resin-ee</product>
    <resin-2.0>$ee/ejb-ref/ejbql.xtp</resin-2.0>
    <title>EJB-QL Syntax</title>
  </header>

  <body>
    <summary/>
<def>
SELECT <var>expr</var>
FROM <var>schema</var> AS <var>var</var>, IN(<var>path</var>) AS <var>var1</var>, ...
[WHERE <var>expr</var>]
[ORDER BY <var>expr</var>]
[OFFSET <var>integer</var>]
[LIMIT <var>integer</var>]
</def>

<p>The WHERE and ORDER BY clauses are optional.</p>


<s1 name="sections" title="Query Sections">

<s2 title="SELECT" type="defun">
<p>Specifies the query's values.</p>

<def>
SELECT DISTINCT? <var>expr</var>
</def>

</s2>

<s2 title="FROM" type="defun">
<p>Specifies the query's schema and variables.</p>  

<def>
FROM <var>schema</var> AS <var>var</var>, IN(<var>path</var>) AS <var>var1</var>, ...
</def>

</s2>

<s2 title="WHERE" type="defun">
<p>Restricts the selected values to those matching
a boolean expression.</p>

<def>
WHERE <var>boolean-expr</var>
</def>

</s2>

<s2 title="ORDER BY" version="Resin-CMP 1.0" type="defun">
<p>Sorts the returned values.  The sorts the results of a query
by an expression.  Because the database sorts the results, ORDER BY
can often be more efficient than sorting in Java in addition to
being clearer.</p>

<p>The ORDER BY expression may use a string argument, like ?3.  This allows
the ORDER BY field to be selected by the argument.</p>

<def>
ORDER BY? <var>expr</var>
</def>

</s2>

<s2 title="OFFSET" version="Resin-CMP 2.1.1" type="defun">
<p>For a collection-valued query, returns items starting from the
offset value.  Only integer constants and integer arguments like ?3
are allowed.</p>

<p>OFFSET is generally used in combination with LIMIT to select a
slice of a large database query.</p>

<p>Depending on the database, this may require an ORDER BY
to make the results consistent.  Unless you specify ORDER BY, databases
are allowed to return query results in any order.  So using
OFFSET without ORDER BY name return different results even when
called with the same query.</p>

<example>
SELECT o FROM items o ORDER BY o.id OFFSET ?1 LIMIT ?2
</example>

</s2>

<s2 title="LIMIT" version="Resin-CMP 2.1.1" type="defun">
<p>For a collection-valued query, limits the number of items returned.
Only integer constants and integer arguments like ?3
are allowed.</p>

<p>LIMIT is generally used with OFFSET to handle large database queries
which may have multiple return pages.</p>

<p>Depending on the database, LIMIT may require an ORDER BY
to make the results consistent.  Unless you specify ORDER BY, databases
are allowed to return query results in any order.  So using
OFFSET without ORDER BY name return different results even when
called with the same query.</p>

<example>
SELECT o FROM items o ORDER BY o.id OFFSET ?1 LIMIT ?2
</example>

</s2>

</s1>

<s1 title="Expressions">

<s2 name="cmp-path" title="bean-expr . cmp-field" type="defun">
<p>Selects a field value from an entity bean.  The type of the
expression is the type of the cmp-field.</p>

<example>
SELECT c
FROM courses c
WHERE c.room = 'Leaky Dungeon'
</example>

</s2>

<s2 name="cmr-path" title="bean-expr . cmr-field" type="defun">
<p>Selects relation bean from an entity bean.  The type of the
expression is the bean result.  Because the value of the expression is
an entity bean, the expression can be used in a further path
expression.</p>

<example>
SELECT c
FROM courses c
WHERE c.teacher.name = 'Severus Snape'
</example>

</s2>

<s2 name="arg" title="?n" type="defun">
<p>A find or select method argument.  The value of the
argument is inserted into the expression.  The count is 1-based, so
a method with a single argument will use <var>?1</var>.  The type of the
expression is the type of the method argument.</p>

<example>
SELECT c
FROM courses c
WHERE c.room = ?1
</example>

</s2>

<s2 name="add" title="expr + expr" type="defun">
<p>Arithmetic expressions.  Adds, subtracts, multiplies or
divides two expressions, returning a numeric expression.  The
sub-expressions must have numeric values.</p>

<deftable>
<tr><th>Operator</th><th>Meaning
</th></tr><tr><td>+</td><td>Add
</td></tr><tr><td>-</td><td>Subtract
</td></tr><tr><td>*</td><td>Multiply
</td></tr><tr><td>/</td><td>Divide
</td></tr></deftable>

</s2>

<s2 name="cmp" title="expr = expr" type="defun">
<p>Comparison expressions.  Compares two expressions,
returning a boolean expression.  The two expressions for an
equality comparison must have compatible types.
The expressions for less-than comparison must have numeric values.</p>

<deftable>
<tr><th>Operator</th><th>Meaning
</th></tr><tr><td>=</td><td>Equals
</td></tr><tr><td>&lt;&gt;</td><td>Not equals
</td></tr><tr><td>&lt;</td><td>Less-than
</td></tr><tr><td>&lt;=</td><td>Less-than or equal to
</td></tr><tr><td>&gt;</td><td>Greater-than
</td></tr><tr><td>&gt;=</td><td>Greater-than or equal to
</td></tr></deftable>

<example>
SELECT c
FROM courses c
WHERE c.students &lt; 20
</example>

</s2>

<s2 name="is-null" title="IS [NOT] NULL" type="defun">
<p>Tests for a null value.  IS NULL can be used both for
SQL null values and for null relation values.</p>

<p>The following example shows the case where c.teacher is a relation
to a Teacher object.  It will select courses with no assigned teacher.</p>

<example>
SELECT c
FROM courses c
WHERE c.teacher IS NULL
</example>

</s2>

<s2 name="and" title="expr AND expr" type="defun">
<p>Boolean and expression.  Evaluates to true if both
expressions are true.  Both expressions must be boolean and
the result is a boolean.</p>
</s2>

<s2 name="or" title="expr OR expr" type="defun">
<p>Boolean or expression.  Evaluates to true if either
expression is true.  Both expressions must be boolean and
the result is a boolean.</p>
</s2>

<s2 name="not" title="NOT expr" type="defun">
<p>Boolean not expression.  The expression and the result are
boolean expressions.</p>
</s2>

<s2 name="fun" title="fun_name(expr, ...)" type="defun">
<p>Applies a function to the expression arguments.
Resin-CMP will allow the functions defined in the JDBC 2.0 spec,
but the EJB-QL spec only defines the following functions:</p>

<deftable>
<tr><th>Function</th><th>Description
</th></tr><tr><td>CONCAT(string, string)</td><td>Contatenates two strings
</td></tr><tr><td>SUBSTRING(string, start, len)</td><td>Selects a substring
</td></tr><tr><td>LOCATE(string, start [, start])</td><td>Finds a substring
</td></tr><tr><td>LENGTH(string)</td><td>Returns the string length
</td></tr><tr><td>ABS(number)</td><td>Returns the absolute value
</td></tr><tr><td>SQRT(double)</td><td>Returns the square root of a number
</td></tr></deftable>

<p>Additional functions can be added using the
<a href="resin-ejb-config.xtp#query-function">query-function</a> tag in the
resin-ejb configuration file.</p>

<p>The following functions are known to Resin-CMP:</p>

<def>
int abs(int)
double abs(double)

double acos(double)
double sin(double)
double atan(double)
double cos(double)
double cot(double)
double degrees(double)
double exp(double)
double log(double)
double log10(double)
double radians(double)
double sin(double)
double sqrt(double)
double tan(double)

int ceiling(double)
int floor(double)
int sign(double)

double atan2(double, double)
double power(double, double)
double round(double, double)
double truncate(double, double)

int mod()
int rand()

int count(any)

double min(double)
double max(double)

int ascii(String)
int length(String)

String char(int)
String space(int)

String concat(String, String)

int difference(String, String)

String insert(String, int, int, String)

String lcase(String)
String ltrim(String)
String rtrim(String)
String ucase(String)
String soundex(String)

String left(String, int)
String repeat(String, int)
String right(String, int)

String locate(String, int)
String locate(String, int, int)
String replace()

String substring(String, int, int)

String database()
String user()

Date curdate()
Date curtime()
Date now()

String dayname(Date)
String monthname(Date)

int dayofmonth(Date)
int dayofweek(Date)
int dayofyear(Date)
int hour(Date)
int minute(Date)
int month(Date)
int quarter(Date)
int second(Date)
int week(Date)
int year(Date)

Date timestampadd(Date, Date)
Date timestampdiff(Date, Date)
</def>

</s2>

</s1>
  </body>
</document>
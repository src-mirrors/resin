<document>
<header>
<product>resin</product>
<title>Resin Authorization</title>
<description></description>
</header>
<body>
<s1 title="Basic Authorization">
<p>
All Resin authorization rules are based on the top level &lt;resin:Allow> and 
&lt;resin:Deny> tag set. Any conditionals, if applicable, are nested within these top 
level tags. 
</p>
<s2 title="resin:Allow">
<parents>web-app</parents>
<p>The &lt;resin:Allow> tag is used to secure a particular URL pattern. Because it is 
affirmative, it must always include a nested condition expressing an authorization 
constraint. All access attempts that do not satisfy the authorization rule are denied 
access. This tag is the most common type of top level authorization tag.</p>
<p>Following are the attributes of this tag:</p>
<!-- XXX: What are the defaults for this? -->
<deftable title="resin:Allow Attributes">
<tr>
  <td>url-pattern</td>
  <td>URL pattern describing the resource to be secured.</td>
</tr>
<tr>
  <td>http-method</td>
  <td>HTTP methods that the restriction applies to.</td>
</tr>
</deftable>
<p>The following is a typical example of how the &lt;resin:Allow> is used:</p>
<example title="Protecting all pages for logged-in users">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:Allow url-pattern="/*">
    &lt;resin:IfUserInRole role="user"/>
  &lt;/resin:Allow>
  ...
&lt;/web-app&gt;
</example>
</s2>
<s2 title="resin:Deny">
<p>The &lt;resin:Deny> tag is the opposite of the top level &lt;resin:Allow>. It restricts 
access to a particular URL pattern based on any nested conditions. Access attempts that 
match the condition are denied access. If no conditions are specified, all access to a URL 
pattern is restricted.</p>
<p>Following are the attributes of this tag:</p>
<!-- XXX: What are the defaults for this? -->
<deftable title="resin:Allow Attributes">
<tr>
  <td>url-pattern</td>
  <td>URL pattern describing the resource to be secured.</td>
</tr>
<tr>
  <td>http-method</td>
  <td>HTTP methods that the restriction applies to.</td>
</tr>
</deftable>
<p>The following is an example of how the &lt;resin:Allow> might be used:</p>
<example title="Security-constraint to protect static files">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;!-- protect all .properties files --&gt;
  &lt;resin:Deny url-pattern="*.properties"/>

  &lt;!-- protect the config/ subdirectory --&gt;
  &lt;resin:Deny url-pattern="/config/*"/>
  ...
&lt;/web-app&gt;
</example>
</s2>
</s1>
<s1 title="Authorization Conditions">
<p>Authorization conditions express the criteria by which access should be allowed 
(or denied). Resin includes a rich number of conditions for a variety of cases. The 
following sections describe these conditional access rules in detail.</p>
<s2 title="resin:IfUserInRole">
<parents>resin:Allow, resin:Deny</parents>
<p>The &lt;resin:IfUserInRole condition enforces role-based security. It requires that 
authenticated users have a specified role. The following are the attributes of the tag:</p>
<deftable title="IfUserInRole Attributes">
<tr>
  <th>Attribute</th>
  <th>Description</th>
</tr>  
<tr>
  <td>role</td>
  <td>Roles which are allowed to access the resource.</td>
</tr>
</deftable>
<p>The following is an example of how &lt;resin:IfUserInRole> might be used:</p>
<example title="WEB-INF/resin-web.xml Protecting WebDav for WebDav Users">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:Allow url-pattern="/webdav/*">
    &lt;resin:IfUserInRole role='webdav'/>
  &lt;/resin:Allow>
  ...  
&lt;/web-app>
</example>
</s2>
<s2 title="resin:IfNetwork">
<parents>resin:Allow, resin:Deny</parents>
<p>This tags allows or denies requests based on the IP address of the client. IP-constraint 
is very useful for protecting administration resources to an internal network. It can also 
be useful for denying service to known problem IPs.</p>
<!-- XXX: Need to list the attributes here -->
<p>
The following example demonstrates how the &lt;resin:IfAddress> tag can be used to secure 
an admin page to be accessible only via a specific IP:
</p>
<example title="Admin Pages Allowed Only from 192.168.17.0/24">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:Allow url-pattern="/admin/*">
    &lt;resin:IfAddress name="192.168.17.0/24"/>
  &lt;/resin:Allow>
  ...
&lt;/web-app>
</example>
<p>The <code>/24</code> in the IP <code>192.168.17.0/24</code> means that the first 24 bits 
of the IP are matched - any IP address that begins with <code>192.168.17.</code> will 
match. The usage of <var>/bits</var> is optional.</p>
<p>The following example shows how the tag can be used to construct an IP block list:</p>
<example title="Block-out Known Trouble-Makers">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:Deny>
    &lt;resin:IfNetwork>
       &lt;resin:value>205.11.12.3&lt;/resin:value>
       &lt;resin:value>213.43.62.45&lt;/resin:value>
       &lt;resin:value>123.4.45.6&lt;/resin:value>
       &lt;resin:value>233.15.25.35&lt;/resin:value>
       &lt;resin:value>233.14.87.12&lt;/resin:value>
    &lt;/resin:IfNetwork>
  &lt;/resin:Deny>
  ...
&lt;/web-app&gt;
</example>
<p>Be careful with deny - some ISP's (like AOL) use proxies and the IP of many different 
users may appear to be the same IP to your server.</p>
<p>If only <var>deny</var> is used, then all IPs are allowed if they do not match a 
<code>deny</code>. If only <var>allow</var> is used, then an IP is denied unless it 
matches an <code>allow</code>. If both are used, then the IP must match both an 
<code>allow</code> and a <code>deny</code></p>
</s2>
<s2 title="resin:IfSecure">
<parents>resin:Allow, resin:Deny</parents>
<p>The &lt;resin:IfSecure> tag restricts access to secure transports, usually SSL.</p>
<!-- XXX: Need to list the attributes here -->
<p>The following is an example of the typical use of this tag. In the example, all pages 
in the web application are enforced to be accessible via SSL only.</p>
<example title="WEB-INF/resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"
  ...	 
  &lt;resin:Allow>
    &lt;resin:IfSecure/>
  &lt;/resin:Allow>
  ...  
&lt;/web-app&gt;
</example>
<p>The default behaviour is for Resin to rewrite any URL that starts with "http:" by 
replacing the "http:" part with "https:", and then send a redirect to the browser because 
this configuration.</p>
<p>If the default rewriting of the host is not appropriate, you can set the 
<a config-tag="secure-host-name"/> for the host:</p>
<example title="WEB-INF/resin-web.xml">
&lt;resin xmlns="http://caucho.com/ns/resin">
&lt;cluster id="app-tier">
  ...  
  &lt;host id="..."&gt;
    &lt;secure-host-name&gt;https://hogwarts.com&lt;/secure-host-name&gt;
    ...
&lt;/resin> 
</example>
</s2>
<s2 title="Custom Rule">
<p>
Although extremely rare, it is sometimes useful to create a custom predicate (for example 
for encapsulating complex custom authorization logic). You can easily do this by extending 
<a href="javadoc:com.caucho.security.RequestPredicate">com.caucho.security.RequestPredicate</a>. 
This essentially allows you to create your own &lt;IfXXX> rule.
</p>
<p>The following example demonstrates how to create a custom Resin predicate:</p>
<example title="WEB-INF/resin-web.xml - Custom rule">
&lt;web-app xmlns="http://caucho.com/ns/resin"
         xmlns:resin="urn:java:com.caucho.resin"
         xmlns:foo="urn:java:com.foo"
 ...
 &lt;resin:Allow url-pattern="/safe/*"
    &lt;foo:IfMyTest value="abcxyz"/>
 &lt;/resin:Allow url-pattern="/safe/*"
 ...
&lt;/web-app&gt;
</example>
<example>
package com.foo;

import javax.servlet.http.HttpServletRequest;
import com.caucho.security.ServletRequestPredicate;

public class IfMyTest extends ServletRequestPredicate {
  private String value;

  // Your custom attribute for the tag.
  public void setValue(String value)
  {
    this.value = value;
  }

  // Here you must actually determine the match.
  public boolean isMatch(HttpServletRequest request)
  {
    return value.equals(request.getHeader("Foo"));
  }
}
</example>
</s2>
<!-- XXX: The rest of the tags must be properly documented (a large number) -->
</s1>
</body>
</document>
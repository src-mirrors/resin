<document>
<header>
<product>resin</product>
<title>Resin Authenticators</title>
<description></description>
</header>
<body>
<s1 title="Authenticators">
<p>
The following are details on the authenticators that can be used with Resin, along with 
example code to utilize as a starting point for your applications:  
</p>
<s2 title="DatabaseAuthenticator">
<p>
  The DatabaseAuthenticator (<a href="javadoc|com.caucho.security.DatabaseAuthenticator|"/>)
  asks a back-end relational database for the password matching a user's name. It uses the
  DataSource specified by the <var>data-source</var> attribute. <var>data-source</var> 
  refers to an existing <a href="database-ref.xtp">configured</a> DataSource.
</p>
<p>The following are the attributes for the DatabaseAuthenticator:</p>
<deftable title="DatabaseAuthenticator Attributes">
<tr>
  <th>Attribute</th>
  <th>Meaning</th>
  <th>Default</th>
</tr>
<tr>
  <td>data-source</td>
  <!-- XXX: What is a global database pool? The ones defined in resin.xml? -->
  <td>
    The pooled JDBC data source. Looks in the application attributes first, then in the
    global database pools.
  </td>
  <td>None</td>
</tr>
<tr>
  <td>password-query</td>
  <td>
    An SQL query to get the user's password given the user name. The default query is shown 
    in the code example below.
  </td>
  <td>See below</td>
</tr>
<!-- XXX: This needs to be clarified further -->
<tr>
  <td>cookie-auth-query</td>
  <td>An SQL query to authenticate the user by a persistent cookie.</td>
  <td>None</td>
</tr>
<!-- XXX: This needs to be clarified further -->
<tr>
  <td>cookie-auth-update</td>
  <td>A SQL update to match a persistent cookie to a user.</td>
  <td>None</td>
</tr>
<!-- XXX: What happens when there are multiple roles? Should they be comma-separated? -->
<tr>
  <td>role-query</td>
  <td>
    A SQL query to determine the user's role. By default, all users are in role "user", 
    but no others.
  </td>
  <td>None</td>
</tr>
<tr>
  <td>password-digest</td>
  <td>
    Specifies the digest algorithm and format used to secure the password (see following 
    section in this document for details).
  </td>
  <td>md5-base64</td>
</tr>
<tr>
  <td>logout-on-session-timeout</td>
  <td>If true, the user will be logged out when the session times out.</td>
  <td>true</td>
</tr>
</deftable>
<p>The following is an example of how the database authenticator may be configured:</p>
<example title="WEB-INF/resin-web.xml for DatabaseAuthenticator">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"&gt;
  &lt;-- Authentication mechanism -->
  &lt;resin:BasicLogin/&gt;

  &lt;-- Role-based authorization -->
  &lt;resin:Allow url-pattern="/foo/*">
     &lt;resin:IfUserInRole role="user"/&gt;
  &lt;/resin:Allow>
  
  &lt;-- The authenticator -->
  &lt;resin:DatabaseAuthenticator'&gt;
    &lt;resin:data-source&gt;test&lt;/resin:data-source&gt;   
    &lt;resin:password-query&gt;
      SELECT password FROM login WHERE username=?
    &lt;/resin:password-query&gt;
    &lt;resin:cookie-auth-query&gt;
      SELECT username FROM LOGIN WHERE cookie=?
    &lt;/resin:cookie-auth-query&gt;    
    &lt;resin:cookie-auth-update&gt;
      UPDATE LOGIN SET cookie=? WHERE username=?
    &lt;/resin:cookie-auth-update&gt;
    &lt;resin:role-query&gt;
      SELECT role FROM LOGIN WHERE username=?
    &lt;/resin:role-query&gt;
  &lt;/resin:DatabaseAuthenticator&gt;
&lt;/web-app&gt;
</example>
</s2>
<s2 title="JaasAuthenticator">
<p>
The JaasAuthenticator (<a href="javadoc|com.caucho.security.JaasAuthenticator|"/>) uses a
JAAS LoginModule for authentication. A common use of the JaasAuthenticator is to serve as
an adapter for the large number of JAAS LoginModule's included in the Sun JDK for 
authentication purposes. However, the JAAS authenticator can be used with any valid JAAS
login module.
</p>
<!-- XXX: Need an external reference to the JAAS modules in the JDK -->
<p>The following are the attributes for the JaasAuthenticator:</p>
<deftable title="JaasAuthenticator attributes">
<tr>
  <th>Attribute</th>
  <th>Meaning</th>
  <th>Default</th>
</tr>
<tr>
  <td><a href="#jaas-init-param">init-param</a></td>
  <td>Adds a property to the LoginModule.</td>
  <td>None</td>
</tr>
<tr>
  <td>login-module</td>
  <td>The fully qualified class name of the LoginModule implementation.</td>
  <td>Required</td>
</tr>
<tr>
  <td>logout-on-session-timeout</td>
  <td>If true, the user will be logged out when the session times out.</td>
  <td>true</td>
</tr>
<tr>
  <td>password-digest</td>
  <td>
    Specifies the digest algorithm and format used to secure the password (see following 
    section in this document for details).
  </td>
  <td>md5-base64</td>
</tr>
</deftable>
<p>The following is an example of how the JAAS authenticator may be configured:</p>
<example title="WEB-INF/resin-web.xml for JaasAuthenticator">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;resin:JaasAuthenticator&gt;
    &lt;resin:login-module&gt;com.sun.security.auth.module.Krb5LoginModule&lt;/resin:login-module&gt;
    &lt;resin:init-param&gt;
      &lt;debug&gt;true&lt;/debug&gt;
    &lt;/resin:init-param&gt;
  &lt;/resin:JaasAuthenticator&gt;
  ...
&lt;/web-app&gt;
</example>
<s3 name="jaas-is-user-in-role" title="isUserInRole">
<p>
The isUserInRole method is supported if the LoginModule provides either an isUserInRole
method in the Principal returned by the LoginModule, or a getRoles() method returning a 
java.util.Set.
</p>
</s3>
<s3 name="jaas-init-param" title="init-param">
<p>
&lt;init-param&gt; tags are used to configure the properties of the LoginModule. Existing
pluggable LoginModules provide documentation of the init-param values that are accepted. 
Custom LoginModule implementations retrieve the init-param values in the 
<code>initialize</code> method.
</p>
</s3>
<s3 name="jaas-custom" title="Custom LoginModule">
<p>
Although not very common, it is sometimes very useful to create your own JAAS module (for 
example as a single sign-on solution across multiple Java products/application servers).
The following code example shows a custom JAAS module using init parameters with the Resin
security framework:
</p>
<example title="Custom LoginModule - Java code">
import java.util.*;

import javax.security.auth.*;
import javax.security.auth.spi.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;

public class TestLoginModule implements javax.security.auth.spi.LoginModule {
  private Subject _subject;
  private CallbackHandler _handler;
  private Map _state;
 
  private String _userName;
  private String _password;

  public void initialize(Subject subject,
                         CallbackHandler handler,
                         Map sharedState,
                         Map options)
   {
     _subject = subject;
     _handler = handler;
     _state = sharedState;

     _userName = (String) _options.get("user");
     _password = (String) _options.get("password");
   }

   public boolean login()
     throws LoginException
   {
     NameCallback name = new NameCallback("");
     PasswordCallback password = new PasswordCallback("", false);
 
     _handler.handle(new Callback[] { name, password });

     if (_userName.equals(name.getName()) &amp;&amp; 
         _password.equals(password.getPassword()) {
         _subject.getPrincipals().add(new TestPrincipal(_userName));
       return true;
     }
     else
       return false;
   }

   public boolean abort()
   {
     return true;
   }

   public boolean commit()
   {
     return _subject.getPrincipals().size() > 0;
   }

   public boolean logout()
   {
      return true;
   }
}
</example>
<example title="Custom LoginModule - resin-web.xml configuration">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;resin:JaasAuthenticator&gt;
    &lt;resin:login-module&gt;example.TestModule&lt;/resin:login-module&gt;
    &lt;resin:init-param&gt;
      &lt;user&gt;Harry&lt;/user&gt;
      &lt;password&gt;quidditch&lt;/password&gt;
    &lt;/resin:init-param&gt;
  &lt;/resin:JaasAuthenticator&gt;
  ...
&lt;/web-app&gt;
</example>
</s3>
</s2>
<s2 title="LdapAuthenticator">
<p>
The LdapAuthenticator (<a href="javadoc|com.caucho.security.LdapAuthenticator|"/>) uses 
JNDI to connect to an LDAP (or Active Directory) server for authentication.
</p>
<p>The following are the attributes for the LdapAuthenticator:</p>
<deftable>
<tr>
  <th>Attribute</th>
  <th>Meaning</th>
  <th>Default</th>
</tr>
<tr>
  <td>dn-prefix</td>
  <td>String to prepend to query before portion selecting user by name.</td>
  <td>None</td>
</tr>
<tr>
  <td>dn-suffix</td>
  <td>String to append to query after portion selecting user by name.</td>
  <td>None</td>
</tr>
<tr>
  <td><a href="#jndi-env">jndi-env</a></td>
  <td>Add a property to the JNDI provider used for connecting to the LDAP server.</td>
  <td>See below</td></tr>
<tr>
  <td>logout-on-session-timeout</td>
  <td>If true, the user will be logged out when the session times out.</td>
  <td>true</td>
</tr>
<tr>
  <td>security-authentication</td>
  <td>Sets the Context.SECURITY_AUTHENTICATION for the LDAP environment.</td>
  <td></td>
</tr>
<tr>
  <td>security-principal</td>
  <td>Sets the Context.SECURITY_PRINCIPAL for the LDAP environment.</td>
  <td></td>
</tr>
<tr>
  <td>security-credentials</td>
  <td>Sets the Context.SECURITY_CREDENTIALS for the LDAP environment.</td>
  <td></td>
</tr>
<tr>
  <td>password-digest</td>
  <td>
    Specifies the digest algorithm and format used to secure the password (see following 
    section in this document for details).
  </td>
  <td>md5-base64</td>
</tr>
<tr>
  <td>user-attribute</td>
  <td>The attribute name to use in the query for matching the user.</td>
  <td>uid</td>
</tr>
<tr>
  <td>password-attribute</td>
  <td>The attribute name to use for obtaining the password.</td>
  <td>userPassword</td>
</tr>
<tr>
  <td>url</td>
  <td>The URL for the server.</td>
  <td>ldap://localhost:389</td>
</tr>
</deftable>
<p>The following is an example of how the LDAP authenticator may be configured:</p>
<example title="WEB-INF/resin-web.xml for LdapAuthenticator">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"&gt;
  ...
  &lt;resin:LdapAuthenticator password-digest="none">
    &lt;resin:url&gt;ldap://localhost:389&lt;/resin:url&gt;
    &lt;resin:dn-suffix&gt;dc=hogwarts,dc=com&lt;/resin:dn-suffix&gt;
  &lt;/resin:LdapAuthenticator>
  ...
&lt;/web-app>
</example>
<s3 title="jndi-env">
<p>
<code>jndi-env</code> configures properties of the LDAP provider implementation. Prior 
to 3.1.1, the URL of the server is specified with <code>jndi-env</code> and the
<code>java.naming.provider.url</code> property.
</p>
<p>
The following example shows the usage of the <code>jndi-env</code> configuration property:
</p>
<example title="WEB-INF/resin-web.xml LdapAuthenticator jndi-env">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:LdapAuthenticator password-digest="none">
    &lt;resin:jndi-env java.naming.factory.initial="com.sun.jndi.ldap.LdapCtxFactory"/&gt;
    &lt;resin:jndi-env java.naming.provider.url="ldap://localhost:389"/&gt;
    &lt;resin:dn-suffix&gt;dc=hogwarts,dc=com&lt;/dn-suffix&gt;
  &lt;/resin:LdapAuthenticator&gt;
  ...
&lt;web-app>
</example>
</s3>
</s2>
<s2 title="PropertiesAuthenticator">
<p>
The PropertiesAuthenticator 
(<a href="javadoc|com.caucho.security.PropertiesAuthenticator|"/>)
allows you to use Java proprties to store authentication information. This is very useful
for a variety of applications such as very small sites, developement, unit testing or 
integration testing. You can either specify properties in-line in XML or via an external
properties file.
</p>
<p>The following are the attributes for the PropertiesAuthenticator:</p>
<!-- XXX: Check this attributes table for completeness -->
<deftable title="PropertiesAuthenticator attributes">
<tr>
  <th>Attribute</th>
  <th>Meaning</th>
  <th>Default</th>
</tr>
<tr>
  <td>path</td>
  <td>Path to the properties file.</td>
  <td>None</td>
</tr>
<tr>
  <td>password-digest</td>
  <td>
    Specifies the digest algorithm and format used to secure the password (see following 
    section in this document for details).
  </td>
  <td>md5-base64</td>
</tr>
</deftable>
<p>
  The following is an example of in-lining properties with the authenticator. This is 
  useful for extremely simple web-sites maintained by developers as well as testing.
</p>
<example title="WEB-INF/resin-web.xml - in-line properties">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:PropertiesAuthenticator password-digest="none">
     harry=quidditch,user,admin
     draco=mudblood,disabled,user
  &lt;/resin:PropertiesAuthenticator>
  ...
&lt;/web-app>
</example>
<p>
  Alternatively, external properties files can be used as in the example below. This is
  useful for a simple site where authentication may be managed by administrators or 
  non-technical users.
</p>
<example title="WEB-INF/resin-web.xml - file property">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin"
  ...
  &lt;resin:PropertiesAuthenticator path="WEB-INF/users.properties"/>
  ...
&lt;/web-app>
</example>
<example title="WEB-INF/users.properties">
harry=/Tj/54ylCloUeMi2YQIVCQ===,user,admin
</example>
<p>
As the example indicates, the properties file includes the user as property name while the
value is the password (that may be hashed as in the example or may be in plain-text) and
any roles that are assigned to the user separated by commas. The password and role values
are also separated by a comma.
</p>
</s2>
<s2 title="XmlAuthenticator">
<p>
In a similar vein to the properties authenticator, the XML authenticator 
(<a href="http://caucho.com/resin-javadoc/com.caucho.security.XmlAuthenticator">com.caucho.security.XmlAuthenticator</a>)
allows you to store authentication information in XML - either in-line or in an external 
file. This authenticator has some of the same use-cases as the properties file 
authenticator, in a slight more human readable form, especially for a non-technical user.
</p>
<p>The following are the attributes for the XmlAuthenticator:</p>
<deftable>
<tr>
  <th>Attribute</th>
  <th>Meaning</th>
  <th>Default</th>
</tr>
<tr>
  <td>user</td>
  <td>Specifies a user authentication record. There maybe zero, one or more records.</td>
  <td>None</td>
</tr>
<tr>
  <td>password-digest</td>
  <td>
    Specifies the digest algorithm and format used to secure the password (see following 
    section in this document for details).
  </td>
  <td>md5-base64</td>
</tr>
<tr>
  <td>path</td>
  <td>Specifies the path to an XML file containing users and passwords.</td>
  <td>None</td>
</tr>
<tr>
  <td>logout-on-session-timeout</td>
  <td>If true, the user will be logged out when the session times out.</td>
  <td>true</td>
</tr>
</deftable>
<p>The following example uses in-line XML for authentication. When configuring the 
XmlAuthenticator in resin.xml (or resin-web.xml), each <var>user</var> adds a new 
configured user. The user value contains the username, password, and the roles for the 
user.</p>
<example title="XmlAuthenticator in resin-web.xml">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:XmlAuthenticator password-digest="none">
    &lt;resin:user name="Harry Potter" password="quidditch" group="user,gryffindor"/>
    &lt;resin:user name="Draco Malfoy" password="pureblood" group="user,slytherin"/>
  &lt;/resin:XmlAuthenticator>
  ...
&lt;/web-app>  
</example>
<p>This example shows how to use an external XML file for authentication:</p>
<example title="WEB-INF/resin-web.xml - File XML">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  ...
  &lt;resin:XmlAuthenticator path="WEB-INF/users.xml"/>
  ...
&lt;/web-app>
</example>
<example title="WEB-INF/users.xml">
&lt;users>
  &lt;user name="harry password="/Tj/54ylCloUeMi2YQIVCQ===" roles="user,admin"/>
&lt;users>
</example>
</s2>
<s2 title="Custom Authenticator">
<p>
While this case is rare, it may sometimes be useful to create your own Resin custom 
authenticator (for example to use a legacy resource as an authentication store). The Resin
security framework provides an abtract base class 
(<a href="javadoc|com.caucho.security.AbstractAuthenticator|"/>) that you can extend to 
do this.  
</p>
<p>
  The following is a simple example that you can use a starting point for your 
  application:
</p>
<example title="WEB-INF/resin-web.xml - Custom Authenticator Configuration">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:foo="urn:java:com.caucho.foo">
  ...
  &lt;foo:MyAuthenticator>
    &lt;foo:foo>bar&lt;/foo:foo>
  &lt;/foo:MyAuthenticator>
  ...
&lt;/web-app>
</example>
<example title="MyAuthenticator.java">
package com.foo;

import com.caucho.security.AbstractAuthenticator;
import com.caucho.security.PasswordUser;

public class MyAuthenticator extends AbstractAuthenticator {
  private PasswordUser _user;

  public MyAuthenticator()
  {
    _user = new PasswordUser("harry", "quidditch",
                             new String[] { "user" });
  }

  public PasswordUser getUser(String userName)
  {
    if (userName.equals(_user.getName()))
      return _user;
    else
      return null;
  }
}
</example>
</s2>
<!--
    XXX: Why is this commented-out?
<s2 title="AuthenticationList" version="3.0.9">
<p>
In a vast majority of cases, a single authenticator for an application is fine. However,
there can be some instances where it is necesary to chain together more than one 
authenticator. For example, you may need to augment or use a pre-existing authenticator
(or authenticators) for a new application.
</p>
<p>
AuthenticatorList (<a href="javadoc|com.caucho.server.security.AuthenticatorList|"/>)
is used to configure more than one authenticator in a list. Each configured authenticator 
is tried in turn and if the authentication fails the next authenticator in the list is 
attempted.
</p>
<p>The following example shows the use of an authentication list:</p>
<example>
  &lt;authenticator type="com.caucho.server.security.AuthenticatorList"&gt;
    &lt;init&gt;
      &lt;authenticator resin:type="com.caucho.server.security.XmlAuthenticator"&gt;
        &lt;user&gt;admin:NIHlOSafJN2H7emQCkOQ2w==:user,admin&lt;/user&gt;
      &lt;/authenticator&gt;

      &lt;authenticator resin:type='com.caucho.server.security.JdbcAuthenticator'&gt;
        &lt;data-source&gt;jdbc/users&lt;/data-source&gt;
        &lt;password-query&gt;
          SELECT password FROM LOGIN WHERE username=?
        &lt;/password-query&gt;
        &lt;cookie-auth-query&gt;
          SELECT username FROM LOGIN WHERE cookie=?
        &lt;/cookie-auth-query&gt;
        &lt;cookie-auth-update&gt;
          UPDATE LOGIN SET cookie=? WHERE username=?
        &lt;/cookie-auth-update&gt;
        &lt;role-query&gt;
          SELECT role FROM LOGIN WHERE username=?
        &lt;/role-query&gt;
      &lt;/authenticator&gt;
    &lt;/init&gt;
  &lt;/authenticator&gt;

  &lt;login-config auth-method='basic'/&gt;

  &lt;security-constraint url-pattern='/users/*' role-name='user'/&gt;
  &lt;security-constraint url-pattern='/admin/*' role-name='admin'/&gt;
</example>
</s2>
-->
</s1>
<s1 title="Securing Passwords with Digests">
<p>
Passwords in clear-text form are a major security vulnerability. Such passwords can be 
stolen during transmission or storage and used malicicously (such as in order to gain 
unauthorized access to back-end resources). The transmission vulnerability is caused by 
the fact that passwords are sent across the network to the server from the browser in 
plain text when HTTP basic authentication or form-based authentication is used. This 
vulnerability can be addressed by either using HTTP digest authentication 
(covered <a href="security-authentication-method.xtp">here</a>) or by using transport layer 
SSL security (covered <a href="security-ssl.xtp">here</a>).
</p>
<p>
You can secure passwords in storage by using the password digest feature built-into Resin 
authenticators (see the <code>password-digest</code> attribute referenced above). You can 
use the password-digest attribute to specify that the authenticator should use passwords in 
a secure fashion. When this feature is enabled, the authenticator will store the password 
in digest instead of clear-text form. When the authenticator receives a clear-text 
password, it will digest it before comparing it to a stored password for a match.
</p>
<p>
A <i>digest</i> of a clear-text password is calculated when it is passed through a
one-way hashing function that consistently produces another series of characters,
<code>digestPassword = digester(username + ":" + realm + ":" + cleartextPassword)</code>. 
The function is "one-way" because the digestPassword cannot be used to practically 
reverse-engineer the original password.
</p>
<p>
Resin's authenticators use "MD5-base64" and a realm "resin" to digest passwords by default. 
<var>MD5</var> indicates that the MD5 hashing algorithm is used. <var>base64</var> is an 
encoding format to apply to the binary result of MD5. You can create an MD5/Base64 digest 
yourself with a simple PHP script like this:
</p>
<example title="Calculating a Digest Using PHP">
&lt;?php

  $username = "harry";
  $password = "quidditch";
  $realm = "resin";

  echo base64_encode(md5("$username:$realm:$password", true));

?>  
</example>
<p>The following are some examples of passwords digested by Resin:</p>
<deftable>
<tr><th>Username</th><th>Realm</th><th>Password</th><th>Digest
</th></tr><tr><td>root</td><td>resin</td><td>changeme</td><td>j/qGVP4C0T7UixSpKJpTdw==
</td></tr><tr><td>harry</td><td>resin</td><td>quidditch</td><td>uTOZTGaB6pooMDvqvl2Lbg==
</td></tr><tr><td>hpotter</td><td>resin</td><td>quidditch</td><td>x8i6aM+zOwDqqKPRO/vkxg==
</td></tr><tr><td>filch</td><td>resin</td><td>mrsnorris</td><td>KmZIq2RKXAHV4BaoNHfupQ==
</td></tr><tr><td>pince</td><td>resin</td><td>quietplease</td><td>Txpd1jQc/xwhISIqodEjfw==
</td></tr><tr><td>snape</td><td>resin</td><td>potion</td><td>I7HdZr7CTM6hZLlSd2o+CA==
</td></tr><tr><td>mcgonagall</td><td>resin</td><td>quidditch</td><td>4slsTREVeTo0sv5hGkZWag==
</td></tr><tr><td>dmalfoy</td><td>resin</td><td>pureblood</td><td>yI2uN1l97Rv5E6mdRnDFwQ==
</td></tr><tr><td>lmalfoy</td><td>resin</td><td>myself</td><td>sj/yhtU1h4LZPw7/Uy9IVA==
</td></tr></deftable>
<p>In the above examples the digest of "harry/quidditch" is different than the
digest of "hpotter/quidditch" because even though the password is the same, the
username has changed. The Resin digest is calculated with 
<code>digest(username + ":" + realm + ":" + password)</code>, 
so if the username changes the resulting digest is different.</p>
<s2 title="Calculating a Digest">
<p>
While using password digests with Resin authenticators, it may occationally be necessary to 
calculate digests yourself. You can do this in a number of different ways. You could use 
the PHP script example above. The <code>/resin-admin</code> page includes a form to easily 
generate the MD5 hash. You can also use the 
<a href="http://caucho.com/resin-javadoc/com/caucho/server/security/PasswordDigest.html">PasswordDigest</a> 
class to generate the digest programmatically. The following is an example of using this 
class:
</p>
<example title="Calculating a Digest - Java example">
  import com.caucho.security.PasswordDigest;
  ...
  String username = ...;
  String password = ...;
  String realm = "resin";

  PasswordDigest passwordDigest = PasswordDigest();

  String digest = passwordDigest.getPasswordDigest(username, password, realm);
</example>
<p>Unix users can quickly calculate a digest with this script:</p>
<example>
echo -n "user:resin:password" | openssl dgst -md5 -binary | uuencode -m -
</example>
</s2>
<s2 title="Disabling the Use of password-digest">
<p>
Using password digests is so important that all Resin authenticators use it by default. 
Although it is really not advised, Resin's authenticators can be also be configured to use 
passwords that are not in digest form. You can do this by specifying 
<code>password-digest="none"</code> as in the example below:
</p>
<example title="Disabling the Use of password-digest">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  ...	 
  &lt;resin:XmlAuthenticator&lt;/type&gt;
    &lt;resin:password-digest&gt;none&lt;/resin:password-digest&gt;    
    &lt;resin:user name="harry" password="quidditch" group="user"/>
  &lt;/resin:XmlAuthenticator>
  ...
&lt;/web-app>
</example>
<p>
This technique can come in handy for development, testing, etc where password security is 
not critical.
</p>
</s2>
<s2 title="Setting Password Digest Realm">
<p>
The realm for Resin authenticators such as the DatabaseAuthenticator and the 
XmlAuthenticator defaults to "resin". However, if you want, you can explicitly specify the 
realm to be used for digesting like this:
</p>
<example title="Specifying a Realm">
&lt;web-app xmlns="http://caucho.com/ns/resin"
          xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:DatabaseAuthenticator&gt;
    &lt;resin:password-digest-realm&gt;hogwarts&lt;/resin:password-digest-realm&gt;
    ...
  &lt;/resin:DatabaseAuthenticator&gt;
  ...  
&lt;/web-app>  
</example>
</s2>
</s1>
<s1 title="Single Sign-on">
<p>
<i>Single sign-on</i> refers to allowing for a single login for more than one context, 
for example, logging into all web-apps in a server at once without having to re-enter 
authentication information. Resin allows single sign-on by allowing you to place an 
authenticator at the host or server level instead of at the web-app level. The shared 
authenticator then applies to all the web applications under the host or server. Once you 
authenticate, the login will last for all the web-apps in that environment/scope.
</p>
<p>For example, to configure an XML authenticator for all the web-apps in foo.com, you 
might configure as follows:</p>
<example title="Single Sign-on for foo.com">
&lt;resin xmlns="http://caucho.com/ns/resin"
      xmlns:resin="urn:java:com.caucho.resin"&gt;

  &lt;cluster id="app-tier&gt;
    &lt;http port="8080"/&gt;

    &lt;host id="foo.com"&gt;
      &lt;root-directory&gt;/opt/foo.com&lt;/root-directory&gt;

      &lt;!-- Shared across the host -->
      &lt;resin:XmlAuthenticator"&gt;
        &lt;!-- password: quidditch --&gt;
        &lt;resin:user name="harry" password="uTOZTGaB6pooMDvqvl2LBu" group="user,gryffindor"/>
	
        &lt;!-- password: pureblood --&gt;
        &lt;resin:user name="dmalfoy" password="yI2uN1l97Rv5E6mdRnDFDB" group="user,slytherin"/>
      &lt;/resin:XmlAuthenticator&gt;

      &lt;web-app-deploy path="webapps"/&gt;
    &lt;/host&gt;
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>
<p>
Any .war in the webapps directory will share the same login across the host. Note, you will 
still need to implement a <a href="deploy-ref.xtp#login-config">login-config</a> for each 
web-app in addition to login managers/authorization.
</p>
<p>
The value of <a config-tag="reuse-session-id">reuse-session-id</a> must be 
<code>true</code> for single sign-on.
</p>
<s2 title="Single Sign-on for Virtual Hosts">
<p>
The basis for establishing client identity is the standard JSESSIONID session cookie. If 
single sign-on is desired for virtual hosts, Resin must be configured to notify the browser 
of the proper domain name for the cookie so that the same JSESSIONID cookie is submitted 
by the browser to each virtual host.
</p>
<p>
In this case, an authenticator is placed at the cluster level so that it is common to all 
virtual hosts. The <a href="deploy-ref.xtp#session-config">cookie-domain</a> is placed in a 
<a href="deploy-ref.xtp#web-app-default">web-app-default</a> at the cluster level so that 
it is applied as the default for all webapps in all virtual hosts.
</p>
<p>The following example shows how you can configure single sign-on for two different 
sub-domains:</p>
<example title="Single Sign-on for gryffindor.hogwarts.com and slytherin.hogwarts.com">
&lt;resin xmlns="http://caucho.com/ns/resin"
        xmlns:resin="urn:java:com.caucho.resin"&gt;
	
  &lt;cluster id="app-tier&gt;
    &lt;http port="8080"/&gt;

    &lt;!-- Shared across all hosts -->
    &lt;resin:XmlAuthenticator"&gt;
      &lt;user name="Harry" password="..."/>
    &lt;/resin:XmlAuthenticator&gt;

    &lt;web-app-default&gt;
      &lt;session-config&gt;
        &lt;cookie-domain&gt;.hogwarts.com&lt;/cookie-domain&gt;
      &lt;/session-config&gt;
    &lt;/web-app-default&gt;

    &lt;host id="gryffindor.hogwarts.com"&gt;
      ...
    &lt;/host&gt;

    &lt;host id="slytherin.hogwarts.com"&gt;
      ...
    &lt;/host&gt;
  &lt;/cluster&gt;
&lt;/resin&gt;
</example>
<p>
Because of the way that browsers are restricted by the HTTP specification from
submitting cookies to servers, it is not possible to have a single sign-on for
virtual hosts that do not share some portion of their domain name.  For example,
"gryffindor.com" and "slytherin.com" cannot share a common authentication.
</p>
</s2>
<!-- XXX: This needs further clarification -->
<deftable title="Clustering Single Signon">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/ClusterSingleSignon.html">&lt;resin:ClusterSingleSignon></a></td>
  <td>Cluster-based single signon.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/MemorySingleSignon.html">&lt;resin:MemorySingleSignon></a></td>
  <td>Memory-based single signon.</td>
</tr>
</deftable>
</s1>
<s1>
<!-- XXX: This needs further clarification -->
<deftable title="Permission Mapping">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/XmlRoleMap.html">&lt;resin:XmlRoleMap></a></td>
  <td>Role to group permission mapping.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/AbstractRoleMap.html">AbstractRoleMap</a></td>
  <td>Abstract class for custom role to group permission mapping.</td>
</tr>
</deftable>
</s1>
<s1 title="Compatibility with Other Application Servers">
<p>Authenticators are not defined by the 
<a href="http://www.jcp.org/en/jsr/detail?id=315">Servlet Specification</a>, so the ability 
to use passwords stored as a digest depends upon the implementation of the Authenticator 
that the application server provides. MD5-base64 is the most common form of digest, 
because it is the default in HTTP digest authentication, which is why Resin uses it.</p>
<p>The use of <code>&lt;auth-method&gt;DIGEST&lt;auth-method&gt;</code> is defined in the 
Servlet Specification and implemented in most application servers.</p>
</s1>
</body>
</document>
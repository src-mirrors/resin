<document>
<header>
<product>resin</product>
<title>Resin Security</title>
<description>
Resin has a comprehensive security framework for application authentication, 
authorization and transport level SSL based security. Authentication capabilities include 
built-in support for security data stored in XML files, the database, JAAS, LDAP or 
properties files, HTTP basic authentication, form based authentication and 
HTTP password digests. The authorization features include traditional role based security 
as well as robust conditionals based-on cookies, HTTP headers, locale, IP address and 
the like. The security framework also supports single sign-on shared across multiple 
web applications.
</description>
</header>
<body>
<localtoc/>
<s1 title="Resin Security">
<s2 title="Overview">
<p>
Resin includes a comprehensive security framework for application authentication, 
authorization and transport level SSL based security. Authentication capabilities include 
built-in support for security data stored in XML files, the database, JAAS, LDAP or 
properties files, HTTP basic authentication, form based authentication and password digests. 
The authorization features include traditional role based security as well as robust 
conditionals based-on cookies, HTTP headers, locale, IP address and the like.
The security framework also supports single sign-on shared across multiple web applications.
</p>
<p>
This document covers Resin's authentication and authorization capabilities while Resin's 
SSL support is described in detail <a href="security-ssl.xtp">here</a>.
</p>
<p>
The basic structure of the Resin security framework can be demonstrated through a simple 
example:
</p>
<example title="WEB-INF/resin-web.xml Basic security framework example">
&lt;web-app xmlns="http://caucho.com/ns/resin"
            xmlns:resin="urn:java:com.caucho.resin">
  &lt;!-- The authentication mechanism -->
  &lt;resin:BasicLogin/>

  &lt;!-- Authorization -->
  &lt;resin:Allow url-pattern="/foo/*">
    &lt;resin:IfUserInRole role="user"/>
  &lt;/resin:Allow>

  &lt;!-- Authentication provider -->
  &lt;resin:XmlAuthenticator password-digest="none">
    &lt;resin:user name="Harry Potter" password="quidditch" group="user,gryffindor"/>
    &lt;resin:user name="Draco Malfoy" password="pureblood" group="user,slytherin"/>
  &lt;/resin:XmlAuthenticator>
  
&lt;/web-app>
</example>    
<p>
Most usages of the Resin security framework will follow the general outline of the example 
above. In the example, the &lt;resin:Allow> tag enables authorization whereas the 
&lt;resin:IfUserInRole> applies role-based authorization. There is a rich set of available
authorization features that are discussed in the sections below. Users actually enter 
authentication information through HTTP basic authentication in the example above. The 
various mechanisms for authentication allowed in Resin will be discussed shortly in a 
following section. The authentication information that the user enters is checked against 
an authentication provider. In the example, the authentication information, including 
user name, password and groups, are stored in XML (the passwords above are simple text,
but they need not and should not be). Resin offers a number of authentication providers 
other than &lt;resin:XmlAuthenticator>. We will discuss this in detail in the next section.
Note, authentication can sometimes be entirely unnecessary, especially while using 
condition authorization rules not specific to a user - such as a condition allowing or
denying a set of IP addresses from accessing a URL.
</p>
</s2>
<s2 title="Authenticators">
<p>
<i>Authentication</i> is the process of verifying that a user is who they say they are. 
The most common way of verifying the identity of a user is through user name and password.
As demonstrated in the example, Resin uses authenticators to verify user credentials. The
following are the authenticators Resin currently supports:
</p>
<deftable title="Authenticators">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td>
    <a href="http://caucho.com/resin-javadoc/com/caucho/security/DatabaseAuthenticator.html">&lt;resin:DatabaseAuthenticator></a>
  </td>
  <td>
    This authenticator works with authentication information stored in a relational 
    database and uses JDBC.
  </td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/JaasAuthenticator.html">&lt;resin:JaasAuthenticator></a></td>
  <td>
    This authenticator can be used to plugin-in any Java authentication service (JAAS) 
    module into Resin, including the JAAS modules built into the Sun JDK.
  </td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/LdapAuthenticator.html">&lt;resin:LdapAuthenticator></a></td>
  <td>
    This can be used with authentication data stored in LDAP and uses JNDI under the 
    hood.
  </td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/PropertiesAuthenticator.html">&lt;resin:PropertiesAuthenticator></a></td>
  <td>This authenticator can use credentials stored in properties files.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/XmlAuthenticator.html">&lt;resin:XmlAuthenticator></a></td>
  <td>Uses data stored in XML (either in-line or in a separate file).</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/AbstractAuthenticator.html">AbstractAuthenticator</a></td>
  <td>
    This is an abstract class you can sue to create your own Resin custom authenticator.
  </td>
</tr>
</deftable>  
<p>
Each authenticator is described in detail <a href="security-authenticators.xtp">here</a>,
including example code that you could use as a starting point for your application. The 
built-in authenticators should satisfy a large number of common cases, but you can easily
create your own custom authenticator when needed.
</p>
<p>
Resin supports single sign-on in the form of authenticators at the server or virtual host
level shared across multiple web applications. This described in detail with authenticators
if this is functionality you need for your application.  
</p>
</s2>
<s2 title="Securing Resin Administration">
<p>
The Resin security framework and the authenticators above are intended for application 
security. However, Resin resources such as <code>/resin-admin</code> as well as the Resin clustered managemnt and deployment administrative features also 
needs to be secured. Resin internally uses the security framework to secure these resources. 
</p>
<p>
The <a href="http://caucho.com/resin-javadoc/com/caucho/security/AdminAuthenticator.html">&lt;resin:AdminAuthenticator></a>
tag is used to secure all Resin resources such as /resin-admin. The admin authenticator is defined only once in the 
resin.xml file. The authenticator uses the exact same syntax as the XmlAuthenticator. 
</p>
<p>
Resin's top-level &lt;resin:AdminAuthenticator> tag is essentially a static, XML-based authentication context. The 
authenticator is automatically shared for all hosts and web-apps, so simple sites can even use this authenticator 
configuration for their site-wide authentication.
</p>
<p>Here is a basic example of the Resin admin authenticator:</p>
<example title="resin.xml">
&lt;resin xmlns="http://caucho.com/ns/resin"
          xmlns:resin="urn:java:com.caucho.resin">
  ...
  &lt;resin:AdminAuthenticator>
    &lt;user name="admin" password="MD5HASH=="/>
    ...
  &lt;/resin:AdminAuthenticator>
  ...
&lt;/resin>
</example>
</s2>
<s2 title="Login Managers">
<p>
Authenticators manage how authentication data is stored, how the user-provided login information is matched to the
stored authentication information and how an authenticated principal is constructed. A login manager, on the other hand,
controls how the login information is actually collected. HTTP basic authentication is the simplest authentication 
method (the variety that causes a login/password prompt to appear on the browser when you access a URL). The following are 
the login managers Resin currently supports:
</p>
<deftable title="Login Managers">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/BasicLogin.html">&lt;resin:BasicLogin></a></td>
  <td>HTTP basic authentication.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/DigestLogin.html">&lt;resin:DigestLogin></a></td>
  <td>HTTP digest authentication.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/FormLogin.html">&lt;resin:FormLogin></a></td>
  <td>Form-based authentication.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/AbstractLogin.html">AbstractLogin</a></td>
  <td>Abstract class for custom login managers.</td>
</tr>
</deftable>
<p>
Each login manager is described in detail <a href="security-authentication-method.xtp">here</a>,
including example code that you could use as a starting point for your application. The 
built-in login managers should satisfy a large number of common cases, but you can easily
create your own custom login manager when needed.
</p> 
</s2>
<s2 title="Authorization">
<p>
<i>Authorization</i> is the process of verifying that an authenticated user has the 
appropriate priviledges to access a secure resource. The typical authorization process 
verifies that a user has the right set of permissions to access a URL or is assigned to 
the correct role/group.
</p>
<p>
Resin has a very robust set of built-in authorization rules including conditionals, 
role-based security and combining/chaining rules. Authorization rules are based on a basic 
URL pattern based allow/deny tag set:
</p>
<deftable title="Basic Authorization">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/Allow.html">&lt;resin:Allow></a></td>
  <td>Allows access to a URL pattern.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/security/Deny.html">&lt;resin:Deny></a></td>
  <td>Denies access to a URL pattern.</td>
</tr>
</deftable>
<p>
The allow/deny high-level directives can be qualified through a set of conditionals that 
include the most common case of role-based security (shown in the initial example):
</p>
<deftable title="Basic Conditions">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfAuthType.html">&lt;resin:IfAuthType></a></td>
  <td>Checks for the authentication type, request.getAuthType().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfCookie.html">&lt;resin:IfCookie></a></td>
  <td>Checks for the presence of a named HTTP cookie from request.getCookies().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfCron.html">&lt;resin:IfCron></a></td>
  <td>Matches if the current time is in an active range configured by cron-style times.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfFileExists.html">&lt;resin:IfFileExists></a></td>
  <td>Matches if the URL corresponds to an actual file.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfHeader.html">&lt;resin:IfHeader></a></td>
  <td>Tests for a HTTP header and value match.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfLocale.html">&lt;resin:IfLocale></a></td>
  <td>Tests for a Locale match from the HTTP request.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfLocalPort.html">&lt;resin:IfLocalPort></a></td>
  <td>Compares the local port of the request, request.getLocalPort().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfMethod.html">&lt;resin:IfMethod></a></td>
  <td>Compares the HTTP method, request.getMethod().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfNetwork.html">&lt;resin:IfNetwork></a></td>
  <td>Compares the remote IP address to a network pattern like 192.168/16.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfQueryParam.html">&lt;resin:IfQueryParam></a></td>
  <td>Tests for a HTTP query parameger, request.getParameter().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfRemoteAddr.html">&lt;resin:IfRemoteAddr></a></td>
  <td>Tests against the remote IP address, request.getRemoteAddr().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfRemoteUser.html">&lt;resin:IfRemoteUser></a></td>
  <td>Tests against the remote user, request.getRemoteUser().</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfSecure.html">&lt;resin:IfSecure></a></td>
  <td>True for SSL requests, i.e. if request.isSecure() is true.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/IfUserInRole.html">&lt;resin:IfUserInRole></a></td>
  <td>Tests is the user is in the role.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/RequestPredicate.html">RequestPredicate</a></td>
  <td>Interface for custom request predicates.</td>
</tr>
</deftable>
<p>These conditionals can also be combined/chained as needed using the following tags:</p>
<deftable title="Combining Conditions">
<tr>
  <th>name</th>
  <th>description</th>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/And.html">&lt;resin:And></a></td>
  <td>Matches if all children match.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/Or.html">&lt;resin:Or></a></td>
  <td>Matches if any children match.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/Not.html">&lt;resin:Not></a></td>
  <td>Matches if the child does not match.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/NotAnd.html">&lt;resin:NotAnd></a></td>
  <td>Matches if any child does not match.</td>
</tr>
<tr>
  <td><a href="http://caucho.com/resin-javadoc/com/caucho/rewrite/NotOr.html">&lt;resin:NotOr></a></td>
  <td>Matches if all the children do not match.</td>
</tr>
</deftable>
<p>
Each authorization tag is described in detail 
<a href="security-authorization.xtp">here</a>, including example code that you could use 
as a starting point for your application as well as common usage patterns. The built-in 
rules should satisfy a large number of common cases, but you can easily create your own 
custom predicate when needed.
</p>
</s2>
</s1>
</body>
</document>
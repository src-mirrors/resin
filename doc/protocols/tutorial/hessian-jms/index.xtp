<document>
  <header>
    <product>resin</product>
    <title>Hessian Service</title>
    <description>
      <p>Writing a Hessian service as a plain-old Java object (POJO)
eliminates protocol dependencies and simplifies service testing.
</p>
    </description>
    <type>tutorial</type>
    <tutorial-startpage>demo.jsp</tutorial-startpage>
  </header>

  <body>
    <summary/>

<s1 title="Files in this tutorial">
<deftable>
<tr><td><viewfile-link file="WEB-INF/classes/example/HelloService.java"/>
    </td><td>Interface for the hello service.
</td></tr><tr><td><viewfile-link file="WEB-INF/classes/example/HelloServiceImpl.java"/>
    </td><td>The main service implementation.
</td></tr><tr><td><viewfile-link file="WEB-INF/web.xml"/>
    </td><td>Configures the environment
</td></tr><tr><td><viewfile-link file="demo.jsp"/>
    </td><td>Client JSP
</td></tr></deftable>
</s1>

<s1 title="Service Implementation">

<p>The HelloService implementation is just a Java class that implements
the HelloService API.  This service responds by placing the results of
the request on a JMS queue.</p>

<example title="HelloServiceImpl.java" language="java">
package example;

import java.util.logging.Logger;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;

public class HelloServiceImpl implements HelloService {
  private static final Logger log =
    Logger.getLogger(HelloService.class.getName());

  private ConnectionFactory _connectionFactory;
  private Destination _destination;
  private MessageProducer _producer;
  private Session _jmsSession;

  public void setConnectionFactory(ConnectionFactory connectionFactory)
  {
    _connectionFactory = connectionFactory;
  }

  public void setResultQueue(Destination destination)
  {
    _destination = destination;
  }

  public void init()
  {
    try {
      Connection connection = _connectionFactory.createConnection();
      _jmsSession = 
        connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

      _producer = _jmsSession.createProducer(_destination);
    } catch (JMSException e) {
      log.warning(e.toString());
    }
  }
  
  public void hello()
  {
    try {
      TextMessage textMessage = _jmsSession.createTextMessage();

      textMessage.setText("hello, world");

      _producer.send(textMessage);
    } catch (JMSException e) {
      log.warning(e.toString());
    }
  }
}
</example>

<p>
The configuration for this example is the following:
</p>

<example title="web.xml" language="xml">
&lt;web-app xmlns="http://caucho.com/ns/resin">
  &lt;resource var="serviceQueue" 
            jndi-name="jms/ServiceQueue"
            type="com.caucho.jms.memory.MemoryQueue"/>
  
  &lt;resource var="resultQueue"
            jndi-name="jms/ResultQueue"
            type="com.caucho.jms.memory.MemoryQueue"/>
  
  &lt;resource var="jmsFactory"
            jndi-name="jms/ConnectionFactory"
            type="com.caucho.jms.ConnectionFactoryImpl"/>

  &lt;resource type="com.caucho.hessian.server.HessianListener">
    &lt;init>
      &lt;connection-factory>${jmsFactory}&lt;/connection-factory>
      &lt;destination>${serviceQueue}&lt;/destination>
      &lt;service resin:type="example.HelloServiceImpl">
        &lt;connection-factory>${jmsFactory}&lt;/connection-factory>
        &lt;result-queue>${resultQueue}&lt;/result-queue>
      &lt;/service>
    &lt;/init>
  &lt;/resource>
&lt;/web-app>
</example>

<p>
Finally, the service is called from a JSP page:
</p>

<example title="demo.jsp">
&lt;%@ page import="example.HelloService" %>

&lt;%@ page import="com.caucho.hessian.client.HessianProxyFactory" %>

&lt;%@ page import="javax.naming.Context" %>
&lt;%@ page import="javax.naming.InitialContext" %>

&lt;%@ page import="javax.jms.Connection" %>
&lt;%@ page import="javax.jms.ConnectionFactory" %>
&lt;%@ page import="javax.jms.Destination" %>
&lt;%@ page import="javax.jms.MessageConsumer" %>
&lt;%@ page import="javax.jms.Message" %>
&lt;%@ page import="javax.jms.Session" %>
&lt;%@ page import="javax.jms.TextMessage" %>
&lt;%
// Check for results

Context context = (Context) new InitialContext().lookup("java:comp/env");

ConnectionFactory connectionFactory = 
  (ConnectionFactory) context.lookup("jms/ConnectionFactory");

Destination resultQueue = (Destination) context.lookup("jms/ResultQueue");

Connection connection = connectionFactory.createConnection();
Session jmsSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

MessageConsumer consumer = jmsSession.createConsumer(resultQueue);

connection.start();

Message message = consumer.receive(1);

if (message == null) {
  out.println("No results available");
} else if (message instanceof TextMessage) {
  out.println(((TextMessage) message).getText());
}

// Make a request

HessianProxyFactory factory = new HessianProxyFactory();

String url = "jms:jms/ServiceQueue";

HelloService hello = (HelloService) factory.create(HelloService.class, url);

hello.hello();
%>
</example>

<p>
<a href="demo.jsp">Try the example</a>
</p>

</s1>

  </body>
</document>

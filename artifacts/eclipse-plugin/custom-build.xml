<?xml version="1.0" encoding="UTF-8"?>
<project name="com.caucho.resin.eclipse" default="build.jars" basedir=".">

  <property name="p2.build.repo" value="file:${buildDirectory}/buildRepo"/>
  <property name="basews" value="${ws}"/>
  <property name="baseos" value="${os}"/>
  <property name="basearch" value="${arch}"/>
  <property name="basenl" value="${nl}"/>
  <property name="bundleId" value="com.caucho.resin.eclipse"/>
  <property name="bundleVersion" value="${resin.version}"/>
  <property name="p2.publishonerror" value="false"/>

  <!-- Compiler settings. -->
  <property name="javacFailOnError" value="false"/>
  <property name="javacDebugInfo" value="on"/>
  <property name="javacVerbose" value="false"/>
  <property name="logExtension" value=".log"/>
  <property name="compilerArg" value=""/>
  <property name="compilation.prereq.log"
            value="${buildDirectory}/prereqErrors.log"/>
  <property name="javacSource" value="1.5"/>
  <property name="javacTarget" value="1.5"/>
  <condition property="dir_bootclasspath" value="${java.home}/../Classes">
    <os family="mac"/>
  </condition>
  <property name="dir_bootclasspath" value="${java.home}/lib"/>
  <path id="path_bootclasspath">
    <fileset dir="${dir_bootclasspath}">
      <include name="*.jar"/>
    </fileset>
  </path>
  <property name="bootclasspath" refid="path_bootclasspath"/>
  <condition property="bundleBootClasspath" value="${J2SE-1.5}">
    <isset property="J2SE-1.5"/>
  </condition>
  <condition property="bundleJavacSource" value="1.5">
    <isset property="J2SE-1.5"/>
  </condition>
  <condition property="bundleJavacTarget" value="1.5">
    <isset property="J2SE-1.5"/>
  </condition>
  <property name="bundleJavacSource" value="${javacSource}"/>
  <property name="bundleJavacTarget" value="${javacTarget}"/>
  <property name="bundleBootClasspath" value="${bootclasspath}"/>

  <target name="init" depends="properties">
    <condition property="pluginTemp" value="${buildTempFolder}/plugins">
      <isset property="buildTempFolder"/>
    </condition>
    <property name="pluginTemp" value="${basedir}"/>
    <condition property="build.result.folder"
               value="${pluginTemp}/com.caucho.resin.eclipse_${bundleVersion}">
      <isset property="buildTempFolder"/>
    </condition>
    <property name="build.result.folder" value="${basedir}"/>
    <property name="temp.folder" value="${basedir}/temp.folder"/>
    <property name="plugin.destination" value="${basedir}"/>
    <condition property="p2.publish.parts" value="true">
      <istrue value="${p2.gathering}"/>
    </condition>
    <property name="compilation.problem.marker"
              value="${build.result.folder}/compilation.problem"/>
    <condition property="compilation.problem.marker.exists" value="true">
      <and>
        <available file="${compilation.problem.marker}"/>
        <isfalse value="${p2.publishonerror}"/>
      </and>
    </condition>
  </target>

  <target name="properties" if="eclipse.running">
    <property name="build.compiler"
              value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

  </target>

  <target name="build.update.jar" depends="init"
          description="Build the plug-in: com.caucho.resin.eclipse for an update site.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="build.jars"/>
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${temp.folder}/"/>
    </antcall>
    <jar
        destfile="${plugin.destination}/com.caucho.resin.eclipse_${bundleVersion}.jar"
        basedir="${temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"
        filesetmanifest="merge"/>
    <delete dir="${temp.folder}"/>
  </target>

  <target name="resin-eclipse.jar" depends="init" unless="resin-eclipse.jar"
          description="Create jar: com.caucho.resin.eclipse resin-eclipse.jar.">
    <delete dir="${temp.folder}/resin-eclipse.jar.bin"/>
    <mkdir dir="${temp.folder}/resin-eclipse.jar.bin"/>
    <path id="resin-eclipse.jar.classpath">
      <fileset dir="${eclipse.home}/plugins">
        <include name="org.eclipse.equinox.common_3.6.0.*.jar"/>
        <include name="org.eclipse.core.variables_3.2.*.jar"/>
        <include name="org.eclipse.jst.server.generic.core_1.0.*.jar"/>
        <include name="org.eclipse.core.runtime_3.6.*.jar"/>
        <include name="org.eclipse.osgi_3.6.*.jar"/>
        <include name="org.eclipse.emf.common_2.6.0.*.jar"/>
        <include name="org.eclipse.emf.ecore_2.6.*.jar"/>
        <include name="org.eclipse.wst.server.core_1.1.*.jar"/>
        <include name="org.eclipse.jst.server.core_1.2.*.jar"/>
        <include name="org.eclipse.core.resources_3.6.*.jar"/>
        <include name="org.eclipse.core.jobs_3.5.1.*.jar"/>
        <include name="org.eclipse.debug.core_3.6.0.*.jar"/>
        <include name="org.eclipse.jdt.launching_3.5.*.jar"/>
        <include name="org.eclipse.jface_3.6.1.*.jar"/>
        <include name="org.eclipse.jst.server.generic.ui_1.0.*.jar"/>
        <include name="org.eclipse.swt.*3.6.*.jar"/>
        <include name="org.eclipse.wst.server.ui_1.1.*.jar"/>
      </fileset>

      <pathelement path="lib/resin.jar"/>
      <pathelement path="lib/javaee-16.jar"/>

    </path>
    <!-- compile the source code -->
    <javac destdir="${temp.folder}/resin-eclipse.jar.bin"
           failonerror="${javacFailOnError}" verbose="${javacVerbose}"
           debug="${javacDebugInfo}" includeAntRuntime="no"
           bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}"
           target="${bundleJavacTarget}">
      <classpath refid="resin-eclipse.jar.classpath"/>
      <src path="src/"/>
      <src path="servers/"/>
    </javac>
    <antcall target="checkCompilationResults"/>
    <!-- Copy necessary resources -->
    <copy todir="${temp.folder}/resin-eclipse.jar.bin" failonerror="true"
          overwrite="false">
      <fileset dir="src/">
        <exclude name="**/*.java"/>
        <exclude name="**/package.htm*"/>
      </fileset>
      <fileset dir="servers/">
        <exclude name="**/*.java"/>
        <exclude name="**/package.htm*"/>
      </fileset>
    </copy>
    <mkdir dir="${build.result.folder}"/>
    <jar destfile="${build.result.folder}/resin-eclipse.jar"
         basedir="${temp.folder}/resin-eclipse.jar.bin"/>
    <delete dir="${temp.folder}/resin-eclipse.jar.bin"/>
  </target>

  <target name="resin-eclipsesrc.zip" depends="init"
          unless="resin-eclipsesrc.zip">
    <mkdir dir="${build.result.folder}"/>
    <antcall target="zip.resin-eclipsesrc.zip"/>
  </target>
  <target name="zip.resin-eclipsesrc.zip">
    <zip destfile="${build.result.folder}/resin-eclipsesrc.zip"
         filesonly="false" whenempty="skip" update="false">
      <fileset dir="src/">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="servers/">
        <include name="**/*.java"/>
      </fileset>
    </zip>
  </target>
  <target name="copy.resin-eclipsesrc.zip">
    <copy todir="${source.destination.folder}/resin-eclipsesrc"
          failonerror="true" overwrite="true">
      <fileset dir="src/">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="servers/">
        <include name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="build.jars" depends="init"
          description="Compile classes and build nested jars for the plug-in: com.caucho.resin.eclipse.">
    <delete file="${compilation.problem.marker}" quiet="true"/>
    <available property="resin-eclipse.jar"
               file="${build.result.folder}/resin-eclipse.jar"/>
    <antcall target="resin-eclipse.jar"/>
  </target>

  <target name="checkCompilationResults" if="compilation.error.occured">
    <echo file="${compilation.problem.marker}"
          message="com.caucho.resin.eclipse_${bundleVersion}${line.separator}compilation.error.occured=${compilation.error.occured}"/>
    <eclipse.logCompileError bundle="com.caucho.resin.eclipse_${bundleVersion}"
                             log="${compilation.prereq.log}">
    </eclipse.logCompileError>
  </target>

  <target name="build.sources" depends="init">
    <available property="resin-eclipsesrc.zip"
               file="${build.result.folder}/resin-eclipsesrc.zip"/>
    <antcall target="resin-eclipsesrc.zip"/>
  </target>

  <target name="publish.bin.parts" depends="init" if="p2.publish.parts"
          unless="compilation.problem.marker.exists">
    <mkdir
        dir="${build.result.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
    <copy todir="${build.result.folder}" failonerror="true" overwrite="true">
      <fileset dir="${basedir}">
        <include name="META-INF/MANIFEST.MF"/>
        <include name="plugin.xml"/>
        <include name="fragment.xml"/>
      </fileset>
    </copy>
    <antcall target="apitools.generation">
      <param name="target.folder" value="${build.result.folder}"/>
      <param name="projectLocation" value="${basedir}"/>
      <param name="binary.folders"
             value="${build.result.folder}/resin-eclipse.jar:/Users/alex/Documents/projects/caucho/trunk/resin/artifacts/eclipse-plugin/lib/resin.jar"/>
      <param name="projectName" value="${bundleId}_${bundleVersion}"/>
    </antcall>
    <eclipse.gatherBundle
        metadataRepository="${p2.build.repo}"
        artifactRepository="${p2.build.repo}"
        buildResultFolder="${build.result.folder}"
        unpack="true"
        baseDirectory="${basedir}"
        />
  </target>

  <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
    <mkdir
        dir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
    <copy
        todir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"
        failonerror="true" overwrite="false">
      <fileset dir="${build.result.folder}">
        <include name="resin-eclipse.jar"/>
      </fileset>
    </copy>
    <copy
        todir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"
        failonerror="true" overwrite="true">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="plugin.xml"/>
        <include name="plugin.properties"/>
        <include name="servers/"/>
        <include name="icons/"/>
        <include name="conf/"/>
        <include name="buildfiles/"/>
        <include name="resin-eclipse.jar"/>
        <include name="lib/resin.jar"/>
        <include name="lib/javaee-16.jar"/>
      </fileset>
    </copy>
    <antcall target="apitools.generation">
      <param name="target.folder"
             value="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
      <param name="projectLocation" value="${basedir}"/>
      <param name="binary.folders"
             value="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}/resin-eclipse.jar:/Users/alex/Documents/projects/caucho/trunk/resin/artifacts/eclipse-plugin/lib/resin.jar"/>
      <param name="projectName" value="${bundleId}_${bundleVersion}"/>
    </antcall>
  </target>

  <target name="build.zips" depends="init">
  </target>

  <target name="gather.sources" depends="init" if="destination.temp.folder">
    <mkdir
        dir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
    <copy file="${build.result.folder}/resin-eclipsesrc.zip"
          todir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"
          failonerror="false" overwrite="false"/>
    <antcall target="copy.src.includes">
      <param name="source.destination.folder"
             value="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
    </antcall>
  </target>

  <target name="gather.individual.sources" depends="init">
    <antcall target="copy.resin-eclipsesrc.zip">
      <param name="source.destination.folder"
             value="${destination.temp.folder}"/>
    </antcall>
    <antcall target="copy.src.includes">
      <param name="source.destination.folder"
             value="${destination.temp.folder}"/>
    </antcall>
  </target>

  <target name="copy.src.includes" depends="init">
    <copy todir="${source.destination.folder}" failonerror="false"
          overwrite="false">
      <fileset dir="${basedir}">
        <include name="build.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="gather.logs" depends="init" if="destination.temp.folder">
    <mkdir
        dir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"/>
    <copy
        todir="${destination.temp.folder}/com.caucho.resin.eclipse_${bundleVersion}"
        failonerror="false" overwrite="false">
      <fileset dir="${temp.folder}">
        <include name="resin-eclipse.jar.bin${logExtension}"/>
      </fileset>
    </copy>
  </target>

  <target name="clean" depends="init"
          description="Clean the plug-in: com.caucho.resin.eclipse of all the zips, jars and logs created.">
    <delete file="${build.result.folder}/resin-eclipse.jar"/>
    <delete file="${build.result.folder}/resin-eclipsesrc.zip"/>
    <delete
        file="${plugin.destination}/com.caucho.resin.eclipse_${bundleVersion}.jar"/>
    <delete
        file="${plugin.destination}/com.caucho.resin.eclipse_${bundleVersion}.zip"/>
    <delete dir="${temp.folder}"/>
    <delete file="${compilation.problem.marker}" quiet="true"/>
  </target>

  <target name="refresh" depends="init" if="eclipse.running"
          description="Refresh this folder.">
    <eclipse.convertPath
        fileSystemPath="/Users/alex/Documents/projects/caucho/trunk/resin/artifacts/eclipse-plugin"
        property="resourcePath"/>
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
  </target>

  <target name="zip.plugin" depends="init"
          description="Create a zip containing all the elements for the plug-in: com.caucho.resin.eclipse.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="build.jars"/>
    <antcall target="build.sources"/>
    <antcall target="gather.bin.parts">
      <param name="destination.temp.folder" value="${temp.folder}/"/>
    </antcall>
    <antcall target="gather.sources">
      <param name="destination.temp.folder" value="${temp.folder}/"/>
    </antcall>
    <delete>
      <fileset dir="${temp.folder}">
        <include name="**/*.bin${logExtension}"/>
      </fileset>
    </delete>
    <zip
        destfile="${plugin.destination}/com.caucho.resin.eclipse_${bundleVersion}.zip"
        basedir="${temp.folder}" filesonly="true" whenempty="skip"
        update="false"/>
    <delete dir="${temp.folder}"/>
  </target>

  <target name="apitools.generation" if="generateAPIDescription">
    <apitooling.apigeneration projectName="${projectName}"
                              project="${projectLocation}"
                              binary="${binary.folders}"
                              target="${target.folder}"
                              extramanifests="${extraManifests}"/>
  </target>

</project>

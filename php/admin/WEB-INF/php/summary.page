<?php
/**
 * Provides the most important status information about the Resin server.
 *
 * @author Sam
 */

require_once "WEB-INF/php/inc.php";

if (! admin_init()) {
  return;
}

enable_graph_controls();

$mbean_server = $g_mbean_server;
$resin = $g_resin;
$server = $g_server;

echo "<h1>Summary</h1>\n";

$report = "Summary";
$stat = $g_mbean_server->lookup("resin:type=StatService");

if ($stat) {
  $snapshot = "&amp;snapshot=true";
  $ss_profile = "&amp;snapshot=true&amp;profile_time=60&amp;profile_tick=10";
  
  echo " <br /> ";
  echo "PDF (";
  
  echo "<a href='pdf-gen.php?report=$report$snapshot&amp;period=1800'>30 minutes</a> ";
  echo " [<a href='pdf-gen.php?report=$report$ss_profile&amp;period=1800'>profile</a>]";
  
  echo ", <a href='pdf-gen.php?report=$report$snapshot&amp;period=3600'>1 hour</a>";
  echo " [<a href='pdf-gen.php?report=$report$ss_profile&amp;period=3600'>profile</a>]";
  
  echo ", <a href='pdf-gen.php?report=$report$snapshot&amp;period=14400'>4 hours</a>";
  
  echo ", <a href='pdf-gen.php?report=$report$snapshot&amp;period=28800'>8 hours</a>";
  
  echo ", <a href='pdf-gen.php?report=$report$snapshot&amp;period=86400'>1 day</a>";
  
  echo ", <a href='pdf-gen.php?report=$report$snapshot&amp;period=604800'>1 week</a>)";

  echo " <br /> ";
}      



echo "<div id='summary-tabs'>\n";
echo "<ul>\n";

echo "<li><a href='#overview-tab'>Overview</a></li>\n";
echo "<li><a href='#meter-tab'>Meters</a></li>\n";
echo "<li><a href='#table-tab'>Tables</a></li>\n";
echo "<li><a href='#log-tab'>Logs</a></li>\n";
echo "</ul>";

echo "<div id='overview-tab'>";

print_overview();

echo "<h2>Health"; print_Help("Health"); echo "</h2>\n";

display_health_status($g_server->SelfServer);

print_overview_graphs();

echo "</div>";

echo "<div id='meter-tab'>\n";

print_graphs();

echo "</div>\n";

echo "<div id='table-tab'>\n";

print_threads();
print_tcp_ports();
print_load_balance();
print_database_pools();

echo "</div>\n";

echo "<div id='log-tab'>";

recent_messages();

echo "</div>";


echo "</div>";

function print_overview()
{
  global $g_mbean_server;
  global $g_server;
  global $resin;

  $server = $g_server;

  $runtime = $g_mbean_server->lookup("java.lang:type=Runtime");
  $os = $g_mbean_server->lookup("java.lang:type=OperatingSystem");
  $row = 0;
?>


<table class="data" summary="Overview">
  <tr class='<?= row_style($row++) ?>'>
    <th id="server_id" class='item'
        title="The server id used when starting this instance of Resin, the value of '-server'.">
    Server id:</th>
    <td headers="server_id"><?= $server->Id ? $server->Id : '""' ?></td>
    <th id="user" class='item'
        title="The operating system user that is running this instance of Resin.">
      User:</th>
    <td headers="user"><?= $resin->UserName ?></td>
    
    <th id='machine' class='item'
        title="The ip address of the machine that is running this instance of Resin.">
      Machine:
    </th>
    <td headers="machine"><?= $runtime->Name ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id='version' class='item'
        title="The Resin version.">
      Resin:
    </th>
    <td headers="version" colspan='5'><?= $resin->Version ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="jdk" class='item'
        title="The JDK version.">
      JDK:
    </th>
    <td headers="jdk" colspan='5'><?= $runtime->VmName ?> <?= $runtime->VmVersion ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="os" class='item'
        title="The OS version.">
    OS:</th>
    <td headers="os" colspan='5'>
      <?= $os->AvailableProcessors ?> cpu,
      <?= $os->Name ?>
      <?= $os->Arch ?>
      <?= $os->Version ?>
    </td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="start" class='item'
        title="The Watchdog Start Message.">
    Message:</th>
    <td headers="start" colspan='5'>
      <?= $resin->WatchdogStartMessage ?>
    </td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="state" class='item'
        title="The current lifecycle state">
      State:
    </th>
    <td headers="state" class="<?= $server->State ?>"><?= $server->State ?></td>

    <th id="uptime" class='item'
        title="The time that this instance was last started or restarted.">
      Uptime:
    </th>
    <?php
      $start_time = $server->StartTime->time / 1000;
      $now = $server->CurrentTime->time / 1000;
      $uptime = $now - $start_time;

      if ($uptime < 12 * 3600)
        echo "<td headers='uptime' class='warmup' colspan='3'>";
      else
        echo "<td headers='uptime' colspan='3'>";

      echo sprintf("%d days %02d:%02d:%02d",
                   $uptime / (24 * 3600),
                   $uptime / 3600 % 24,
                   $uptime / 60 % 60,
                   $uptime % 60);
      echo " -- " . format_datetime($server->StartTime);
     ?>
   </td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="heap_free" class='item'
        title="The current free amount of heap memory available for the JVM, in bytes.">
	Free heap:
    </th>
    <td headers="heap_free"><?= format_memory($server->RuntimeMemoryFree) ?></td>
    
    <th id="heap_total" class='item'
        title="The current total amount of heap memory available for the JVM, in bytes.">
      Total heap:
    </th>
    <td headers="heap_total" colspan='3'><?= format_memory($server->RuntimeMemory) ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="fd_count" class='item'
        title="The current file descriptors used.">
	File des:
    </th>
    <td headers="fd_count"><?= $os->OpenFileDescriptorCount ?></td>
    
    <th id="fd_max" class='item'
        title="The maximum file descriptors available.">
	File des max:
    </th>
    <td headers="fd_max" colspan='3'><?= $os->MaxFileDescriptorCount ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="swap_free" class='item'
        title="The free amount of operating-system swap space.">
	Free Swap:
    </th>
    <td headers="swap_free"><?= format_memory($os->FreeSwapSpaceSize) ?></td>
    
    <th id="swap_total" class='item'
        title="The total amount of operating-system swap space.">Total Swap:</th>
    <td headers="swap_total" colspan='3'><?= format_memory($os->TotalSwapSpaceSize) ?></td>
  </tr>

  <tr class='<?= row_style($row++) ?>'>
    <th id="mem_free" class='item'
        title="The free amount of operating-system physical memory.">Free Physical:</th>
    <td headers="mem_free"><?= format_memory($os->FreePhysicalMemorySize) ?></td>
    
    <th id="mem_total" class='item'
        title="The total amount of operating-system physical memory.">Total Physical:</th>
    <td headers="mem_total" colspan='3'><?= format_memory($os->TotalPhysicalMemorySize) ?></td>
  </tr>


<?php

  if ($mbean_server) {
    $block_cache = $mbean_server->lookup("resin:type=BlockManager");
    $proxy_cache = $mbean_server->lookup("resin:type=ProxyCache");
  }

  echo "</table>\n";
}

function print_overview_graphs()
{
  global $g_server;
  
  $server = $g_server;
  $si = sprintf("%02d", $server->ServerIndex);
  
  $stat = get_stats_service();
  if (! $stat) {
    return;
  }
    
  $width = 250;
  $height = 150;

  echo "<h3>Graphs</h3>\n";

  echo "<table summary='Graphs' border='0' cellspacing='0' cellpadding='5'>\n";
  echo "<tr valign='top'><td>\n";

	$threads_params = new GraphParams("sum-threads", $width, $height);
	$threads_params->title = "Threads";
	$threads_params->alt = "A line graph representing the number of threads in various thread pools over the last 6 hours.";
  
  stat_graph($threads_params, 
             array("$si|JVM|Thread|JVM Thread Count",
                   "$si|Resin|Thread|Thread Idle Count",
                   "$si|JVM|Thread|JVM Runnable Count",
                   "$si|JVM|Thread|JVM Blocked Count",
                   "$si|JVM|Thread|JVM Native Count",
                   "$si|JVM|Thread|JVM Waiting Count"));
               
  echo "</td><td>\n";
  
	$mem_params = new GraphParams("sum-memory", $width, $height);
	$mem_params->title = "Memory";
	$mem_params->alt = "A line graph representing the amount of free and used memory in each of the heap, tenured, and permgen pools over the last 6 hours.";
  
  stat_graph($mem_params,
             array("$si|JVM|Memory|Heap Memory Used",
                   "$si|JVM|Memory|Heap Memory Free",
                   "$si|JVM|Memory|Tenured Memory Free",
                   "$si|JVM|Memory|PermGen Memory Free"));         
                                  
  echo "</td><td>\n";
               
	$cpu_params = new GraphParams("sum-cpu", $width, $height);
	$cpu_params->title = "CPU";
	$cpu_params->alt = "A line graph representing the active CPU usage over the last 6 hours.";
  
	stat_graph($cpu_params, array("$si|OS|CPU|CPU Active"));
	               
  echo "</td></tr>\n";
	echo "</table>\n";
}

function print_graphs()
{
  global $g_server;

  $server = $g_server;
  $si = sprintf("%02d", $server->ServerIndex);
  
  $stat = get_stats_service();
  if (! $stat) {
    return;
  }
  
	$width = 250;
	$height = 150;
  
	echo "<h2>Summary Graphs</h2>\n";
	
  echo "<table summary='Graphs' border='0' cellspacing='0' cellpadding='5'>";
  echo "<tr valign='top'><td>";
    
	$request_count_params = new GraphParams("request", $width, $height);
	$request_count_params->title = "Request Count";
	$request_count_params->alt = "A line graph representing the number HTTP requests received over the last 6 hours.";
	
  stat_graph($request_count_params, array("$si|Resin|Http|Request Count"));
             
  echo "</td><td>";
    
	$request_time_params = new GraphParams("request_time", $width, $height);
	$request_time_params->title = "Request Time";
	$request_time_params->alt = "A line graph representing the amount of time spent processing HTTP requests over the last 6 hours.";
  
  stat_graph($request_time_params,
             array("$si|Resin|Http|Request Time",
                   "$si|Resin|Http|Request Time Max"));
		
  echo "</td><td>";

	$threads_params = new GraphParams("threads", $width, $height);
	$threads_params->title = "Threads";
	$threads_params->alt = "A line graph representing the number of threads in various thread pools over the last 6 hours.";
  
  stat_graph($threads_params,
             array("$si|JVM|Thread|JVM Thread Count",
                   "$si|Resin|Thread|Thread Count",
                   "$si|Resin|Thread|Thread Idle Count",
                   "$si|JVM|Thread|JVM Runnable Count",
                   "$si|JVM|Thread|JVM Blocked Count",
                   "$si|JVM|Thread|JVM Native Count",
                   "$si|JVM|Thread|JVM Waiting Count"));
/*               
  stat_graph("thread", $width, $height,
             array("$si|JVM|Thread|JVM Thread Count",
                   "$si|Resin|Thread|Thread Count",
                   "$si|Resin|Thread|Thread Active Count",
                   "$si|Resin|Thread|Thread Task Queue",
                   "$si|Resin|Thread|Thread Priority Queue",
                   "$si|Resin|Thread|Thread Overflow Count"),
             "A line graph representing the number of threads in various thread pools over the last 6 hours.");
*/               
  echo "</td></tr>";
  echo "<tr valign='top'><td>";
    
	$database_params = new GraphParams("database", $width, $height);
	$database_params->title = "Database Connection Active";
	$database_params->alt = "A line graph representing the amout of time the database connection was active over the last 6 hours.";
  
  stat_graph($database_params, array("$si|Resin|Database|Connection Active"));

  echo "</td><td>";

	$database_time_params = new GraphParams("database_time", $width, $height);
	$database_time_params->title = "Database Query Time";
	$database_time_params->alt = "A line graph representing the amout of time spent querying the database over the last 6 hours.";
  
  stat_graph($database_time_params,
             array("$si|Resin|Database|Query Time",
                   "$si|Resin|Database|Query Time Max"));
		
  echo "</td><td>";
  
	$cpu_params = new GraphParams("cpu", $width, $height);
	$cpu_params->title = "CPU";
	$cpu_params->alt = "A line graph representing the active CPU usage over the last 6 hours.";
  
	stat_graph($cpu_params, array("$si|OS|CPU|CPU Active"));

  echo "</td></tr>";
  echo "<tr valign='top'><td>";

	$memory_params = new GraphParams("memory", $width, $height);
	$memory_params->title = "Memory";
	$memory_params->alt = "A line graph representing the amount of free and used memory in each of the heap, tenured, and permgen pools over the last 6 hours.";
  
	stat_graph($memory_params,
             array("$si|JVM|Memory|Heap Memory Used",
                   "$si|JVM|Memory|Heap Memory Free",
                   "$si|JVM|Memory|Tenured Memory Used",
                   "$si|JVM|Memory|PermGen Memory Used"));
             
  echo "</td><td>";
  
	$memory_gc_params = new GraphParams("memory_gc", $width, $height);
	$memory_gc_params->title = "GC Time";
	$memory_gc_params->alt = "A line graph representing the amount of time spent perfoming garbage collection over the last 6 hours.";
  
  stat_graph_regexp($memory_gc_params, "/$si\|JVM\|Memory\|GC Time/");
  
  echo "</td><td>";

  $netstat_params = new GraphParams("netstat", $width, $height);
	$netstat_params->title = "Netstat";
	$netstat_params->alt = "A line graph representing network activity over the last 6 hours.";
  
	stat_graph_regexp($netstat_params, "/$si\|OS\|Network\|(?!tcp-time)/");
	
  echo "</td></tr>";
  echo "</table>";
}

function recent_messages()
{
  global $mbean_server;

  if ($mbean_server) {
    $mbean = $mbean_server->lookup("resin:type=LogService");
  }

  //
  // recent messages
  //
  
  if ($mbean) {
    $now = time();

    $messages = $mbean->findMessages("warning",
                                     ($now - 24 * 3600) * 1000,
                                     $now * 1000);

    if (! empty($messages)) {
      echo "<h2>Recent Messages</h2>\n";

      echo "<table class='data'>\n";
      echo "<thead>\n";
      echo "<tr><th scope='col' class='date'>Date</th>";
      echo "    <th scope='col' class='level'>Level</th>";
      echo "    <th scope='col' class='message'>Message</th></tr>\n";
      echo "</thead>\n";

      $messages = array_reverse($messages);

      echo "<tbody class='scroll'>\n";
      foreach ($messages as $message) {
        echo "<tr class='{$message->level}'>";
        echo "  <td class='date'>";
        echo strftime("%Y-%m-%d&nbsp;%H:%M:%S", $message->timestamp / 1000);
        echo "</td>";
        echo "  <td class='level'>{$message->level}</td>";
        echo "  <td class='message'>" . htmlspecialchars(wordwrap($message->message, 90));
        echo "  </td>";
        echo "</tr>";
      }

      echo "</tbody>\n";
      echo "</table>\n";
    }

    //
    // startup
    //
    $start_time = $server->StartTime->time / 1000;

    $messages = $mbean->findMessages(($start_time - 15 * 60) * 1000, ($start_time - 2) * 1000);

    if (! empty($messages)) {
      echo "<h2>Shutdown Messages</h2>\n";

      echo "<table class='data'>\n";
      echo "<thead>\n";
      echo "<tr><th scope='col' class='date'>Date</th>";
      echo "    <th scope='col' class='level'>Level</th>";
      echo "    <th scope='col' class='message'>Message</th></tr>\n";
      echo "</thead>\n";
      
      $messages = array_reverse($messages);

      echo "<tbody class='scroll'>\n";

      // mark the start time
      echo "<tr class='warning'>";
      echo "  <td class='date'>";
      echo strftime("%Y-%m-%d %H:%M:%S", $start_time);
      echo "</td>";
      echo "  <td class='level'></td>";
      echo "  <td class='message'>Start Time</td>";
      echo "</tr>";

      foreach ($messages as $message) {
        echo "<tr class='{$message->level}'>";
        echo "  <td class='date'>";
        echo strftime("%Y-%m-%d %H:%M:%S", $message->timestamp / 1000);
        echo "</td>";
        echo "  <td class='level'>{$message->level}</td>";
        echo "  <td class='message'>" . htmlspecialchars(wordwrap($message->message, 90)) . "</td>";
        echo "</tr>";
      }

      echo "</tbody>\n";
      echo "</table>\n";
    }
  }
}

function print_tcp_ports()
{
  global $server;

  $thread_pool = $server->ThreadPool;

  $ports = $server->Ports;

  if ($ports) {
    echo "<h2>TCP ports"; print_help("Ports"); echo "</h2>\n";
?>

<table class="data">
  <tr>
    <th colspan='2'>&nbsp;</th>
    <th colspan='3' id='threads'>Threads</th>
    <th colspan='4' id='keepalive'>Keepalive</th>
  </tr>

  <tr>
    <th id='listener'>Listener</th>
    <th id='port-status'>Status</th>

    <th id='thread-active'>Active</th>
    <th id='thread-idle'>Idle</th>
    <th id='thread-total'>Total</th>

    <th id='keepalive-active'>Total</th>
    <th id='keepalive-thread'>Thread</th>
    <th id='keepalive-non-block'>Non-Block</th>
    <th id='keepalive-comet'>Comet</th>
  </tr>
<?php
    $count = 0;
    $row = 0;

    foreach ($server->Ports as $port) {
      $count++;
?>

  <tr class='<?= $row++ % 2 == 0 ? "ra" : "rb" ?>'>
    <td class='item' headers="listener"><?= $port->ProtocolName ?>://<?= $port->Address ? $port->Address : "*" ?>:<?= $port->Port ?></td>
    <td class="<?= $port->State ?>" headers="port-status"><?= $port->State ?></td>
    <td headers="threads thread-active"><?= $port->ThreadActiveCount ?></td>
    <td headers="threads thread-idle"><?= $port->ThreadIdleCount ?></td>
    <td headers="threads thread-total"><?= $port->ThreadCount ?></td>

    <td headers="keepalive keepalive-active"><?= $port->KeepaliveCount ?></td>
    <td headers="keepalive keepalive-thread"><?= $port->KeepaliveThreadCount ?></td>
    <td headers="keepalive keepalive-non-block"><?= $port->KeepaliveSelectCount ?></td>
    <td headers="keepalive keepalive-comet"><?= $port->CometIdleCount ?></td>
  </tr>
<?php
    }

    echo "</table>";
  }
}

function print_threads()
{
  global $mbean_server;
  global $server;

  $conn = null;

  $jvm_thread = $mbean_server->lookup("java.lang:type=Threading");

  $connInfoList = array();

  foreach ($server->Ports as $port) {
    $portConnInfo = $port->connectionInfo();

    if ($portConnInfo)
      $connInfoList = array_merge($connInfoList, $portConnInfo);
  }

  $row = 0;
  @ usort($connInfoList, "conn_time_cmp");

  echo "<h3>Open Connections</h3>";

  echo "<table class='data' summary='Open Connections'>";
  echo "<tr><th scope='col'>action</th><th scope='col'>time</th><th scope='col'>id</th><th scope='col'>url</th><th scope='col'>IP</th></tr>\n";

  foreach ($connInfoList as $connInfo) {
    if ($connInfo->requestTime >= 0 && $connInfo->threadId >= 0) {
      echo "<tr class='" . ($row++ % 2 == 0 ? "ra" : "rb") . "'>\n";
      echo "<tr>\n";
      echo "<td>\n";

      $pname = "port_" . $row;
    
      $threadId = $connInfo->threadId;
    
      $show = "hide('s_$pname');show('h_$pname');show('h1_$pname')";
      $hide = "show('s_$pname');hide('h_$pname');hide('h1_$pname')";
      echo "<a id='s_$pname' href=\"javascript:$show\">[show]</a> ";
      echo "<a id='h_$pname' href=\"javascript:$hide\" style='display:none'>[hide]</a> ";
      echo "<td>";
    
      echo sprintf("%.3fs", $connInfo->requestTime * 0.001);
      // echo " thread=" . $threadId;
      echo "<td>";
      echo $connInfo->id;
    
      echo "<td>";
      $conn = $server->findConnectionByThreadId($threadId);
      if ($conn)
        echo $conn->getUrl();
      else
        echo $connInfo->state;

      echo "<td>";
      echo " " . ($conn ? $conn->getRemoteAddress() : "");
      echo "\n";
      echo "</tr>";

      echo "<tr><td colspan='5'>";
      echo "<pre id='h1_$pname' style='display:none'>";

      $thread = $jvm_thread->getThreadInfo($threadId, 50);
      /*
      foreach ($thread->stackTrace as $trace) {
        echo "     at " . $trace->className . "." . $trace->methodName . "\n";
      }
      */

      echo $thread;

      echo "</pre>";
      echo "</td>";
      echo "</tr>";
    }
  }

  echo "</table>\n";
}

function print_load_balance()
{
  global $resin;

  echo "<!-- Cluster -->\n";

  echo "<h2>Load Balance and Clusters";
  print_help("Load Balance");
  echo "</h2>\n"

?>

<table class="data">
  <tr>
    <th id="cluster-server">Server</th>
    <th id="cluster-address">Address</th>
    <th id="cluster-status">Status</th>
    <th id="cluster-active">Active</th>
    <th id="cluster-idle">Idle</th>
    <th id="cluster-conn_miss">Connection Miss</th>
    <th id="cluster-load">Load</th>
    <th id="cluster-latency">Latency</th>
    <th id="cluster-failures" colspan='2'>Failures</th>
    <th id="cluster-busy" colspan='2'>Busy</th>
  </tr>
<?php

  foreach ($resin->Clusters as $cluster) {
    if (empty($cluster->Servers))
      continue;

    echo "<tr><td class='group' colspan='12' id='$cluster->Name'>$cluster->Name</td></tr>\n";

  $count = 0;
  foreach ($cluster->Servers as $client) {
?>

  <tr class='<?= $count++ % 2 == 0 ? "ra" : "rb" ?>'>
    <td class='item' headers="cluster-server <?=$cluster->Name?>"><?= $client->Name ?></td>
    <td headers="cluster-address <?=$cluster->Name?>"><?= $client->Address ?>:<?= $client->Port ?></td>
    <td headers="cluster-status <?=$cluster->Name?>" class="<?= $client->ClusterState ?>"><?= $client->ClusterState ?></td>
    <td headers="cluster-active <?=$cluster->Name?>"><?= $client->ConnectionActiveCount ?></td>
    <td headers="cluster-idle <?=$cluster->Name?>"><?= $client->ConnectionIdleCount ?></td>
    <td headers="cluster-conn_miss <?=$cluster->Name?>"><?= format_miss_ratio($client->ConnectionKeepaliveCountTotal,
                              $client->ConnectionNewCountTotal) ?></td>
    <td headers="cluster-load <?=$cluster->Name?>"><?= sprintf("%.2f", $client->ServerCpuLoadAvg) ?></td>
    <td headers="cluster-latency <?=$cluster->Name?>"><?= sprintf("%.2f", $client->LatencyFactor) ?></td>
    <?php
      format_ago_td_pair($client->ConnectionFailCountTotal, $client->LastFailTime, "cluster-failures " . $cluster->Name);
      format_ago_td_pair($client->ConnectionBusyCountTotal, $client->LastBusyTime, "cluster-busy " . $cluster->Name);
    ?>
  </tr>
<?php 
    }
  }

  echo "</table>\n";
}  

function print_database_pools()
{
  global $mbean_server;

  if ($mbean_server) {
    $db_pools = $mbean_server->query("resin:*,type=ConnectionPool");
  }

  if ($db_pools) {
    require_once("WEB-INF/php/db.php");

    echo "<h2>Database Pools";
    print_help("Database Pools");
    echo "</h2>\n"

    echo print_db_pools($db_pools);
  }
}

/*
if ($mbean_server) {
  $store = $mbean_server->lookup("resin:type=PersistentStore");
}

if ($store) {
  echo "<h2>Persistent Store: $store->StoreType</h2>\n";
  echo "<table class='data'>";

  echo "<tr><th>Object Count</th><td>$store->ObjectCount</td>\n";
  echo "<tr><th>Load Count</th><td>$store->LoadCountTotal</td>\n";
  echo "<tr><th>Load Fail Count</th><td>$store->LoadFailCountTotal</td>\n";
  echo "<tr><th>Save Count</th><td>$store->SaveCountTotal</td>\n";
  echo "<tr><th>Save Fail Count</th><td>$store->SaveFailCountTotal</td>\n";
  echo "</table>";
}
*/

function conn_time_cmp($conn_a, $conn_b)
{
  return $conn_b->requestTime - $conn_a->requestTime;
}

display_footer($g_page, $javascript. javascript_create_tab("summary-tabs"));

?>

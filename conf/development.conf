<!--
   - Alternative to resin.conf, suited for development.
   -
   - Start Resin with:
   -
   - httpd.exe    -server-root /path/to/webapp -J-ea -Xdebug -conf conf/development.conf 
   - bin/httpd.sh -server-root /path/to/webapp -J-ea -Xdebug -conf conf/development.conf 
   -
   - Command Line Options:
   -
   -  -server-root path           path to web application, required
   -  -Dhttp.port=8080            the http port to listen on, default is `8080'
   -  -Dlog.level=fine            logging level, `info' `fine' `finest' etc, default `fine'
   -  -J-ea                       enable assertions
   -  -Xdebug                     enable HotSwap class reloading
   - 
   - File layout of web application /path/to/webapp/... is:
   -
   - index.html                   corresponds to http://localhost:8080/index.html
   -                                          or http://localhost:8080/
   -
   - index.jsp                    corresponds to http://localhost:8080/index.jsp
   -                                          or http://localhost:8080/
   -
   - WEB-INF/                      directory for configuration, hidden from browser
   -
   - WEB-INF/resin-web.xml         Web application specific configuration
   -
   - WEB-INF/web.xml               Standard J2EE web application specific configuration
   -                               for portability to other servlet/jsp containers.
   -
   - WEB-INF/classes/...           directory for .java files
   -                               Resin automatically compiles these when 
   -                               they change.
   -
   -   For example:
   -       WEB-INF/clasess/example/HelloWorldServlet.java
   -        => WEB-INF/clasess/example/HelloWorldServlet.class
   -
  -->
<resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="http://caucho.com/ns/resin/core">

  <resin:set var="http.port" default="8080"/>
  <resin:set var="log.level" default="fine"/>

  <log path="stdout:">
    <logger name="" level="${Var['log.level']}" format="${log.level} ${log.message}"/>
  </log>

  <server>
    <class-loader>
      <tree-loader path="${resinHome}/lib"/>
    </class-loader>

    <http server-id="" host="*" port="${Var['http.port']}"/>

    <dependency-check-interval>2s</dependency-check-interval>

    <javac compiler="internal" args=""/>

    <resin:import path="${resin.home}/conf/app-default.xml"/>

    <resin:if test="${resin.isProfessional()}">
      <cache path="WEB-INF/cache" memory-size="8M"/>
    </resin:if>

    <web-app-default>
      <cache-mapping url-pattern="/" expires="5s"/>
      <cache-mapping url-pattern="*.gif" expires="60s"/>
      <cache-mapping url-pattern="*.jpg" expires="60s"/>

      <allow-servlet-el/>
    </web-app-default>

    <host id="">
      <web-app id="/">
        <class-loader>
          <compiling-loader path="WEB-INF/classes"/>
          <compiling-loader path="WEB-INF/classes" source="WEB-INF/src"/>
          <library-loader path="WEB-INF/lib"/>
        </class-loader>

        <session-config>
          <file-store/>
        </session-config>
      </web-app>
    </host>
  </server>
</resin>

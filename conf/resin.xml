<!--
   - Resin 4.0 configuration file.
   -
   - See conf/full.xml for more sample configuration, including load
   - balancing and database configuration.
  -->
<resin xmlns="http://caucho.com/ns/resin"
       xmlns:resin="urn:java:com.caucho.resin"
       xmlns:memcache="urn:java:com.caucho.memcache"
       xmlns:health="urn:java:com.caucho.health">

  <!-- property-based Resin configuration -->
  <resin:properties path="${__DIR__}/resin.properties" optional="true"/>
  <resin:properties path="cloud:/resin.properties" optional="true" recover="true"/>
  
  <!-- Logging configuration for the JDK logging API. -->
  <log-handler name="" level="all" path="stdout:"
               timestamp="[%y-%m-%d %H:%M:%S.%s] {%{thread}} "/>

  <!--
     - level='info' for production
     - 'fine' or 'finer' for development and troubleshooting
    -->
  <logger name="" level="${rvar('log_level')?:'info'}"/>

  <logger name="com.caucho.java" level="config"/>
  <logger name="com.caucho.loader" level="config"/>

  <!--
     - driver .jar files can be placed in ${resin.root}/resin.d/lib
     -->
  <class-loader>
    <tree-loader path="${resin.root}/ext-lib"/>
    <tree-loader path="${resin.root}/resin.d/lib"/>
    <tree-loader path="cloud:/resin.d/lib"/>
  </class-loader>

  <!--
     - default configuration applied to all clusters
    -->
  <resin:import path="${__DIR__}/cluster-default.xml"/>
  
  <!--
     - health configuration
    -->
  <resin:import path="${__DIR__}/health.xml"/>

  <!-- local configuration files -->
  <resin:import fileset="${__DIR__}/resin-inf/*.xml"/>
  <resin:import fileset="cloud:/resin-inf/*.xml" recover="true"/>
  
  <!--
     - Remote management requires at least one enabled admin user.
    -->
  <resin:AdminAuthenticator>
    <user name="${admin_user}" password="${admin_password}"/>
    
    <resin:import path="${__DIR__}/admin-users.xml" optional="true"/>
    <resin:import path="cloud:/admin-users.xml" optional="true" recover="true"/>
  </resin:AdminAuthenticator>

  <!--
     - For clustered systems, create a password in as system_key
    -->
  <resin-system-auth-key>${system_key}</resin-system-auth-key>

  <!--
     - For production sites, change dependency-check-interval to something
     - like 600s, so it only checks for updates every 10 minutes.
    -->
  <dependency-check-interval>${dependency_check_interval?:'2s'}</dependency-check-interval>

  <!-- Java system-properties -->
  <system-property mail.smtp.host="${smtp_host?:'127.0.0.1'}"/>
  <system-property mail.smtp.port="${smtp_port?:25}"/>
  <system-property mail.smtp.from="${smtp_from}"/>

  <!-- For resin.properties dynamic cluster joining -->
  <join-cluster>${join_cluster}</join-cluster>

  <!--
     - Configures the main application cluster.  Load-balancing configurations
     - will also have a load-balance-tier cluster.
    -->
  <cluster id="app">
    <!-- sets the content root for the cluster, relative to resin.root -->
    <root-directory>.</root-directory>

    <host-default>
      <!-- creates the webapps directory for .war expansion -->
      <web-app-deploy path="webapps"
                      expand-preserve-fileset="WEB-INF/work/**"
                      versioning="${webapp_versioning}"/>
    </host-default>

    <!-- the default host, matching any host name -->
    <host id="" root-directory=".">
      <!--
         - webapps can be overridden/extended in the resin.xml
         -
         - <web-app id="/" root-directory="webapps/ROOT"/>
        -->
      
      <!--
	 - Resin documentation - remove for a live site
	-->
      <resin:if test="${rvar('resin_doc')}">
        <web-app id="/resin-doc" root-directory="${resin.root}/doc/resin-doc"/>
      </resin:if>
    </host>
  </cluster>

  <cluster id="web_tier">
    <!-- define the servers in the cluster -->
    <server-multi id-prefix="web-" address-list="${web_tier}" port="6810"/>

    <host id="" root-directory="web-tier">
      <web-app id="">
        <resin:LoadBalance regexp="" cluster="app_tier"/>
      </web-app>
    </host>
  </cluster>

  <cluster id="cache_tier">
    <!-- define the servers in the cluster -->
    <server-multi id-prefix="cache-"
                  address-list="${cache_tier}"
                  port="6820">
      <!-- listen for the memcache protocol -->
      <listen port="${rvar('memcached_port')?:11212}"
              keepalive-timeout="600s" socket-timeout="600s">
        <memcache:MemcachedProtocol/>
      </listen>
    </server-multi>
  </cluster>
</resin>


/*
 * Copyright (c) 1998-2007 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Sam
 */

package com.caucho.netbeans.wizard;

import com.caucho.netbeans.core.ResinConfiguration;

import org.openide.util.RequestProcessor;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class InstallPanelVisual
  extends javax.swing.JPanel
{
  private final List _listeners = new ArrayList();
  private RequestProcessor.Task _validationTask;

  private ResinConfiguration _resinConfiguration = new ResinConfiguration();

  private String _errorMessage;

  public InstallPanelVisual()
  {
    initComponents();
    DocumentListener updateListener = new DocumentListener()
    {
      public void changedUpdate(DocumentEvent e)
      {
        validateChanges();
      }

      public void removeUpdate(DocumentEvent e)
      {
        validateChanges();
      }

      public void insertUpdate(DocumentEvent e)
      {
        validateChanges();
      }
    };

    _resinHomeTextField.getDocument().addDocumentListener(updateListener);
    _resinConfTextField.getDocument().addDocumentListener(updateListener);
    _serverIdTextField.getDocument().addDocumentListener(updateListener);
    _serverPortTextField.getDocument().addDocumentListener(updateListener);

    _resinHomeTextField.getDocument().addDocumentListener(new DocumentListener()
    {

      public void changedUpdate(DocumentEvent e) { homeChanged(); }
      public void removeUpdate(DocumentEvent e) { homeChanged(); }
      public void insertUpdate(DocumentEvent e) { homeChanged(); }
    });
  }


  public ResinConfiguration getResinConfiguration()
  {
    return _resinConfiguration;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
        // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
        private void initComponents()
        {
                _descriptionLabel = new javax.swing.JLabel();
                _resinHomeLabel = new javax.swing.JLabel();
                _resinHomeTextField = new javax.swing.JTextField();
                _resinHomeBrowseButton = new javax.swing.JButton();
                _resinConfLabel = new javax.swing.JLabel();
                _resinConfTextField = new javax.swing.JTextField();
                _resinConfBrowseButton = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();
                _serverIdTextField = new javax.swing.JTextField();
                jLabel2 = new javax.swing.JLabel();
                _serverPortTextField = new javax.swing.JTextField();

                org.openide.awt.Mnemonics.setLocalizedText(_descriptionLabel, "Specify the details for the Resin installation");
                _descriptionLabel.getAccessibleContext().setAccessibleName("");
                _descriptionLabel.getAccessibleContext().setAccessibleDescription("");

                _resinHomeLabel.setLabelFor(_resinHomeTextField);
                org.openide.awt.Mnemonics.setLocalizedText(_resinHomeLabel, "Resin &Home:");
                _resinHomeLabel.setToolTipText("The Resin Home is the installation folder of the Resin software, for example C:\\resin-pro-3.1.x or /usr/share/resin-pro-3.1.x.");
                _resinHomeLabel.getAccessibleContext().setAccessibleName("Resin &Home");
                _resinHomeLabel.getAccessibleContext().setAccessibleDescription("");

                _resinHomeTextField.setColumns(15);
                _resinHomeTextField.setToolTipText("The Resin Home is the installation folder of the Resin software, for example C:\\resin-pro-3.1.x or /usr/share/resin-pro-3.1.x.");
                _resinHomeTextField.getAccessibleContext().setAccessibleName("Resin &Home");

                org.openide.awt.Mnemonics.setLocalizedText(_resinHomeBrowseButton, "&Browse...");
                _resinHomeBrowseButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                                _resinHomeBrowseButtonActionPerformed(evt);
                        }
                });

                _resinHomeBrowseButton.getAccessibleContext().setAccessibleName("&Browse for Resin Home");

                _resinConfLabel.setLabelFor(_resinConfTextField);
                org.openide.awt.Mnemonics.setLocalizedText(_resinConfLabel, "Resin &Conf:");
                _resinConfLabel.setToolTipText("The Resin Conf is the main Resin configuration file, typically named resin.conf.  The default is the file conf/resin.conf contained in the Resin Home folder, however many installtions will have a resin.conf in a custom location, for example /etc/resin.conf.");
                _resinConfLabel.getAccessibleContext().setAccessibleName("Resin &Conf");
                _resinConfLabel.getAccessibleContext().setAccessibleDescription("");

                _resinConfTextField.setColumns(15);
                _resinConfTextField.setToolTipText("The Resin Conf is the main Resin configuration file, typically named resin.conf.  The default is the file conf/resin.conf contained in the Resin Home folder, however many installtions will have a resin.conf in a custom location, for example /etc/resin.conf.");
                _resinConfTextField.getAccessibleContext().setAccessibleName("Resin &Conf");
                _resinConfTextField.getAccessibleContext().setAccessibleDescription("");

                org.openide.awt.Mnemonics.setLocalizedText(_resinConfBrowseButton, "Br&owse...");
                _resinConfBrowseButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                                _resinConfBrowseButtonActionPerformed(evt);
                        }
                });

                _resinConfBrowseButton.getAccessibleContext().setAccessibleName("Br&owse for Resin Conf");
                _resinConfBrowseButton.getAccessibleContext().setAccessibleDescription("");

                jLabel1.setLabelFor(_serverIdTextField);
                org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Server &Id");
                jLabel1.setToolTipText("The Server Id corresponds to the id attribute of an entry like  <server id=\"\" address=\"127.0.0.1\" port=\"6800\"/> in resin.conf.  ");
                jLabel1.getAccessibleContext().setAccessibleDescription("");

                _serverIdTextField.setToolTipText("The Server Id corresponds to the id attribute of an entry like  <server id=\"\" address=\"127.0.0.1\" port=\"6800\"/> in resin.conf.  ");

                jLabel2.setLabelFor(_serverPortTextField);
                org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Server &Port");
                jLabel2.setToolTipText("The Server Port corresponds to the port attribute of an entry like  <server id=\"\" address=\"127.0.0.1\" port=\"6800\"/>in resin.conf.  ");
                jLabel2.getAccessibleContext().setAccessibleDescription("");

                _serverPortTextField.setText("6800");
                _serverPortTextField.setToolTipText("The Server Port corresponds to the port attribute of an entry like  <server id=\"\" address=\"127.0.0.1\" port=\"6800\"/>in resin.conf.  ");

                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(_descriptionLabel)
                                        .add(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(_resinHomeLabel)
                                                        .add(jLabel1)
                                                        .add(_resinConfLabel)
                                                        .add(jLabel2))
                                                .add(28, 28, 28)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(layout.createSequentialGroup()
                                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                                        .add(_resinHomeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                                                        .add(_resinConfTextField))
                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                                        .add(_resinConfBrowseButton)
                                                                        .add(_resinHomeBrowseButton)))
                                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                                .add(org.jdesktop.layout.GroupLayout.LEADING, _serverPortTextField)
                                                                .add(org.jdesktop.layout.GroupLayout.LEADING, _serverIdTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .add(_descriptionLabel)
                                .add(19, 19, 19)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(_resinHomeLabel)
                                        .add(_resinHomeBrowseButton)
                                        .add(_resinHomeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                                .add(60, 60, 60)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(jLabel1)
                                                        .add(_serverIdTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .add(layout.createSequentialGroup()
                                                .add(18, 18, 18)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                                        .add(_resinConfLabel)
                                                        .add(_resinConfBrowseButton)
                                                        .add(_resinConfTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jLabel2)
                                        .add(_serverPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );
        }// </editor-fold>//GEN-END:initComponents

  private void _resinHomeBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)
  {//GEN-FIRST:event_rootButtonActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setSelectedFile(new File(_resinHomeTextField.getText().trim()));
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      _resinHomeTextField.setText(chooser.getSelectedFile().getAbsolutePath());
      validateChanges();
    }
  }//GEN-LAST:event_rootButtonActionPerformed

  private void _resinConfBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)
  {                                           
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setSelectedFile(new File(_resinConfTextField.getText().trim()));
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      _resinConfTextField.setText(chooser.getSelectedFile().getAbsolutePath());
      validateChanges();
    }
  }                                          

  public void addChangeListener(ChangeListener l)
  {
    synchronized (_listeners) {
      _listeners.add(l);
    }
  }

  public void removeChangeListener(ChangeListener l)
  {
    synchronized (_listeners) {
      _listeners.remove(l);
    }
  }

  public boolean isValid()
  {
    _errorMessage = null;

    try {
      _resinConfiguration.setResinHome(new File(_resinHomeTextField.getText()));
      _resinConfiguration.setResinConf(new File(_resinConfTextField.getText()));
      _resinConfiguration.setServerId(_serverIdTextField.getText());
      _resinConfiguration.setServerPort(_serverPortTextField.getText());

      _resinConfiguration.validate();
    }
    catch (IllegalArgumentException ex) {
      _errorMessage = ex.getLocalizedMessage();

      return false;
    }
    catch (IllegalStateException ex) {
      _errorMessage = ex.getLocalizedMessage();

      return false;
    }

    return true;
  }

  public String getErrorMessage()
  {
    // prevent the message from being cut off - wizard descriptor issue work-around
    if (_errorMessage == null)
      return null;

    String errorMessage = _errorMessage;

    errorMessage = errorMessage.replaceAll("&", "&amp;");
    errorMessage = errorMessage.replaceAll("<", "&lt;");
    errorMessage = errorMessage.replaceAll(">", "&gt;");

    errorMessage = "<html>" + errorMessage + "</html>";

    return errorMessage;
  }

  public void homeChanged()
  {
    File resinConf = new File(_resinHomeTextField.getText(), "conf/resin.conf");

    if (resinConf.exists()) {
      _resinConfiguration.setResinConf(resinConf);
      _resinConfTextField.setText(resinConf.toString());
    }
  }

  private void validateChanges()
  {
    // schedule the validation task so that error messages won't flash e.g.
    // when calling _resinConfTextField.setText which triggers two consecutive
    // events removeUpdate and insertUpdate. validation after the first one
    // inevitably leads to a failure.
    if (_validationTask == null) {
      _validationTask = RequestProcessor.getDefault().create(new Runnable()
      {
        public void run()
        {
          if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(this);
            return;
          }
          ChangeEvent event = new ChangeEvent(this);
          ArrayList tempList;
          synchronized (_listeners) {
            tempList = new ArrayList(_listeners);
          }
          Iterator iter = tempList.iterator();
          while (iter.hasNext()) {
            ((ChangeListener) iter.next()).stateChanged(event);
          }
        }
      });
    }
    _validationTask.schedule(60);
  }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel _descriptionLabel;
        private javax.swing.JButton _resinConfBrowseButton;
        private javax.swing.JLabel _resinConfLabel;
        private javax.swing.JTextField _resinConfTextField;
        private javax.swing.JButton _resinHomeBrowseButton;
        private javax.swing.JLabel _resinHomeLabel;
        private javax.swing.JTextField _resinHomeTextField;
        private javax.swing.JTextField _serverIdTextField;
        private javax.swing.JTextField _serverPortTextField;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        // End of variables declaration//GEN-END:variables
}

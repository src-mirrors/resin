<!--
   - Resin Javadoc app for Resin version @VERSION@
   -
   - To configure for your local installation:
   -
   - 1) Configure a database to use.  An example configuration
   -    for MySQL is below, the main Resin documentation
   -    is a reference for configuring others.
   -
   - 2) (optional) Add local api's to the list of api's to index and provide
   -    search functionality.  Look below for example <api> elements.
   -->
<web-app xmlns="http://caucho.com/ns/resin">

  <class-loader>
    <compiling-loader path="WEB-INF/classes" source="WEB-INF/src"/>
  </class-loader>

  <database jndi-name="jdbc/resin-javadoc">
    <driver type="org.gjt.mm.mysql.Driver">
      <url>jdbc:mysql://localhost:3306/resin_javadoc</url>
      <user></user>
      <password></password>
    </driver>
    <prepared-statement-cache-size>8</prepared-statement-cache-size>
    <max-connections>20</max-connections>
    <max-idle-time>30s</max-idle-time>
  </database>

  <resource jndi-name="resin-javadoc/store" type="com.caucho.doc.javadoc.Store">
    <init>
      <data-source>jdbc/resin-javadoc</data-source>

      <!-- optionally change table names to use
      <table-name-file>file</table-name-file>
      <table-name-item>item</table-name-item>
      -->

      <api id="resin">
        <name>Resin @VERSION@</name>
        <location>resin</location>
        <index>index-files/index-#.html</index>
      </api>

      <!-- jdk - an example of an api on a remote website -->

      <!--
      <api id="jdk">
        <name>JDK</name>
        <location>@JDKAPI.HREF@</location>
        <index>index-files/index-#.html</index>
      </api>
      -->

      <!-- an example of an api on the local filesystem -->

      <!--
      <api id="axis">
        <name>Axis 1.1</name>
        <location>c:/JAVA/axis-1_1/docs/apiDocs</location>
        <description>
          AXIS provides SOAP.
        </description>
      </api>
      -->

      <!-- 
        - The time period to indicate to Resin's cache and to browsers
        - that the responses (including search results) should be cached.
        - If Resin's http cache is enabled, then the cached
        - result will be used for subsequent requests for the same thing, even
        - by a different user.  This is an effective way to avoid hitting the
        - database for every search.
        -
        - examples: 10m, 10h, 10D
        - -1 disables (not a good idea, but useful during development) 
       --> 
      <http-cache-period>1D</http-cache-period>

      <!-- true/false show a help message about adding more api's -->
      <show-add-help>true</show-add-help>
    </init>
  </resource>

</web-app>


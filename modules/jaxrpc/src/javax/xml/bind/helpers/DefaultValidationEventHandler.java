/*
* Copyright (c) 1998-2006 Caucho Technology -- all rights reserved
*
* This file is part of Resin(R) Open Source
*
* Each copy or derived work must preserve the copyright notice and this
* notice unmodified.
*
* Resin Open Source is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* Resin Open Source is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
* of NON-INFRINGEMENT.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with Resin Open Source; if not, write to the
*
*   Free Software Foundation, Inc.
*   59 Temple Place, Suite 330
*   Boston, MA 02111-1307  USA
*
* @author Scott Ferguson
*/

package javax.xml.bind.helpers;
import javax.xml.bind.*;

/**
 * JAXB 1.0 only default validation event handler. This is the default handler
 * for all objects created from a JAXBContext that is managing schema-derived
 * code generated by a JAXB 1.0 binding compiler. This handler causes the
 * unmarshal and validate operations to fail on the first error or fatal error.
 * This handler is not the default handler for JAXB mapped classes following
 * JAXB 2.0 or later versions. Default validation event handling has changed
 * and is specified in Unmarshaller and Marshaller. Since: JAXB1.0 Version:
 * $Revision: 1.5 $ Author: Ryan Shoemaker, Sun Microsystems, Inc. See
 * Also:Unmarshaller, Validator, ValidationEventHandler
 */
public class DefaultValidationEventHandler implements ValidationEventHandler {
  public DefaultValidationEventHandler()
  {
    throw new UnsupportedOperationException();
  }


  /**
   * Description copied from interface: Receive notification of a validation
   * warning or error. The ValidationEvent will have a embedded in it that
   * indicates where the error or warning occurred. If an unchecked runtime
   * exception is thrown from this method, the JAXB provider will treat it as
   * if the method returned false and interrupt the current unmarshal,
   * validate, or marshal operation.
   */
  public boolean handleEvent(ValidationEvent event)
  {
    throw new UnsupportedOperationException();
  }

}


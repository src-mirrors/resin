/*
* Copyright (c) 1998-2006 Caucho Technology -- all rights reserved
*
* This file is part of Resin(R) Open Source
*
* Each copy or derived work must preserve the copyright notice and this
* notice unmodified.
*
* Resin Open Source is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* Resin Open Source is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
* of NON-INFRINGEMENT.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with Resin Open Source; if not, write to the
*
*   Free Software Foundation, Inc.
*   59 Temple Place, Suite 330
*   Boston, MA 02111-1307  USA
*
* @author Scott Ferguson
*/

package javax.xml.bind.annotation;

/**
 * Maps a JavaBean property to a XML element derived from property's type.
 * Usage XmlElementRef annotation can be used with a JavaBean property or from
 * within XmlElementRefs This annotation dynamically associates an XML element
 * name with the JavaBean property. When a JavaBean property is annotated with
 * XmlElement, the XML element name is statically derived from the JavaBean
 * property name. However, when this annotation is used, the XML element name
 * is derived from the instance of the type of the JavaBean property at
 * runtime. An element factory method annotated with XmlElementDecl is used to
 * create a JAXBElement instance, containing an XML element name. The presence
 * of XmlElementRef annotation on an element property indicates that the
 * element name from JAXBElement instance be used instead of deriving an XML
 * element name from the JavaBean property name. The usage is subject to the
 * following constraints: If the collection item type (for collection property)
 * or property type (for single valued property) is JAXBElement, then
 * XmlElementRef}.name() and XmlElementRef.namespace() must point an element
 * factory method with an @XmlElementDecl annotation in a class annotated with
 * @XmlRegistry (usually ObjectFactory class generated by the schema compiler)
 * : @XmlElementDecl.name() must equal @XmlElementRef.name()
 * @XmlElementDecl.namespace() must equal @XmlElementRef.namespace(). If the
 * collection item type (for collection property) or property type (for single
 * valued property) is not JAXBElement, then the type referenced by the
 * property or field must be annotated with XmlRootElement. This annotation can
 * be used with the following annotations: XmlElementWrapper,
 * XmlJavaTypeAdapter. See "Package Specification" in javax.xml.bind.package
 * javadoc for additional common information. Example 1: Ant Task Example Thus
 * the following code fragment: Target target = new Target();
 * target.tasks.add(new JarTask()); target.tasks.add(new JavacTask());
 * marshal(target); will produce the following XML output: <target> <jar> ....
 * </jar> <javac> .... </javac> </target> It is not an error to have a class
 * that extends Task that doesn't have XmlRootElement. But they can't show up
 * in an XML instance (because they don't have XML element names). Example 2:
 * XML Schema Susbstitution group support The following example shows the
 * annotations for XML Schema substitution groups. The annotations and the
 * ObjectFactory are derived from the schema. XmlElement class Math { // The
 * value of type()is // JAXBElement.class , which indicates the XML // element
 * name ObjectFactory - in general a class marked // with XmlRegistry. (See
 * ObjectFactory below) // // The name() is "operator", a pointer to a //
 * factory method annotated with a // XmlElementDecl with the name "operator".
 * Since // "operator" is the head of a substitution group that // contains
 * elements "add" and "sub" elements, "operator" // element can be substituted
 * in an instance document by // elements "add" or "sub". At runtime,
 * JAXBElement // instance contains the element name that has been //
 * substituted in the XML document. //
 * XmlElementRef(type=JAXBElement.class,name="operator") JAXBElement? extends
 * Operator> term; } XmlRegistry class ObjectFactory {
 * XmlElementDecl(name="operator") JAXBElementOperator> createOperator(Operator
 * o) {...} XmlElementDecl(name="add",substitutionHeadName="operator")
 * JAXBElementOperator> createAdd(Operator o) {...}
 * XmlElementDecl(name="sub",substitutionHeadName="operator")
 * JAXBElementOperator> createSub(Operator o) {...} } class Operator { ... }
 * Thus, the following code fragment Math m = new Math(); m.term = new
 * ObjectFactory().createAdd(new Operator()); marshal(m); will produce the
 * following XML output: math> add>.../add> /math> Since: JAXB2.0 Author:
 * Kohsuke Kawaguchi, Sun Microsystems,Inc. Sekhar Vajjhala, Sun Microsystems,
 * Inc. See Also:XmlElementRefs
 */
public interface XmlElementRef {

  /**
   * Used in XmlElementRef.type() to signal that the type be inferred from the
   * signature of the property.
   */
  public static final class DEFAULT {
    public DEFAULT()
    {
      throw new UnsupportedOperationException();
    }

  }
}

